if (null !== data.stats.pit) {
  expect(data.stats.pit).toBeInstanceOf(Pit);
  expect(data.stats.pit.prestige).toBeDefined();
  expectTypeOf(data.stats.pit.prestige).toEqualTypeOf<number>();
  expect(data.stats.pit.prestige).toBeGreaterThanOrEqual(0);
  expect(data.stats.pit.xp).toBeDefined();
  expectTypeOf(data.stats.pit.xp).toEqualTypeOf<number>();
  expect(data.stats.pit.xp).toBeGreaterThanOrEqual(0);
  expect(data.stats.pit.level).toBeDefined();
  expectTypeOf(data.stats.pit.level).toEqualTypeOf<number>();
  expect(data.stats.pit.level).toBeGreaterThanOrEqual(0);
  expect(data.stats.pit.kills).toBeDefined();
  expectTypeOf(data.stats.pit.kills).toEqualTypeOf<number>();
  expect(data.stats.pit.kills).toBeGreaterThanOrEqual(0);
  expect(data.stats.pit.deaths).toBeDefined();
  expectTypeOf(data.stats.pit.deaths).toEqualTypeOf<number>();
  expect(data.stats.pit.deaths).toBeGreaterThanOrEqual(0);
  expect(data.stats.pit.KDRatio).toBeDefined();
  expectTypeOf(data.stats.pit.KDRatio).toEqualTypeOf<number>();
  expect(data.stats.pit.KDRatio).toBeGreaterThanOrEqual(0);
  expect(data.stats.pit.assists).toBeDefined();
  expectTypeOf(data.stats.pit.assists).toEqualTypeOf<number>();
  expect(data.stats.pit.assists).toBeGreaterThanOrEqual(0);
  expect(data.stats.pit.maxKillStreak).toBeDefined();
  expectTypeOf(data.stats.pit.maxKillStreak).toEqualTypeOf<number>();
  expect(data.stats.pit.maxKillStreak).toBeGreaterThanOrEqual(0);
  expect(data.stats.pit.playtime).toBeDefined();
  expectTypeOf(data.stats.pit.playtime).toEqualTypeOf<number>();
  expect(data.stats.pit.playtime).toBeGreaterThanOrEqual(0);
  expect(data.stats.pit.joins).toBeDefined();
  expectTypeOf(data.stats.pit.joins).toEqualTypeOf<number>();
  expect(data.stats.pit.joins).toBeGreaterThanOrEqual(0);
  expect(data.stats.pit.damageReceived).toBeDefined();
  expectTypeOf(data.stats.pit.damageReceived).toEqualTypeOf<number>();
  expect(data.stats.pit.damageReceived).toBeGreaterThanOrEqual(0);
  expect(data.stats.pit.damageDealt).toBeDefined();
  expectTypeOf(data.stats.pit.damageDealt).toEqualTypeOf<number>();
  expect(data.stats.pit.damageDealt).toBeGreaterThanOrEqual(0);
  expect(data.stats.pit.damageRatio).toBeDefined();
  expectTypeOf(data.stats.pit.damageRatio).toEqualTypeOf<number>();
  expect(data.stats.pit.damageRatio).toBeGreaterThanOrEqual(0);
  expect(data.stats.pit.meleeDamageReceived).toBeDefined();
  expectTypeOf(data.stats.pit.meleeDamageReceived).toEqualTypeOf<number>();
  expect(data.stats.pit.meleeDamageReceived).toBeGreaterThanOrEqual(0);
  expect(data.stats.pit.meleeDamageDealt).toBeDefined();
  expectTypeOf(data.stats.pit.meleeDamageDealt).toEqualTypeOf<number>();
  expect(data.stats.pit.meleeDamageDealt).toBeGreaterThanOrEqual(0);
  expect(data.stats.pit.swordHits).toBeDefined();
  expectTypeOf(data.stats.pit.swordHits).toEqualTypeOf<number>();
  expect(data.stats.pit.swordHits).toBeGreaterThanOrEqual(0);
  expect(data.stats.pit.leftClicks).toBeDefined();
  expectTypeOf(data.stats.pit.leftClicks).toEqualTypeOf<number>();
  expect(data.stats.pit.leftClicks).toBeGreaterThanOrEqual(0);
  expect(data.stats.pit.meleeAccuracy).toBeDefined();
  expectTypeOf(data.stats.pit.meleeAccuracy).toEqualTypeOf<number>();
  expect(data.stats.pit.meleeAccuracy).toBeGreaterThanOrEqual(0);
  expect(data.stats.pit.meleeDamageRatio).toBeDefined();
  expectTypeOf(data.stats.pit.meleeDamageRatio).toEqualTypeOf<number>();
  expect(data.stats.pit.meleeDamageRatio).toBeGreaterThanOrEqual(0);
  expect(data.stats.pit.bowDamageReceived).toBeDefined();
  expectTypeOf(data.stats.pit.bowDamageReceived).toEqualTypeOf<number>();
  expect(data.stats.pit.bowDamageReceived).toBeGreaterThanOrEqual(0);
  expect(data.stats.pit.bowDamageDealt).toBeDefined();
  expectTypeOf(data.stats.pit.bowDamageDealt).toEqualTypeOf<number>();
  expect(data.stats.pit.bowDamageDealt).toBeGreaterThanOrEqual(0);
  expect(data.stats.pit.arrowsHit).toBeDefined();
  expectTypeOf(data.stats.pit.arrowsHit).toEqualTypeOf<number>();
  expect(data.stats.pit.arrowsHit).toBeGreaterThanOrEqual(0);
  expect(data.stats.pit.arrowsFired).toBeDefined();
  expectTypeOf(data.stats.pit.arrowsFired).toEqualTypeOf<number>();
  expect(data.stats.pit.arrowsFired).toBeGreaterThanOrEqual(0);
  expect(data.stats.pit.bowAccuracy).toBeDefined();
  expectTypeOf(data.stats.pit.bowAccuracy).toEqualTypeOf<number>();
  expect(data.stats.pit.bowAccuracy).toBeGreaterThanOrEqual(0);
  expect(data.stats.pit.bowDamageRatio).toBeDefined();
  expectTypeOf(data.stats.pit.bowDamageRatio).toEqualTypeOf<number>();
  expect(data.stats.pit.bowDamageRatio).toBeGreaterThanOrEqual(0);
  expect(data.stats.pit.goldenHeadsEaten).toBeDefined();
  expectTypeOf(data.stats.pit.goldenHeadsEaten).toEqualTypeOf<number>();
  expect(data.stats.pit.goldenHeadsEaten).toBeGreaterThanOrEqual(0);
  expect(data.stats.pit.getInventory).toBeDefined();
  expectTypeOf(data.stats.pit.getInventory).toEqualTypeOf<() => Promise<PitInventoryItem[]>>();
  expect(data.stats.pit.getInventory).toBeInstanceOf(Function);
  const pitInventory = await data.stats.pit.getInventory();
  expect(pitInventory).toBeDefined();
  pitInventory.forEach((item: PitInventoryItem) => {
    expect(item).toBeDefined();
    expect(item).toBeInstanceOf(PitInventoryItem);
    expectTypeOf(item).toEqualTypeOf<PitInventoryItem>();
    expect(item.itemId).toBeDefined();
    expectTypeOf(item.itemId).toEqualTypeOf<number>();
    expect(item.count).toBeDefined();
    expectTypeOf(item.count).toEqualTypeOf<number>();
    expect(item.name).toBeDefined();
    expectTypeOf(item.name).toEqualTypeOf<string | null>();
    expect(item.lore).toBeDefined();
    expectTypeOf(item.lore).toEqualTypeOf<string | null>();
    expect(item.loreArray).toBeDefined();
    expectTypeOf(item.loreArray).toEqualTypeOf<string[]>();
    expect(item.extraAttributes).toBeDefined();
    expectTypeOf(item.extraAttributes).toEqualTypeOf<object | null>();
  });
  expect(data.stats.pit.getEnterChest).toBeDefined();
  expectTypeOf(data.stats.pit.getEnterChest).toEqualTypeOf<() => Promise<PitInventoryItem[]>>();
  expect(data.stats.pit.getEnterChest).toBeInstanceOf(Function);
  const pitEnterChest = await data.stats.pit.getEnterChest();
  expect(pitEnterChest).toBeDefined();
  pitEnterChest.forEach((item: PitInventoryItem) => {
    expect(item).toBeDefined();
    expect(item).toBeInstanceOf(PitInventoryItem);
    expectTypeOf(item).toEqualTypeOf<PitInventoryItem>();
    expect(item.itemId).toBeDefined();
    expectTypeOf(item.itemId).toEqualTypeOf<number>();
    expect(item.count).toBeDefined();
    expectTypeOf(item.count).toEqualTypeOf<number>();
    expect(item.name).toBeDefined();
    expectTypeOf(item.name).toEqualTypeOf<string | null>();
    expect(item.lore).toBeDefined();
    expectTypeOf(item.lore).toEqualTypeOf<string | null>();
    expect(item.loreArray).toBeDefined();
    expectTypeOf(item.loreArray).toEqualTypeOf<string[]>();
    expect(item.extraAttributes).toBeDefined();
    expectTypeOf(item.extraAttributes).toEqualTypeOf<object | null>();
  });
  expect(data.stats.pit.getArmor).toBeDefined();
  expectTypeOf(data.stats.pit.getArmor).toEqualTypeOf<() => Promise<PitArmor>>();
  expect(data.stats.pit.getArmor).toBeInstanceOf(Function);
  const pitArmor = await data.stats.pit.getArmor();
  expect(pitArmor).toBeDefined();
  expectTypeOf(pitArmor).toEqualTypeOf<PitArmor>();
  expect(pitArmor.helmet).toBeDefined();
  expectTypeOf(pitArmor.helmet).toEqualTypeOf<PitInventoryItem | null>();
  if (null !== pitArmor.helmet) {
    expect(pitArmor.helmet).toBeDefined();
    expect(pitArmor.helmet).toBeInstanceOf(PitInventoryItem);
    expectTypeOf(pitArmor.helmet).toEqualTypeOf<PitInventoryItem>();
    expect(pitArmor.helmet.itemId).toBeDefined();
    expectTypeOf(pitArmor.helmet.itemId).toEqualTypeOf<number>();
    expect(pitArmor.helmet.count).toBeDefined();
    expectTypeOf(pitArmor.helmet.count).toEqualTypeOf<number>();
    expect(pitArmor.helmet.name).toBeDefined();
    expectTypeOf(pitArmor.helmet.name).toEqualTypeOf<string | null>();
    expect(pitArmor.helmet.lore).toBeDefined();
    expectTypeOf(pitArmor.helmet.lore).toEqualTypeOf<string | null>();
    expect(pitArmor.helmet.loreArray).toBeDefined();
    expectTypeOf(pitArmor.helmet.loreArray).toEqualTypeOf<string[]>();
    expect(pitArmor.helmet.extraAttributes).toBeDefined();
    expectTypeOf(pitArmor.helmet.extraAttributes).toEqualTypeOf<object | null>();
  }
  expect(pitArmor.chestplate).toBeDefined();
  expectTypeOf(pitArmor.chestplate).toEqualTypeOf<PitInventoryItem | null>();
  if (null !== pitArmor.chestplate) {
    expect(pitArmor.chestplate).toBeDefined();
    expect(pitArmor.chestplate).toBeInstanceOf(PitInventoryItem);
    expectTypeOf(pitArmor.chestplate).toEqualTypeOf<PitInventoryItem>();
    expect(pitArmor.chestplate.itemId).toBeDefined();
    expectTypeOf(pitArmor.chestplate.itemId).toEqualTypeOf<number>();
    expect(pitArmor.chestplate.count).toBeDefined();
    expectTypeOf(pitArmor.chestplate.count).toEqualTypeOf<number>();
    expect(pitArmor.chestplate.name).toBeDefined();
    expectTypeOf(pitArmor.chestplate.name).toEqualTypeOf<string | null>();
    expect(pitArmor.chestplate.lore).toBeDefined();
    expectTypeOf(pitArmor.chestplate.lore).toEqualTypeOf<string | null>();
    expect(pitArmor.chestplate.loreArray).toBeDefined();
    expectTypeOf(pitArmor.chestplate.loreArray).toEqualTypeOf<string[]>();
    expect(pitArmor.chestplate.extraAttributes).toBeDefined();
    expectTypeOf(pitArmor.chestplate.extraAttributes).toEqualTypeOf<object | null>();
  }
  expect(pitArmor.leggings).toBeDefined();
  expectTypeOf(pitArmor.leggings).toEqualTypeOf<PitInventoryItem | null>();
  if (null !== pitArmor.leggings) {
    expect(pitArmor.leggings).toBeDefined();
    expect(pitArmor.leggings).toBeInstanceOf(PitInventoryItem);
    expectTypeOf(pitArmor.leggings).toEqualTypeOf<PitInventoryItem>();
    expect(pitArmor.leggings.itemId).toBeDefined();
    expectTypeOf(pitArmor.leggings.itemId).toEqualTypeOf<number>();
    expect(pitArmor.leggings.count).toBeDefined();
    expectTypeOf(pitArmor.leggings.count).toEqualTypeOf<number>();
    expect(pitArmor.leggings.name).toBeDefined();
    expectTypeOf(pitArmor.leggings.name).toEqualTypeOf<string | null>();
    expect(pitArmor.leggings.lore).toBeDefined();
    expectTypeOf(pitArmor.leggings.lore).toEqualTypeOf<string | null>();
    expect(pitArmor.leggings.loreArray).toBeDefined();
    expectTypeOf(pitArmor.leggings.loreArray).toEqualTypeOf<string[]>();
    expect(pitArmor.leggings.extraAttributes).toBeDefined();
    expectTypeOf(pitArmor.leggings.extraAttributes).toEqualTypeOf<object | null>();
  }
  expect(pitArmor.boots).toBeDefined();
  expectTypeOf(pitArmor.boots).toEqualTypeOf<PitInventoryItem | null>();
  if (null !== pitArmor.boots) {
    expect(pitArmor.boots).toBeDefined();
    expect(pitArmor.boots).toBeInstanceOf(PitInventoryItem);
    expectTypeOf(pitArmor.boots).toEqualTypeOf<PitInventoryItem>();
    expect(pitArmor.boots.itemId).toBeDefined();
    expectTypeOf(pitArmor.boots.itemId).toEqualTypeOf<number>();
    expect(pitArmor.boots.count).toBeDefined();
    expectTypeOf(pitArmor.boots.count).toEqualTypeOf<number>();
    expect(pitArmor.boots.name).toBeDefined();
    expectTypeOf(pitArmor.boots.name).toEqualTypeOf<string | null>();
    expect(pitArmor.boots.lore).toBeDefined();
    expectTypeOf(pitArmor.boots.lore).toEqualTypeOf<string | null>();
    expect(pitArmor.boots.loreArray).toBeDefined();
    expectTypeOf(pitArmor.boots.loreArray).toEqualTypeOf<string[]>();
    expect(pitArmor.boots.extraAttributes).toBeDefined();
    expectTypeOf(pitArmor.boots.extraAttributes).toEqualTypeOf<object | null>();
  }
}
