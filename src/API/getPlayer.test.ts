import Achievements from '../structures/Player/Achievements';
import Arcade from '../structures/MiniGames/Arcade';
import ArenaBrawl from '../structures/MiniGames/ArenaBrawl';
import BedWars from '../structures/MiniGames/BedWars';
import BlitzSurvivalGames from '../structures/MiniGames/BlitzSurvivalGames';
import BuildBattle from '../structures/MiniGames/BuildBattle';
import Client from '../Client';
import Color from '../structures/Color';
import CopsAndCrims from '../structures/MiniGames/CopsAndCrims';
import Cosmetics from '../structures/Player/Cosmetics';
import Duels from '../structures/MiniGames/Duels';
import Gifting from '../structures/Player/Gifting';
import Guild from '../structures/Guild/Guild';
import House from '../structures/House';
import Housing from '../structures/Housing';
import MegaWalls from '../structures/MiniGames/MegaWalls';
import MurderMystery from '../structures/MiniGames/MurderMystery';
import Paintball from '../structures/MiniGames/Paintball';
import Parkour from '../structures/Player/Parkour';
import Pit from '../structures/MiniGames/Pit';
import Player from '../structures/Player/Player';
import Quakecraft from '../structures/MiniGames/Quakecraft';
import Quests from '../structures/Player/Quests';
import RecentGame from '../structures/RecentGame';
import Rewards from '../structures/Player/Rewards';
import Seasonal from '../structures/Player/Seasonal';
import SkyWars from '../structures/MiniGames/SkyWars';
import SmashHeroes from '../structures/MiniGames/SmashHeroes';
import SocialMedia from '../structures/Player/SocialMedia';
import SpeedUHC from '../structures/MiniGames/SpeedUHC';
import TNTGames from '../structures/MiniGames/TNTGames';
import Tourney from '../structures/Player/Tourney';
import TurboKartRacers from '../structures/MiniGames/TurboKartRacers';
import UHC from '../structures/MiniGames/UHC';
import VampireZ from '../structures/MiniGames/VampireZ';
import Walls from '../structures/MiniGames/Walls';
import Warlords from '../structures/MiniGames/Warlords';
import WoolGames from '../structures/MiniGames/WoolGames';
import { ChatChannel, Language, PlayerRank, PlayerStats, ScorpiusBribe } from '../structures/Player/Types';
import { LevelProgress } from 'hypixel-api-reborn';
import { defaultRequestData } from '../../vitest.setup';
import { expect, expectTypeOf, test, vi } from 'vitest';

test('getPlayer (never joinned hypixel)', async () => {
  const client = new Client(process.env.HYPIXEL_KEY ?? '', { cache: false, checkForUpdates: false, rateLimit: 'NONE' });
  vi.spyOn(global, 'fetch').mockResolvedValue({
    ...defaultRequestData,
    json: () => Promise.resolve({ success: true })
  } as any);
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-expect-error
  await expect(() => client.getPlayer('14727faefbdc4aff848cd2713eb9939e')).rejects.toThrowError(
    client.errors.PLAYER_HAS_NEVER_LOGGED
  );
  vi.restoreAllMocks();
  client.destroy();
});

test('getPlayer (no input)', () => {
  const client = new Client(process.env.HYPIXEL_KEY ?? '', { cache: false, checkForUpdates: false, rateLimit: 'NONE' });
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-expect-error
  expect(() => client.getPlayer()).rejects.toThrowError(client.errors.NO_NICKNAME_UUID);
  client.destroy();
});

test('getPLayer (raw)', async () => {
  const client = new Client(process.env.HYPIXEL_KEY ?? '', { cache: false, checkForUpdates: false, rateLimit: 'NONE' });
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-expect-error
  const data = await client.getPlayer('4855c53ee4fb4100997600a92fc50984', { raw: true });
  expect(data).toBeDefined();
  expectTypeOf(data).toEqualTypeOf<object>();
  client.destroy();
});

test('getPlayer (guild)', async () => {
  const client = new Client(process.env.HYPIXEL_KEY ?? '', { cache: false, checkForUpdates: false, rateLimit: 'NONE' });
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-expect-error
  const data = await client.getPlayer('28667672039044989b0019b14a2c34d6', { guild: true });

  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(Player);
  expectTypeOf(data).toEqualTypeOf<Player>();
  expect(data.uuid).toBeDefined();
  expectTypeOf(data.uuid).toEqualTypeOf<string>();
  expect(data.nickname).toBeDefined();
  expectTypeOf(data.nickname).toEqualTypeOf<string>();
  expect(data.rank).toBeDefined();
  expectTypeOf(data.rank).toEqualTypeOf<PlayerRank>();
  expect(data.mvpPlusColor).toBeDefined();
  expectTypeOf(data.mvpPlusColor).toEqualTypeOf<Color | null>();
  expect(data.mvpPlusPlusColor).toBeDefined();
  expectTypeOf(data.mvpPlusPlusColor).toEqualTypeOf<Color | null>();
  expect(data.gifting).toBeDefined();
  expectTypeOf(data.gifting).toEqualTypeOf<Gifting>();
  expect(data.socialMedia).toBeDefined();
  expectTypeOf(data.socialMedia).toEqualTypeOf<SocialMedia[]>();
  expect(data.firstLoginTimestamp).toBeDefined();
  expect(data.firstLoginTimestamp).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.firstLoginTimestamp).toEqualTypeOf<number>();
  expect(data.firstLoginAt).toBeDefined();
  expectTypeOf(data.firstLoginAt).toEqualTypeOf<Date>();
  expect(data.lastLoginTimestamp).toBeDefined();
  expectTypeOf(data.lastLoginTimestamp).toEqualTypeOf<number | null>();
  expect(data.lastLoginAt).toBeDefined();
  expectTypeOf(data.lastLoginAt).toEqualTypeOf<Date | null>();
  expect(data.achievements).toBeDefined();
  expectTypeOf(data.achievements).toEqualTypeOf<Achievements>();
  expect(data.language).toBeDefined();
  expectTypeOf(data.language).toEqualTypeOf<Language>();
  expect(data.channel).toBeDefined();
  expectTypeOf(data.channel).toEqualTypeOf<ChatChannel>();
  expect(data.exp).toBeDefined();
  expect(data.exp).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.exp).toEqualTypeOf<number>();
  expect(data.level).toBeDefined();
  expectTypeOf(data.level).toEqualTypeOf<LevelProgress>();
  expect(data.seasonal).toBeDefined();
  expectTypeOf(data.seasonal).toEqualTypeOf<Seasonal>();
  expect(data.karma).toBeDefined();
  expect(data.karma).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.karma).toEqualTypeOf<number>();
  expect(data.freeSkyblockCookie).toBeDefined();
  expectTypeOf(data.freeSkyblockCookie).toEqualTypeOf<number | null>();
  expect(data.tourney).toBeDefined();
  expectTypeOf(data.tourney).toEqualTypeOf<Tourney>();
  expect(data.rewards).toBeDefined();
  expectTypeOf(data.rewards).toEqualTypeOf<Rewards>();
  expect(data.challenges).toBeDefined();
  expectTypeOf(data.challenges).toEqualTypeOf<object>();
  expect(data.parkour).toBeDefined();
  expectTypeOf(data.parkour).toEqualTypeOf<Parkour[]>();
  expect(data.housing).toBeDefined();
  expectTypeOf(data.housing).toEqualTypeOf<Housing>();
  expect(data.cosmetics).toBeDefined();
  expectTypeOf(data.cosmetics).toEqualTypeOf<Cosmetics>();
  expect(data.scorpiusBribes).toBeDefined();
  expectTypeOf(data.scorpiusBribes).toEqualTypeOf<ScorpiusBribe[]>();
  expect(data.quests).toBeDefined();
  expectTypeOf(data.quests).toEqualTypeOf<Quests>();
  expect(data.guild).toBeDefined();
  expect(data.guild).toBeInstanceOf(Guild);
  expectTypeOf(data.guild).toEqualTypeOf<Guild | null>();
  expect(data.houses).toBeDefined();
  expect(data.houses).toBeNull();
  expectTypeOf(data.houses).toEqualTypeOf<House[] | null>();
  expect(data.recentGames).toBeDefined();
  expect(data.recentGames).toBeNull();
  expectTypeOf(data.recentGames).toEqualTypeOf<RecentGame[] | null>();
  expect(data.stats).toBeDefined();
  expectTypeOf(data.stats).toEqualTypeOf<PlayerStats>();
  expect(data.stats.arcade).toBeDefined();
  expect(data.stats.arcade).toBeInstanceOf(Arcade);
  expectTypeOf(data.stats.arcade).toEqualTypeOf<Arcade>();
  expect(data.stats.arena).toBeDefined();
  expect(data.stats.arena).toBeInstanceOf(ArenaBrawl);
  expectTypeOf(data.stats.arena).toEqualTypeOf<ArenaBrawl>();
  expect(data.stats.bedwars).toBeDefined();
  expect(data.stats.bedwars).toBeInstanceOf(BedWars);
  expectTypeOf(data.stats.bedwars).toEqualTypeOf<BedWars>();
  expect(data.stats.blitzsg).toBeDefined();
  expect(data.stats.blitzsg).toBeInstanceOf(BlitzSurvivalGames);
  expectTypeOf(data.stats.blitzsg).toEqualTypeOf<BlitzSurvivalGames>();
  expect(data.stats.buildbattle).toBeDefined();
  expect(data.stats.buildbattle).toBeInstanceOf(BuildBattle);
  expectTypeOf(data.stats.buildbattle).toEqualTypeOf<BuildBattle>();
  expect(data.stats.copsandcrims).toBeDefined();
  expect(data.stats.copsandcrims).toBeInstanceOf(CopsAndCrims);
  expectTypeOf(data.stats.copsandcrims).toEqualTypeOf<CopsAndCrims>();
  expect(data.stats.duels).toBeDefined();
  expect(data.stats.duels).toBeInstanceOf(Duels);
  expectTypeOf(data.stats.duels).toEqualTypeOf<Duels>();
  expect(data.stats.megawalls).toBeDefined();
  expect(data.stats.megawalls).toBeInstanceOf(MegaWalls);
  expectTypeOf(data.stats.megawalls).toEqualTypeOf<MegaWalls>();
  expect(data.stats.murdermystery).toBeDefined();
  expect(data.stats.murdermystery).toBeInstanceOf(MurderMystery);
  expectTypeOf(data.stats.murdermystery).toEqualTypeOf<MurderMystery>();
  expect(data.stats.paintball).toBeDefined();
  expect(data.stats.paintball).toBeInstanceOf(Paintball);
  expectTypeOf(data.stats.paintball).toEqualTypeOf<Paintball>();
  expect(data.stats.pit).toBeDefined();
  expect(data.stats.pit).toBeInstanceOf(Pit);
  expectTypeOf(data.stats.pit).toEqualTypeOf<Pit>();
  expect(data.stats.quakecraft).toBeDefined();
  expect(data.stats.quakecraft).toBeInstanceOf(Quakecraft);
  expectTypeOf(data.stats.quakecraft).toEqualTypeOf<Quakecraft>();
  expect(data.stats.skywars).toBeDefined();
  expect(data.stats.skywars).toBeInstanceOf(SkyWars);
  expectTypeOf(data.stats.skywars).toEqualTypeOf<SkyWars>();
  expect(data.stats.smashheroes).toBeDefined();
  expect(data.stats.smashheroes).toBeInstanceOf(SmashHeroes);
  expectTypeOf(data.stats.smashheroes).toEqualTypeOf<SmashHeroes>();
  expect(data.stats.speeduhc).toBeDefined();
  expect(data.stats.speeduhc).toBeInstanceOf(SpeedUHC);
  expectTypeOf(data.stats.speeduhc).toEqualTypeOf<SpeedUHC>();
  expect(data.stats.tntgames).toBeDefined();
  expect(data.stats.tntgames).toBeInstanceOf(TNTGames);
  expectTypeOf(data.stats.tntgames).toEqualTypeOf<TNTGames>();
  expect(data.stats.turbokartracers).toBeDefined();
  expect(data.stats.turbokartracers).toBeInstanceOf(TurboKartRacers);
  expectTypeOf(data.stats.turbokartracers).toEqualTypeOf<TurboKartRacers>();
  expect(data.stats.uhc).toBeDefined();
  expect(data.stats.uhc).toBeInstanceOf(UHC);
  expectTypeOf(data.stats.uhc).toEqualTypeOf<UHC>();
  expect(data.stats.vampirez).toBeDefined();
  expect(data.stats.vampirez).toBeInstanceOf(VampireZ);
  expectTypeOf(data.stats.vampirez).toEqualTypeOf<VampireZ>();
  expect(data.stats.walls).toBeDefined();
  expect(data.stats.walls).toBeInstanceOf(Walls);
  expectTypeOf(data.stats.walls).toEqualTypeOf<Walls>();
  expect(data.stats.warlords).toBeDefined();
  expect(data.stats.warlords).toBeInstanceOf(Warlords);
  expectTypeOf(data.stats.warlords).toEqualTypeOf<Warlords>();
  expect(data.stats.woolgames).toBeDefined();
  expect(data.stats.woolgames).toBeInstanceOf(WoolGames);
  expectTypeOf(data.stats.woolgames).toEqualTypeOf<WoolGames>();
  client.destroy();
});

test('getPlayer (houses)', async () => {
  const client = new Client(process.env.HYPIXEL_KEY ?? '', { cache: false, checkForUpdates: false, rateLimit: 'NONE' });
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-expect-error
  const data = await client.getPlayer('618a96fec8b0493fa89427891049550b', { houses: true });
  expect(data).toBeDefined();
  expectTypeOf(data).toEqualTypeOf<Player>();
  expect(data.houses).toBeDefined();
  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(Player);
  expectTypeOf(data).toEqualTypeOf<Player>();
  expect(data.uuid).toBeDefined();
  expectTypeOf(data.uuid).toEqualTypeOf<string>();
  expect(data.nickname).toBeDefined();
  expectTypeOf(data.nickname).toEqualTypeOf<string>();
  expect(data.rank).toBeDefined();
  expectTypeOf(data.rank).toEqualTypeOf<PlayerRank>();
  expect(data.mvpPlusColor).toBeDefined();
  expectTypeOf(data.mvpPlusColor).toEqualTypeOf<Color | null>();
  expect(data.mvpPlusPlusColor).toBeDefined();
  expectTypeOf(data.mvpPlusPlusColor).toEqualTypeOf<Color | null>();
  expect(data.gifting).toBeDefined();
  expectTypeOf(data.gifting).toEqualTypeOf<Gifting>();
  expect(data.socialMedia).toBeDefined();
  expectTypeOf(data.socialMedia).toEqualTypeOf<SocialMedia[]>();
  expect(data.firstLoginTimestamp).toBeDefined();
  expect(data.firstLoginTimestamp).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.firstLoginTimestamp).toEqualTypeOf<number>();
  expect(data.firstLoginAt).toBeDefined();
  expectTypeOf(data.firstLoginAt).toEqualTypeOf<Date>();
  expect(data.lastLoginTimestamp).toBeDefined();
  expectTypeOf(data.lastLoginTimestamp).toEqualTypeOf<number | null>();
  expect(data.lastLoginAt).toBeDefined();
  expectTypeOf(data.lastLoginAt).toEqualTypeOf<Date | null>();
  expect(data.achievements).toBeDefined();
  expectTypeOf(data.achievements).toEqualTypeOf<Achievements>();
  expect(data.language).toBeDefined();
  expectTypeOf(data.language).toEqualTypeOf<Language>();
  expect(data.channel).toBeDefined();
  expectTypeOf(data.channel).toEqualTypeOf<ChatChannel>();
  expect(data.exp).toBeDefined();
  expect(data.exp).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.exp).toEqualTypeOf<number>();
  expect(data.level).toBeDefined();
  expectTypeOf(data.level).toEqualTypeOf<LevelProgress>();
  expect(data.seasonal).toBeDefined();
  expectTypeOf(data.seasonal).toEqualTypeOf<Seasonal>();
  expect(data.karma).toBeDefined();
  expect(data.karma).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.karma).toEqualTypeOf<number>();
  expect(data.freeSkyblockCookie).toBeDefined();
  expectTypeOf(data.freeSkyblockCookie).toEqualTypeOf<number | null>();
  expect(data.tourney).toBeDefined();
  expectTypeOf(data.tourney).toEqualTypeOf<Tourney>();
  expect(data.rewards).toBeDefined();
  expectTypeOf(data.rewards).toEqualTypeOf<Rewards>();
  expect(data.challenges).toBeDefined();
  expectTypeOf(data.challenges).toEqualTypeOf<object>();
  expect(data.parkour).toBeDefined();
  expectTypeOf(data.parkour).toEqualTypeOf<Parkour[]>();
  expect(data.housing).toBeDefined();
  expectTypeOf(data.housing).toEqualTypeOf<Housing>();
  expect(data.cosmetics).toBeDefined();
  expectTypeOf(data.cosmetics).toEqualTypeOf<Cosmetics>();
  expect(data.scorpiusBribes).toBeDefined();
  expectTypeOf(data.scorpiusBribes).toEqualTypeOf<ScorpiusBribe[]>();
  expect(data.quests).toBeDefined();
  expectTypeOf(data.quests).toEqualTypeOf<Quests>();
  expect(data.guild).toBeDefined();
  expect(data.guild).toBeNull();
  expectTypeOf(data.guild).toEqualTypeOf<Guild | null>();
  expectTypeOf(data.houses).toEqualTypeOf<House[] | null>();
  data.houses.forEach((house: House) => {
    expect(house).toBeDefined();
    expect(house).toBeInstanceOf(House);
    expectTypeOf(house).toEqualTypeOf<House>();
  });
  expect(data.recentGames).toBeDefined();
  expect(data.recentGames).toBeNull();
  expectTypeOf(data.recentGames).toEqualTypeOf<RecentGame[] | null>();
  expect(data.stats).toBeDefined();
  expectTypeOf(data.stats).toEqualTypeOf<PlayerStats>();
  expect(data.stats.arcade).toBeDefined();
  expect(data.stats.arcade).toBeInstanceOf(Arcade);
  expectTypeOf(data.stats.arcade).toEqualTypeOf<Arcade>();
  expect(data.stats.arena).toBeDefined();
  expect(data.stats.arena).toBeInstanceOf(ArenaBrawl);
  expectTypeOf(data.stats.arena).toEqualTypeOf<ArenaBrawl>();
  expect(data.stats.bedwars).toBeDefined();
  expect(data.stats.bedwars).toBeInstanceOf(BedWars);
  expectTypeOf(data.stats.bedwars).toEqualTypeOf<BedWars>();
  expect(data.stats.blitzsg).toBeDefined();
  expect(data.stats.blitzsg).toBeInstanceOf(BlitzSurvivalGames);
  expectTypeOf(data.stats.blitzsg).toEqualTypeOf<BlitzSurvivalGames>();
  expect(data.stats.buildbattle).toBeDefined();
  expect(data.stats.buildbattle).toBeInstanceOf(BuildBattle);
  expectTypeOf(data.stats.buildbattle).toEqualTypeOf<BuildBattle>();
  expect(data.stats.copsandcrims).toBeDefined();
  expect(data.stats.copsandcrims).toBeInstanceOf(CopsAndCrims);
  expectTypeOf(data.stats.copsandcrims).toEqualTypeOf<CopsAndCrims>();
  expect(data.stats.duels).toBeDefined();
  expect(data.stats.duels).toBeInstanceOf(Duels);
  expectTypeOf(data.stats.duels).toEqualTypeOf<Duels>();
  expect(data.stats.megawalls).toBeDefined();
  expect(data.stats.megawalls).toBeInstanceOf(MegaWalls);
  expectTypeOf(data.stats.megawalls).toEqualTypeOf<MegaWalls>();
  expect(data.stats.murdermystery).toBeDefined();
  expect(data.stats.murdermystery).toBeInstanceOf(MurderMystery);
  expectTypeOf(data.stats.murdermystery).toEqualTypeOf<MurderMystery>();
  expect(data.stats.paintball).toBeDefined();
  expect(data.stats.paintball).toBeInstanceOf(Paintball);
  expectTypeOf(data.stats.paintball).toEqualTypeOf<Paintball>();
  expect(data.stats.pit).toBeDefined();
  expect(data.stats.pit).toBeInstanceOf(Pit);
  expectTypeOf(data.stats.pit).toEqualTypeOf<Pit>();
  expect(data.stats.quakecraft).toBeDefined();
  expect(data.stats.quakecraft).toBeInstanceOf(Quakecraft);
  expectTypeOf(data.stats.quakecraft).toEqualTypeOf<Quakecraft>();
  expect(data.stats.skywars).toBeDefined();
  expect(data.stats.skywars).toBeInstanceOf(SkyWars);
  expectTypeOf(data.stats.skywars).toEqualTypeOf<SkyWars>();
  expect(data.stats.smashheroes).toBeDefined();
  expect(data.stats.smashheroes).toBeInstanceOf(SmashHeroes);
  expectTypeOf(data.stats.smashheroes).toEqualTypeOf<SmashHeroes>();
  expect(data.stats.speeduhc).toBeDefined();
  expect(data.stats.speeduhc).toBeInstanceOf(SpeedUHC);
  expectTypeOf(data.stats.speeduhc).toEqualTypeOf<SpeedUHC>();
  expect(data.stats.tntgames).toBeDefined();
  expect(data.stats.tntgames).toBeInstanceOf(TNTGames);
  expectTypeOf(data.stats.tntgames).toEqualTypeOf<TNTGames>();
  expect(data.stats.turbokartracers).toBeDefined();
  expect(data.stats.turbokartracers).toBeInstanceOf(TurboKartRacers);
  expectTypeOf(data.stats.turbokartracers).toEqualTypeOf<TurboKartRacers>();
  expect(data.stats.uhc).toBeDefined();
  expect(data.stats.uhc).toBeInstanceOf(UHC);
  expectTypeOf(data.stats.uhc).toEqualTypeOf<UHC>();
  expect(data.stats.vampirez).toBeDefined();
  expect(data.stats.vampirez).toBeInstanceOf(VampireZ);
  expectTypeOf(data.stats.vampirez).toEqualTypeOf<VampireZ>();
  expect(data.stats.walls).toBeDefined();
  expect(data.stats.walls).toBeInstanceOf(Walls);
  expectTypeOf(data.stats.walls).toEqualTypeOf<Walls>();
  expect(data.stats.warlords).toBeDefined();
  expect(data.stats.warlords).toBeInstanceOf(Warlords);
  expectTypeOf(data.stats.warlords).toEqualTypeOf<Warlords>();
  expect(data.stats.woolgames).toBeDefined();
  expect(data.stats.woolgames).toBeInstanceOf(WoolGames);
  expectTypeOf(data.stats.woolgames).toEqualTypeOf<WoolGames>();
  client.destroy();
});

test('getPlayer (recent games)', async () => {
  const client = new Client(process.env.HYPIXEL_KEY ?? '', { cache: false, checkForUpdates: false, rateLimit: 'NONE' });
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-expect-error
  const data = await client.getPlayer('37501e7512b845ab8796e2baf9e9677a', { recentGames: true });
  expect(data).toBeDefined();
  expectTypeOf(data).toEqualTypeOf<Player>();

  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(Player);
  expectTypeOf(data).toEqualTypeOf<Player>();
  expect(data.uuid).toBeDefined();
  expectTypeOf(data.uuid).toEqualTypeOf<string>();
  expect(data.nickname).toBeDefined();
  expectTypeOf(data.nickname).toEqualTypeOf<string>();
  expect(data.rank).toBeDefined();
  expectTypeOf(data.rank).toEqualTypeOf<PlayerRank>();
  expect(data.mvpPlusColor).toBeDefined();
  expectTypeOf(data.mvpPlusColor).toEqualTypeOf<Color | null>();
  expect(data.mvpPlusPlusColor).toBeDefined();
  expectTypeOf(data.mvpPlusPlusColor).toEqualTypeOf<Color | null>();
  expect(data.gifting).toBeDefined();
  expectTypeOf(data.gifting).toEqualTypeOf<Gifting>();
  expect(data.socialMedia).toBeDefined();
  expectTypeOf(data.socialMedia).toEqualTypeOf<SocialMedia[]>();
  expect(data.firstLoginTimestamp).toBeDefined();
  expect(data.firstLoginTimestamp).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.firstLoginTimestamp).toEqualTypeOf<number>();
  expect(data.firstLoginAt).toBeDefined();
  expectTypeOf(data.firstLoginAt).toEqualTypeOf<Date>();
  expect(data.lastLoginTimestamp).toBeDefined();
  expectTypeOf(data.lastLoginTimestamp).toEqualTypeOf<number | null>();
  expect(data.lastLoginAt).toBeDefined();
  expectTypeOf(data.lastLoginAt).toEqualTypeOf<Date | null>();
  expect(data.achievements).toBeDefined();
  expectTypeOf(data.achievements).toEqualTypeOf<Achievements>();
  expect(data.language).toBeDefined();
  expectTypeOf(data.language).toEqualTypeOf<Language>();
  expect(data.channel).toBeDefined();
  expectTypeOf(data.channel).toEqualTypeOf<ChatChannel>();
  expect(data.exp).toBeDefined();
  expect(data.exp).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.exp).toEqualTypeOf<number>();
  expect(data.level).toBeDefined();
  expectTypeOf(data.level).toEqualTypeOf<LevelProgress>();
  expect(data.seasonal).toBeDefined();
  expectTypeOf(data.seasonal).toEqualTypeOf<Seasonal>();
  expect(data.karma).toBeDefined();
  expect(data.karma).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.karma).toEqualTypeOf<number>();
  expect(data.freeSkyblockCookie).toBeDefined();
  expectTypeOf(data.freeSkyblockCookie).toEqualTypeOf<number | null>();
  expect(data.tourney).toBeDefined();
  expectTypeOf(data.tourney).toEqualTypeOf<Tourney>();
  expect(data.rewards).toBeDefined();
  expectTypeOf(data.rewards).toEqualTypeOf<Rewards>();
  expect(data.challenges).toBeDefined();
  expectTypeOf(data.challenges).toEqualTypeOf<object>();
  expect(data.parkour).toBeDefined();
  expectTypeOf(data.parkour).toEqualTypeOf<Parkour[]>();
  expect(data.housing).toBeDefined();
  expectTypeOf(data.housing).toEqualTypeOf<Housing>();
  expect(data.cosmetics).toBeDefined();
  expectTypeOf(data.cosmetics).toEqualTypeOf<Cosmetics>();
  expect(data.scorpiusBribes).toBeDefined();
  expectTypeOf(data.scorpiusBribes).toEqualTypeOf<ScorpiusBribe[]>();
  expect(data.quests).toBeDefined();
  expectTypeOf(data.quests).toEqualTypeOf<Quests>();
  expect(data.guild).toBeDefined();
  expect(data.guild).toBeNull();
  expectTypeOf(data.guild).toEqualTypeOf<Guild | null>();
  expect(data.houses).toBeDefined();
  expect(data.houses).toBeNull();
  expectTypeOf(data.houses).toEqualTypeOf<House[] | null>();
  expect(data.recentGames).toBeDefined();
  expectTypeOf(data.recentGames).toEqualTypeOf<RecentGame[] | null>();
  data.recentGames.forEach((game: RecentGame) => {
    expect(game).toBeDefined();
    expect(game).toBeInstanceOf(RecentGame);
    expectTypeOf(game).toEqualTypeOf<RecentGame>();
  });
  expect(data.stats).toBeDefined();
  expectTypeOf(data.stats).toEqualTypeOf<PlayerStats>();
  expect(data.stats.arcade).toBeDefined();
  expect(data.stats.arcade).toBeInstanceOf(Arcade);
  expectTypeOf(data.stats.arcade).toEqualTypeOf<Arcade>();
  expect(data.stats.arena).toBeDefined();
  expect(data.stats.arena).toBeInstanceOf(ArenaBrawl);
  expectTypeOf(data.stats.arena).toEqualTypeOf<ArenaBrawl>();
  expect(data.stats.bedwars).toBeDefined();
  expect(data.stats.bedwars).toBeInstanceOf(BedWars);
  expectTypeOf(data.stats.bedwars).toEqualTypeOf<BedWars>();
  expect(data.stats.blitzsg).toBeDefined();
  expect(data.stats.blitzsg).toBeInstanceOf(BlitzSurvivalGames);
  expectTypeOf(data.stats.blitzsg).toEqualTypeOf<BlitzSurvivalGames>();
  expect(data.stats.buildbattle).toBeDefined();
  expect(data.stats.buildbattle).toBeInstanceOf(BuildBattle);
  expectTypeOf(data.stats.buildbattle).toEqualTypeOf<BuildBattle>();
  expect(data.stats.copsandcrims).toBeDefined();
  expect(data.stats.copsandcrims).toBeInstanceOf(CopsAndCrims);
  expectTypeOf(data.stats.copsandcrims).toEqualTypeOf<CopsAndCrims>();
  expect(data.stats.duels).toBeDefined();
  expect(data.stats.duels).toBeInstanceOf(Duels);
  expectTypeOf(data.stats.duels).toEqualTypeOf<Duels>();
  expect(data.stats.megawalls).toBeDefined();
  expect(data.stats.megawalls).toBeInstanceOf(MegaWalls);
  expectTypeOf(data.stats.megawalls).toEqualTypeOf<MegaWalls>();
  expect(data.stats.murdermystery).toBeDefined();
  expect(data.stats.murdermystery).toBeInstanceOf(MurderMystery);
  expectTypeOf(data.stats.murdermystery).toEqualTypeOf<MurderMystery>();
  expect(data.stats.paintball).toBeDefined();
  expect(data.stats.paintball).toBeInstanceOf(Paintball);
  expectTypeOf(data.stats.paintball).toEqualTypeOf<Paintball>();
  expect(data.stats.pit).toBeDefined();
  expect(data.stats.pit).toBeInstanceOf(Pit);
  expectTypeOf(data.stats.pit).toEqualTypeOf<Pit>();
  expect(data.stats.quakecraft).toBeDefined();
  expect(data.stats.quakecraft).toBeInstanceOf(Quakecraft);
  expectTypeOf(data.stats.quakecraft).toEqualTypeOf<Quakecraft>();
  expect(data.stats.skywars).toBeDefined();
  expect(data.stats.skywars).toBeInstanceOf(SkyWars);
  expectTypeOf(data.stats.skywars).toEqualTypeOf<SkyWars>();
  expect(data.stats.smashheroes).toBeDefined();
  expect(data.stats.smashheroes).toBeInstanceOf(SmashHeroes);
  expectTypeOf(data.stats.smashheroes).toEqualTypeOf<SmashHeroes>();
  expect(data.stats.speeduhc).toBeDefined();
  expect(data.stats.speeduhc).toBeInstanceOf(SpeedUHC);
  expectTypeOf(data.stats.speeduhc).toEqualTypeOf<SpeedUHC>();
  expect(data.stats.tntgames).toBeDefined();
  expect(data.stats.tntgames).toBeInstanceOf(TNTGames);
  expectTypeOf(data.stats.tntgames).toEqualTypeOf<TNTGames>();
  expect(data.stats.turbokartracers).toBeDefined();
  expect(data.stats.turbokartracers).toBeInstanceOf(TurboKartRacers);
  expectTypeOf(data.stats.turbokartracers).toEqualTypeOf<TurboKartRacers>();
  expect(data.stats.uhc).toBeDefined();
  expect(data.stats.uhc).toBeInstanceOf(UHC);
  expectTypeOf(data.stats.uhc).toEqualTypeOf<UHC>();
  expect(data.stats.vampirez).toBeDefined();
  expect(data.stats.vampirez).toBeInstanceOf(VampireZ);
  expectTypeOf(data.stats.vampirez).toEqualTypeOf<VampireZ>();
  expect(data.stats.walls).toBeDefined();
  expect(data.stats.walls).toBeInstanceOf(Walls);
  expectTypeOf(data.stats.walls).toEqualTypeOf<Walls>();
  expect(data.stats.warlords).toBeDefined();
  expect(data.stats.warlords).toBeInstanceOf(Warlords);
  expectTypeOf(data.stats.warlords).toEqualTypeOf<Warlords>();
  expect(data.stats.woolgames).toBeDefined();
  expect(data.stats.woolgames).toBeInstanceOf(WoolGames);
  expectTypeOf(data.stats.woolgames).toEqualTypeOf<WoolGames>();
  client.destroy();
});

test('getPlayer', async () => {
  const client = new Client(process.env.HYPIXEL_KEY ?? '', { cache: false, checkForUpdates: false, rateLimit: 'NONE' });
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-expect-error
  const data = await client.getPlayer('14727faefbdc4aff848cd2713eb9939e');
  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(Player);
  expectTypeOf(data).toEqualTypeOf<Player>();
  expect(data.uuid).toBeDefined();
  expectTypeOf(data.uuid).toEqualTypeOf<string>();
  expect(data.nickname).toBeDefined();
  expectTypeOf(data.nickname).toEqualTypeOf<string>();
  expect(data.rank).toBeDefined();
  expectTypeOf(data.rank).toEqualTypeOf<PlayerRank>();
  expect(data.mvpPlusColor).toBeDefined();
  expectTypeOf(data.mvpPlusColor).toEqualTypeOf<Color | null>();
  expect(data.mvpPlusPlusColor).toBeDefined();
  expectTypeOf(data.mvpPlusPlusColor).toEqualTypeOf<Color | null>();
  expect(data.gifting).toBeDefined();
  expectTypeOf(data.gifting).toEqualTypeOf<Gifting>();
  expect(data.socialMedia).toBeDefined();
  expectTypeOf(data.socialMedia).toEqualTypeOf<SocialMedia[]>();
  expect(data.firstLoginTimestamp).toBeDefined();
  expect(data.firstLoginTimestamp).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.firstLoginTimestamp).toEqualTypeOf<number>();
  expect(data.firstLoginAt).toBeDefined();
  expectTypeOf(data.firstLoginAt).toEqualTypeOf<Date>();
  expect(data.lastLoginTimestamp).toBeDefined();
  expectTypeOf(data.lastLoginTimestamp).toEqualTypeOf<number | null>();
  expect(data.lastLoginAt).toBeDefined();
  expectTypeOf(data.lastLoginAt).toEqualTypeOf<Date | null>();
  expect(data.achievements).toBeDefined();
  expectTypeOf(data.achievements).toEqualTypeOf<Achievements>();
  expect(data.language).toBeDefined();
  expectTypeOf(data.language).toEqualTypeOf<Language>();
  expect(data.channel).toBeDefined();
  expectTypeOf(data.channel).toEqualTypeOf<ChatChannel>();
  expect(data.exp).toBeDefined();
  expect(data.exp).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.exp).toEqualTypeOf<number>();
  expect(data.level).toBeDefined();
  expectTypeOf(data.level).toEqualTypeOf<LevelProgress>();
  expect(data.seasonal).toBeDefined();
  expectTypeOf(data.seasonal).toEqualTypeOf<Seasonal>();
  expect(data.karma).toBeDefined();
  expect(data.karma).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.karma).toEqualTypeOf<number>();
  expect(data.freeSkyblockCookie).toBeDefined();
  expectTypeOf(data.freeSkyblockCookie).toEqualTypeOf<number | null>();
  expect(data.tourney).toBeDefined();
  expectTypeOf(data.tourney).toEqualTypeOf<Tourney>();
  expect(data.rewards).toBeDefined();
  expectTypeOf(data.rewards).toEqualTypeOf<Rewards>();
  expect(data.challenges).toBeDefined();
  expectTypeOf(data.challenges).toEqualTypeOf<object>();
  expect(data.parkour).toBeDefined();
  expectTypeOf(data.parkour).toEqualTypeOf<Parkour[]>();
  expect(data.housing).toBeDefined();
  expectTypeOf(data.housing).toEqualTypeOf<Housing>();
  expect(data.cosmetics).toBeDefined();
  expectTypeOf(data.cosmetics).toEqualTypeOf<Cosmetics>();
  expect(data.scorpiusBribes).toBeDefined();
  expectTypeOf(data.scorpiusBribes).toEqualTypeOf<ScorpiusBribe[]>();
  expect(data.quests).toBeDefined();
  expectTypeOf(data.quests).toEqualTypeOf<Quests>();
  expect(data.guild).toBeDefined();
  expect(data.guild).toBeNull();
  expectTypeOf(data.guild).toEqualTypeOf<Guild | null>();
  expect(data.houses).toBeDefined();
  expect(data.houses).toBeNull();
  expectTypeOf(data.houses).toEqualTypeOf<House[] | null>();
  expect(data.recentGames).toBeDefined();
  expect(data.recentGames).toBeNull();
  expectTypeOf(data.recentGames).toEqualTypeOf<RecentGame[] | null>();
  expect(data.stats).toBeDefined();
  expectTypeOf(data.stats).toEqualTypeOf<PlayerStats>();
  expect(data.stats.arcade).toBeDefined();
  expect(data.stats.arcade).toBeInstanceOf(Arcade);
  expectTypeOf(data.stats.arcade).toEqualTypeOf<Arcade>();
  expect(data.stats.arena).toBeDefined();
  expect(data.stats.arena).toBeInstanceOf(ArenaBrawl);
  expectTypeOf(data.stats.arena).toEqualTypeOf<ArenaBrawl>();
  expect(data.stats.bedwars).toBeDefined();
  expect(data.stats.bedwars).toBeInstanceOf(BedWars);
  expectTypeOf(data.stats.bedwars).toEqualTypeOf<BedWars>();
  expect(data.stats.blitzsg).toBeDefined();
  expect(data.stats.blitzsg).toBeInstanceOf(BlitzSurvivalGames);
  expectTypeOf(data.stats.blitzsg).toEqualTypeOf<BlitzSurvivalGames>();
  expect(data.stats.buildbattle).toBeDefined();
  expect(data.stats.buildbattle).toBeInstanceOf(BuildBattle);
  expectTypeOf(data.stats.buildbattle).toEqualTypeOf<BuildBattle>();
  expect(data.stats.copsandcrims).toBeDefined();
  expect(data.stats.copsandcrims).toBeInstanceOf(CopsAndCrims);
  expectTypeOf(data.stats.copsandcrims).toEqualTypeOf<CopsAndCrims>();
  expect(data.stats.duels).toBeDefined();
  expect(data.stats.duels).toBeInstanceOf(Duels);
  expectTypeOf(data.stats.duels).toEqualTypeOf<Duels>();
  expect(data.stats.megawalls).toBeDefined();
  expect(data.stats.megawalls).toBeInstanceOf(MegaWalls);
  expectTypeOf(data.stats.megawalls).toEqualTypeOf<MegaWalls>();
  expect(data.stats.murdermystery).toBeDefined();
  expect(data.stats.murdermystery).toBeInstanceOf(MurderMystery);
  expectTypeOf(data.stats.murdermystery).toEqualTypeOf<MurderMystery>();
  expect(data.stats.paintball).toBeDefined();
  expect(data.stats.paintball).toBeInstanceOf(Paintball);
  expectTypeOf(data.stats.paintball).toEqualTypeOf<Paintball>();
  expect(data.stats.pit).toBeDefined();
  expect(data.stats.pit).toBeInstanceOf(Pit);
  expectTypeOf(data.stats.pit).toEqualTypeOf<Pit>();
  expect(data.stats.quakecraft).toBeDefined();
  expect(data.stats.quakecraft).toBeInstanceOf(Quakecraft);
  expectTypeOf(data.stats.quakecraft).toEqualTypeOf<Quakecraft>();
  expect(data.stats.skywars).toBeDefined();
  expect(data.stats.skywars).toBeInstanceOf(SkyWars);
  expectTypeOf(data.stats.skywars).toEqualTypeOf<SkyWars>();
  expect(data.stats.smashheroes).toBeDefined();
  expect(data.stats.smashheroes).toBeInstanceOf(SmashHeroes);
  expectTypeOf(data.stats.smashheroes).toEqualTypeOf<SmashHeroes>();
  expect(data.stats.speeduhc).toBeDefined();
  expect(data.stats.speeduhc).toBeInstanceOf(SpeedUHC);
  expectTypeOf(data.stats.speeduhc).toEqualTypeOf<SpeedUHC>();
  expect(data.stats.tntgames).toBeDefined();
  expect(data.stats.tntgames).toBeInstanceOf(TNTGames);
  expectTypeOf(data.stats.tntgames).toEqualTypeOf<TNTGames>();
  expect(data.stats.turbokartracers).toBeDefined();
  expect(data.stats.turbokartracers).toBeInstanceOf(TurboKartRacers);
  expectTypeOf(data.stats.turbokartracers).toEqualTypeOf<TurboKartRacers>();
  expect(data.stats.uhc).toBeDefined();
  expect(data.stats.uhc).toBeInstanceOf(UHC);
  expectTypeOf(data.stats.uhc).toEqualTypeOf<UHC>();
  expect(data.stats.vampirez).toBeDefined();
  expect(data.stats.vampirez).toBeInstanceOf(VampireZ);
  expectTypeOf(data.stats.vampirez).toEqualTypeOf<VampireZ>();
  expect(data.stats.walls).toBeDefined();
  expect(data.stats.walls).toBeInstanceOf(Walls);
  expectTypeOf(data.stats.walls).toEqualTypeOf<Walls>();
  expect(data.stats.warlords).toBeDefined();
  expect(data.stats.warlords).toBeInstanceOf(Warlords);
  expectTypeOf(data.stats.warlords).toEqualTypeOf<Warlords>();
  expect(data.stats.woolgames).toBeDefined();
  expect(data.stats.woolgames).toBeInstanceOf(WoolGames);
  expectTypeOf(data.stats.woolgames).toEqualTypeOf<WoolGames>();
  client.destroy();
});
