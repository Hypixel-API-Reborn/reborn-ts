import Dropper from './Dropper.js';
import DropperMap from './DropperMap.js';
import { expect, expectTypeOf, test } from 'vitest';

test('Dropper', () => {
  const data = new Dropper({ stats: 'meow' });
  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(Dropper);
  expectTypeOf(data).toEqualTypeOf<Dropper>();
  expect(data.wins).toBeDefined();
  expect(data.wins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.wins).toEqualTypeOf<number>();
  expect(data.fails).toBeDefined();
  expect(data.fails).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.fails).toEqualTypeOf<number>();
  expect(data.fastestGame).toBeDefined();
  expect(data.fastestGame).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.fastestGame).toEqualTypeOf<number>();
  expect(data.flawlessGames).toBeDefined();
  expect(data.flawlessGames).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.flawlessGames).toEqualTypeOf<number>();
  expect(data.gamesPlayed).toBeDefined();
  expect(data.gamesPlayed).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.gamesPlayed).toEqualTypeOf<number>();
  expect(data.mapsCompleted).toBeDefined();
  expect(data.mapsCompleted).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.mapsCompleted).toEqualTypeOf<number>();
  expect(data.gamesFinished).toBeDefined();
  expect(data.gamesFinished).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.gamesFinished).toEqualTypeOf<number>();
  expect(data.maps).toBeDefined();
  expectTypeOf(data.maps).toEqualTypeOf<Record<string, DropperMap>>();
});
