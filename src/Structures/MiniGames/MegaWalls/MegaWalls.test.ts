import MegaWalls from './MegaWalls.js';
import MegaWallsKitStats from './MegaWallsKitStats.js';
import MegaWallsModeStats from './MegaWallsModeStats.js';
import { expect, expectTypeOf, test } from 'vitest';
import type { MegaWallsKits } from '../../../Types/Player.js';

test('MegaWalls', () => {
  const data = new MegaWalls({ stats: 'meow' });
  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(MegaWalls);
  expectTypeOf(data).toMatchTypeOf<MegaWalls>();
  expect(data.selectedClass).toBeDefined();
  expectTypeOf(data.selectedClass).toEqualTypeOf<MegaWallsKits | 'None'>();
  expect(data.coins).toBeDefined();
  expect(data.coins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.coins).toEqualTypeOf<number>();
  expect(data.kills).toBeDefined();
  expect(data.kills).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.kills).toEqualTypeOf<number>();
  expect(data.assists).toBeDefined();
  expect(data.assists).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.assists).toEqualTypeOf<number>();
  expect(data.deaths).toBeDefined();
  expect(data.deaths).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.deaths).toEqualTypeOf<number>();
  expect(data.KDR).toBeDefined();
  expect(data.KDR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.KDR).toEqualTypeOf<number>();
  expect(data.wins).toBeDefined();
  expect(data.wins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.wins).toEqualTypeOf<number>();
  expect(data.losses).toBeDefined();
  expect(data.losses).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.losses).toEqualTypeOf<number>();
  expect(data.WLR).toBeDefined();
  expect(data.WLR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.WLR).toEqualTypeOf<number>();
  expect(data.finalKills).toBeDefined();
  expect(data.finalKills).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.finalKills).toEqualTypeOf<number>();
  expect(data.finalAssists).toBeDefined();
  expect(data.finalAssists).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.finalAssists).toEqualTypeOf<number>();
  expect(data.finalDeaths).toBeDefined();
  expect(data.finalDeaths).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.finalDeaths).toEqualTypeOf<number>();
  expect(data.FKDR).toBeDefined();
  expect(data.FKDR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.FKDR).toEqualTypeOf<number>();
  expect(data.playedGames).toBeDefined();
  expect(data.playedGames).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.playedGames).toEqualTypeOf<number>();
  expect(data.witherDamage).toBeDefined();
  expect(data.witherDamage).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.witherDamage).toEqualTypeOf<number>();
  expect(data.defenderKills).toBeDefined();
  expect(data.defenderKills).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.defenderKills).toEqualTypeOf<number>();
  expect(data.walked).toBeDefined();
  expect(data.walked).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.walked).toEqualTypeOf<number>();
  expect(data.blocksPlaced).toBeDefined();
  expect(data.blocksPlaced).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.blocksPlaced).toEqualTypeOf<number>();
  expect(data.blocksBroken).toBeDefined();
  expect(data.blocksBroken).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.blocksBroken).toEqualTypeOf<number>();
  expect(data.meleeKills).toBeDefined();
  expect(data.meleeKills).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.meleeKills).toEqualTypeOf<number>();
  expect(data.damageDealt).toBeDefined();
  expect(data.damageDealt).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.damageDealt).toEqualTypeOf<number>();
  expect(data.faceOff).toBeDefined();
  expectTypeOf(data.faceOff).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.casualBrawl).toBeDefined();
  expectTypeOf(data.casualBrawl).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.cow).toBeDefined();
  expectTypeOf(data.cow).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.hunter).toBeDefined();
  expectTypeOf(data.hunter).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.shark).toBeDefined();
  expectTypeOf(data.shark).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.arcanist).toBeDefined();
  expectTypeOf(data.arcanist).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.deadlord).toBeDefined();
  expectTypeOf(data.deadlord).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.golem).toBeDefined();
  expectTypeOf(data.golem).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.herobrine).toBeDefined();
  expectTypeOf(data.herobrine).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.pigman).toBeDefined();
  expectTypeOf(data.pigman).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.zombie).toBeDefined();
  expectTypeOf(data.zombie).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.blaze).toBeDefined();
  expectTypeOf(data.blaze).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.enderman).toBeDefined();
  expectTypeOf(data.enderman).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.shaman).toBeDefined();
  expectTypeOf(data.shaman).toEqualTypeOf<MegaWallsKitStats>();
  expectTypeOf(data.squid).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.creeper).toBeDefined();
  expectTypeOf(data.creeper).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.pirate).toBeDefined();
  expectTypeOf(data.pirate).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.sheep).toBeDefined();
  expectTypeOf(data.sheep).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.skeleton).toBeDefined();
  expectTypeOf(data.skeleton).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.spider).toBeDefined();
  expectTypeOf(data.spider).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.werewolf).toBeDefined();
  expectTypeOf(data.werewolf).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.angel).toBeDefined();
  expectTypeOf(data.angel).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.assassin).toBeDefined();
  expectTypeOf(data.assassin).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.automaton).toBeDefined();
  expectTypeOf(data.automaton).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.moleman).toBeDefined();
  expectTypeOf(data.moleman).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.phoenix).toBeDefined();
  expectTypeOf(data.phoenix).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.renegade).toBeDefined();
  expectTypeOf(data.renegade).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.snowman).toBeDefined();
  expectTypeOf(data.snowman).toEqualTypeOf<MegaWallsKitStats>();
});
