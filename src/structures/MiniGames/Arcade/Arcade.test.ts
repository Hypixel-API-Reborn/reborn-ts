import Arcade from './Arcade.js';
import BlockingDead from './BlockingDead.js';
import BountyHunters from './BountyHunters.js';
import DragonWars from './DragonWars.js';
import Dropper from './Dropper.js';
import EnderSpleef from './EnderSpleef.js';
import FarmHunt from './FarmHunt.js';
import Football from './Football.js';
import GalaxyWars from './GalaxyWars.js';
import HideAndSeek from './HideAndSeek.js';
import HoleInTheWall from './HoleInTheWall.js';
import HypixelSays from './HypixelSays.js';
import MiniWalls from './MiniWalls.js';
import PartyGames from './PartyGames.js';
import PixelParty from './PixelParty.js';
import ThrowOut from './ThrowOut.js';
import Zombies from './Zombies.js';
import { expect, expectTypeOf, test } from 'vitest';

test('Arcade', () => {
  const data = new Arcade({ stats: 'meow' });
  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(Arcade);
  expectTypeOf(data).toEqualTypeOf<Arcade>();
  expect(data.coins).toBeDefined();
  expect(data.coins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.coins).toEqualTypeOf<number>();
  expect(data.weeklyCoins).toBeDefined();
  expect(data.weeklyCoins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.weeklyCoins).toEqualTypeOf<number>();
  expect(data.monthlyCoins).toBeDefined();
  expect(data.monthlyCoins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.monthlyCoins).toEqualTypeOf<number>();
  expect(data.hintsDisabled).toBeDefined();
  expectTypeOf(data.hintsDisabled).toEqualTypeOf<boolean>();
  expect(data.flashDisabled).toBeDefined();
  expectTypeOf(data.flashDisabled).toEqualTypeOf<boolean>();
  expect(data.blockingDead).toBeDefined();
  expectTypeOf(data.blockingDead).toEqualTypeOf<BlockingDead>();
  expect(data.bountyHunters).toBeDefined();
  expectTypeOf(data.bountyHunters).toEqualTypeOf<BountyHunters>();
  expect(data.dragonWars).toBeDefined();
  expectTypeOf(data.dragonWars).toEqualTypeOf<DragonWars>();
  expect(data.dropper).toBeDefined();
  expectTypeOf(data.dropper).toEqualTypeOf<Dropper>();
  expect(data.enderSpleef).toBeDefined();
  expectTypeOf(data.enderSpleef).toEqualTypeOf<EnderSpleef>();
  expect(data.farmHunt).toBeDefined();
  expectTypeOf(data.farmHunt).toEqualTypeOf<FarmHunt>();
  expect(data.football).toBeDefined();
  expectTypeOf(data.football).toEqualTypeOf<Football>();
  expect(data.galaxyWars).toBeDefined();
  expectTypeOf(data.galaxyWars).toEqualTypeOf<GalaxyWars>();
  expect(data.hideAndSeek).toBeDefined();
  expectTypeOf(data.hideAndSeek).toEqualTypeOf<HideAndSeek>();
  expect(data.holeInTheWall).toBeDefined();
  expectTypeOf(data.holeInTheWall).toEqualTypeOf<HoleInTheWall>();
  expect(data.hypixelSays).toBeDefined();
  expectTypeOf(data.hypixelSays).toEqualTypeOf<HypixelSays>();
  expect(data.miniWalls).toBeDefined();
  expectTypeOf(data.miniWalls).toEqualTypeOf<MiniWalls>();
  expect(data.partyGames).toBeDefined();
  expectTypeOf(data.partyGames).toEqualTypeOf<PartyGames>();
  expect(data.pixelParty).toBeDefined();
  expectTypeOf(data.pixelParty).toEqualTypeOf<PixelParty>();
  expect(data.throwOut).toBeDefined();
  expectTypeOf(data.throwOut).toEqualTypeOf<ThrowOut>();
  expect(data.zombies).toBeDefined();
  expectTypeOf(data.zombies).toEqualTypeOf<Zombies>();
});
