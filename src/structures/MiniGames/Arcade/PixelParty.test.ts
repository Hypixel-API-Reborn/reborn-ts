import PixelParty from './PixelParty.js';
import PixelPartyGameMode from './PixelPartyGameMode.js';
import { expect, expectTypeOf, test } from 'vitest';

test('PixelParty', () => {
  const data = new PixelParty({ stats: 'meow' });
  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(PixelParty);
  expectTypeOf(data).toEqualTypeOf<PixelParty>();
  expect(data.wins).toBeDefined();
  expect(data.wins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.wins).toEqualTypeOf<number>();
  expect(data.gamesPlayed).toBeDefined();
  expect(data.gamesPlayed).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.gamesPlayed).toEqualTypeOf<number>();
  expect(data.losses).toBeDefined();
  expect(data.losses).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.losses).toEqualTypeOf<number>();
  expect(data.WLR).toBeDefined();
  expect(data.WLR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.WLR).toEqualTypeOf<number>();
  expect(data.roundsPlayed).toBeDefined();
  expect(data.roundsPlayed).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.roundsPlayed).toEqualTypeOf<number>();
  expect(data.powerUpsCollected).toBeDefined();
  expect(data.powerUpsCollected).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.powerUpsCollected).toEqualTypeOf<number>();
  expect(data.normal).toBeDefined();
  expectTypeOf(data.normal).toEqualTypeOf<PixelPartyGameMode>();
  expect(data.hyper).toBeDefined();
  expectTypeOf(data.hyper).toEqualTypeOf<PixelPartyGameMode>();
  expect(data.highestRound).toBeDefined();
  expect(data.highestRound).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.highestRound).toEqualTypeOf<number>();
  expect(data.musicVolume).toBeDefined();
  expect(data.musicVolume).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.musicVolume).toEqualTypeOf<number>();
  expect(data.colorBlind).toBeDefined();
  expectTypeOf(data.colorBlind).toEqualTypeOf<object>();
});
