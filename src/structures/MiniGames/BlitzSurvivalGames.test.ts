import BlitzSurvivalGames, { BlitzSGKit } from './BlitzSurvivalGames';
import { expect, expectTypeOf, test } from 'vitest';

test('BlitzSurvivalGames', () => {
  const data = new BlitzSurvivalGames({ stats: 'meow' });
  expect(data).toBeInstanceOf(BlitzSurvivalGames);
  expectTypeOf(data).toEqualTypeOf<BlitzSurvivalGames>();
  expect(data.coins).toBeDefined();
  expectTypeOf(data.coins).toEqualTypeOf<number>();
  expect(data.kills).toBeDefined();
  expectTypeOf(data.kills).toEqualTypeOf<number>();
  expect(data.kit).toBeDefined();
  expectTypeOf(data.kit).toEqualTypeOf<string>();
  expect(data.killsSolo).toBeDefined();
  expectTypeOf(data.killsSolo).toEqualTypeOf<number>();
  expect(data.killsTeams).toBeDefined();
  expectTypeOf(data.killsTeams).toEqualTypeOf<number>();
  expect(data.deaths).toBeDefined();
  expectTypeOf(data.deaths).toEqualTypeOf<number>();
  expect(data.KDR).toBeDefined();
  expectTypeOf(data.KDR).toEqualTypeOf<number>();
  expect(data.wins).toBeDefined();
  expectTypeOf(data.wins).toEqualTypeOf<number>();
  expect(data.winsSolo).toBeDefined();
  expectTypeOf(data.winsSolo).toEqualTypeOf<number>();
  expect(data.winsTeam).toBeDefined();
  expectTypeOf(data.winsTeam).toEqualTypeOf<number>();
  expect(data.gamesPlayed).toBeDefined();
  expectTypeOf(data.gamesPlayed).toEqualTypeOf<number>();
  expect(data.losses).toBeDefined();
  expectTypeOf(data.losses).toEqualTypeOf<number>();
  expect(data.WLR).toBeDefined();
  expectTypeOf(data.WLR).toEqualTypeOf<number>();
  expect(data.arrowsShot).toBeDefined();
  expectTypeOf(data.arrowsShot).toEqualTypeOf<number>();
  expect(data.arrowsHit).toBeDefined();
  expectTypeOf(data.arrowsHit).toEqualTypeOf<number>();
  expect(data.bowAccuracy).toBeDefined();
  expectTypeOf(data.bowAccuracy).toEqualTypeOf<number>();
  expect(data.damage).toBeDefined();
  expectTypeOf(data.damage).toEqualTypeOf<number>();
  expect(data.damageTaken).toBeDefined();
  expectTypeOf(data.damageTaken).toEqualTypeOf<number>();
  expect(data.potionsDrunk).toBeDefined();
  expectTypeOf(data.potionsDrunk).toEqualTypeOf<number>();
  expect(data.potionsThrown).toBeDefined();
  expectTypeOf(data.potionsThrown).toEqualTypeOf<number>();
  expect(data.mobsSpawned).toBeDefined();
  expectTypeOf(data.mobsSpawned).toEqualTypeOf<number>();
  expect(data.playTime).toBeDefined();
  expectTypeOf(data.playTime).toEqualTypeOf<number>();
  expect(data.blitzUses).toBeDefined();
  expectTypeOf(data.blitzUses).toEqualTypeOf<number>();
  expect(data.chestsOpened).toBeDefined();
  expectTypeOf(data.chestsOpened).toEqualTypeOf<number>();
  expect(data.archer).toBeDefined();
  expectTypeOf(data.archer).toEqualTypeOf<BlitzSGKit>();
  expect(data.archer.level).toBeDefined();
  expect(data.archer.level).greaterThanOrEqual(0);
  expectTypeOf(data.archer.level).toEqualTypeOf<number>();
  expect(data.archer.exp).toBeDefined();
  expect(data.archer.exp).greaterThanOrEqual(0);
  expectTypeOf(data.archer.exp).toEqualTypeOf<number>();
  expect(data.archer.kills).toBeDefined();
  expect(data.archer.kills).greaterThanOrEqual(0);
  expectTypeOf(data.archer.kills).toEqualTypeOf<number>();
  expect(data.archer.deaths).toBeDefined();
  expect(data.archer.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.archer.deaths).toEqualTypeOf<number>();
  expect(data.archer.KDR).toBeDefined();
  expect(data.archer.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.archer.KDR).toEqualTypeOf<number>();
  expect(data.archer.wins).toBeDefined();
  expect(data.archer.wins).greaterThanOrEqual(0);
  expectTypeOf(data.archer.wins).toEqualTypeOf<number>();
  expect(data.archer.gamesPlayed).toBeDefined();
  expect(data.archer.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.archer.gamesPlayed).toEqualTypeOf<number>();
  expect(data.archer.losses).toBeDefined();
  expect(data.archer.losses).greaterThanOrEqual(0);
  expectTypeOf(data.archer.losses).toEqualTypeOf<number>();
  expect(data.archer.WLR).toBeDefined();
  expect(data.archer.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.archer.WLR).toEqualTypeOf<number>();
  expect(data.archer.arrowsShot).toBeDefined();
  expect(data.archer.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.archer.arrowsShot).toEqualTypeOf<number>();
  expect(data.archer.arrowsHit).toBeDefined();
  expect(data.archer.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.archer.arrowsHit).toEqualTypeOf<number>();
  expect(data.archer.bowAccuracy).toBeDefined();
  expect(data.archer.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.archer.bowAccuracy).toEqualTypeOf<number>();
  expect(data.archer.damage).toBeDefined();
  expect(data.archer.damage).greaterThanOrEqual(0);
  expectTypeOf(data.archer.damage).toEqualTypeOf<number>();
  expect(data.archer.damageTaken).toBeDefined();
  expect(data.archer.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.archer.damageTaken).toEqualTypeOf<number>();
  expect(data.archer.potionsDrunk).toBeDefined();
  expect(data.archer.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.archer.potionsDrunk).toEqualTypeOf<number>();
  expect(data.archer.potionsThrown).toBeDefined();
  expect(data.archer.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.archer.potionsThrown).toEqualTypeOf<number>();
  expect(data.archer.playTime).toBeDefined();
  expect(data.archer.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.archer.playTime).toEqualTypeOf<number>();
  expect(data.archer.mobsSpawned).toBeDefined();
  expect(data.archer.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.archer.mobsSpawned).toEqualTypeOf<number>();
  expect(data.archer.chestsOpened).toBeDefined();
  expect(data.archer.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.archer.chestsOpened).toEqualTypeOf<number>();
  expect(data.meatmaster).toBeDefined();
  expectTypeOf(data.meatmaster).toEqualTypeOf<BlitzSGKit>();
  expect(data.meatmaster.level).toBeDefined();
  expect(data.meatmaster.level).greaterThanOrEqual(0);
  expectTypeOf(data.meatmaster.level).toEqualTypeOf<number>();
  expect(data.meatmaster.exp).toBeDefined();
  expect(data.meatmaster.exp).greaterThanOrEqual(0);
  expectTypeOf(data.meatmaster.exp).toEqualTypeOf<number>();
  expect(data.meatmaster.kills).toBeDefined();
  expect(data.meatmaster.kills).greaterThanOrEqual(0);
  expectTypeOf(data.meatmaster.kills).toEqualTypeOf<number>();
  expect(data.meatmaster.deaths).toBeDefined();
  expect(data.meatmaster.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.meatmaster.deaths).toEqualTypeOf<number>();
  expect(data.meatmaster.KDR).toBeDefined();
  expect(data.meatmaster.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.meatmaster.KDR).toEqualTypeOf<number>();
  expect(data.meatmaster.wins).toBeDefined();
  expect(data.meatmaster.wins).greaterThanOrEqual(0);
  expectTypeOf(data.meatmaster.wins).toEqualTypeOf<number>();
  expect(data.meatmaster.gamesPlayed).toBeDefined();
  expect(data.meatmaster.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.meatmaster.gamesPlayed).toEqualTypeOf<number>();
  expect(data.meatmaster.losses).toBeDefined();
  expect(data.meatmaster.losses).greaterThanOrEqual(0);
  expectTypeOf(data.meatmaster.losses).toEqualTypeOf<number>();
  expect(data.meatmaster.WLR).toBeDefined();
  expect(data.meatmaster.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.meatmaster.WLR).toEqualTypeOf<number>();
  expect(data.meatmaster.arrowsShot).toBeDefined();
  expect(data.meatmaster.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.meatmaster.arrowsShot).toEqualTypeOf<number>();
  expect(data.meatmaster.arrowsHit).toBeDefined();
  expect(data.meatmaster.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.meatmaster.arrowsHit).toEqualTypeOf<number>();
  expect(data.meatmaster.bowAccuracy).toBeDefined();
  expect(data.meatmaster.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.meatmaster.bowAccuracy).toEqualTypeOf<number>();
  expect(data.meatmaster.damage).toBeDefined();
  expect(data.meatmaster.damage).greaterThanOrEqual(0);
  expectTypeOf(data.meatmaster.damage).toEqualTypeOf<number>();
  expect(data.meatmaster.damageTaken).toBeDefined();
  expect(data.meatmaster.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.meatmaster.damageTaken).toEqualTypeOf<number>();
  expect(data.meatmaster.potionsDrunk).toBeDefined();
  expect(data.meatmaster.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.meatmaster.potionsDrunk).toEqualTypeOf<number>();
  expect(data.meatmaster.potionsThrown).toBeDefined();
  expect(data.meatmaster.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.meatmaster.potionsThrown).toEqualTypeOf<number>();
  expect(data.meatmaster.playTime).toBeDefined();
  expect(data.meatmaster.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.meatmaster.playTime).toEqualTypeOf<number>();
  expect(data.meatmaster.mobsSpawned).toBeDefined();
  expect(data.meatmaster.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.meatmaster.mobsSpawned).toEqualTypeOf<number>();
  expect(data.meatmaster.chestsOpened).toBeDefined();
  expect(data.meatmaster.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.meatmaster.chestsOpened).toEqualTypeOf<number>();
  expect(data.speleologist).toBeDefined();
  expectTypeOf(data.speleologist).toEqualTypeOf<BlitzSGKit>();
  expect(data.speleologist.level).toBeDefined();
  expect(data.speleologist.level).greaterThanOrEqual(0);
  expectTypeOf(data.speleologist.level).toEqualTypeOf<number>();
  expect(data.speleologist.exp).toBeDefined();
  expect(data.speleologist.exp).greaterThanOrEqual(0);
  expectTypeOf(data.speleologist.exp).toEqualTypeOf<number>();
  expect(data.speleologist.kills).toBeDefined();
  expect(data.speleologist.kills).greaterThanOrEqual(0);
  expectTypeOf(data.speleologist.kills).toEqualTypeOf<number>();
  expect(data.speleologist.deaths).toBeDefined();
  expect(data.speleologist.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.speleologist.deaths).toEqualTypeOf<number>();
  expect(data.speleologist.KDR).toBeDefined();
  expect(data.speleologist.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.speleologist.KDR).toEqualTypeOf<number>();
  expect(data.speleologist.wins).toBeDefined();
  expect(data.speleologist.wins).greaterThanOrEqual(0);
  expectTypeOf(data.speleologist.wins).toEqualTypeOf<number>();
  expect(data.speleologist.gamesPlayed).toBeDefined();
  expect(data.speleologist.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.speleologist.gamesPlayed).toEqualTypeOf<number>();
  expect(data.speleologist.losses).toBeDefined();
  expect(data.speleologist.losses).greaterThanOrEqual(0);
  expectTypeOf(data.speleologist.losses).toEqualTypeOf<number>();
  expect(data.speleologist.WLR).toBeDefined();
  expect(data.speleologist.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.speleologist.WLR).toEqualTypeOf<number>();
  expect(data.speleologist.arrowsShot).toBeDefined();
  expect(data.speleologist.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.speleologist.arrowsShot).toEqualTypeOf<number>();
  expect(data.speleologist.arrowsHit).toBeDefined();
  expect(data.speleologist.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.speleologist.arrowsHit).toEqualTypeOf<number>();
  expect(data.speleologist.bowAccuracy).toBeDefined();
  expect(data.speleologist.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.speleologist.bowAccuracy).toEqualTypeOf<number>();
  expect(data.speleologist.damage).toBeDefined();
  expect(data.speleologist.damage).greaterThanOrEqual(0);
  expectTypeOf(data.speleologist.damage).toEqualTypeOf<number>();
  expect(data.speleologist.damageTaken).toBeDefined();
  expect(data.speleologist.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.speleologist.damageTaken).toEqualTypeOf<number>();
  expect(data.speleologist.potionsDrunk).toBeDefined();
  expect(data.speleologist.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.speleologist.potionsDrunk).toEqualTypeOf<number>();
  expect(data.speleologist.potionsThrown).toBeDefined();
  expect(data.speleologist.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.speleologist.potionsThrown).toEqualTypeOf<number>();
  expect(data.speleologist.playTime).toBeDefined();
  expect(data.speleologist.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.speleologist.playTime).toEqualTypeOf<number>();
  expect(data.speleologist.mobsSpawned).toBeDefined();
  expect(data.speleologist.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.speleologist.mobsSpawned).toEqualTypeOf<number>();
  expect(data.speleologist.chestsOpened).toBeDefined();
  expect(data.speleologist.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.speleologist.chestsOpened).toEqualTypeOf<number>();
  expect(data.baker).toBeDefined();
  expectTypeOf(data.baker).toEqualTypeOf<BlitzSGKit>();
  expect(data.baker.level).toBeDefined();
  expect(data.baker.level).greaterThanOrEqual(0);
  expectTypeOf(data.baker.level).toEqualTypeOf<number>();
  expect(data.baker.exp).toBeDefined();
  expect(data.baker.exp).greaterThanOrEqual(0);
  expectTypeOf(data.baker.exp).toEqualTypeOf<number>();
  expect(data.baker.kills).toBeDefined();
  expect(data.baker.kills).greaterThanOrEqual(0);
  expectTypeOf(data.baker.kills).toEqualTypeOf<number>();
  expect(data.baker.deaths).toBeDefined();
  expect(data.baker.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.baker.deaths).toEqualTypeOf<number>();
  expect(data.baker.KDR).toBeDefined();
  expect(data.baker.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.baker.KDR).toEqualTypeOf<number>();
  expect(data.baker.wins).toBeDefined();
  expect(data.baker.wins).greaterThanOrEqual(0);
  expectTypeOf(data.baker.wins).toEqualTypeOf<number>();
  expect(data.baker.gamesPlayed).toBeDefined();
  expect(data.baker.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.baker.gamesPlayed).toEqualTypeOf<number>();
  expect(data.baker.losses).toBeDefined();
  expect(data.baker.losses).greaterThanOrEqual(0);
  expectTypeOf(data.baker.losses).toEqualTypeOf<number>();
  expect(data.baker.WLR).toBeDefined();
  expect(data.baker.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.baker.WLR).toEqualTypeOf<number>();
  expect(data.baker.arrowsShot).toBeDefined();
  expect(data.baker.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.baker.arrowsShot).toEqualTypeOf<number>();
  expect(data.baker.arrowsHit).toBeDefined();
  expect(data.baker.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.baker.arrowsHit).toEqualTypeOf<number>();
  expect(data.baker.bowAccuracy).toBeDefined();
  expect(data.baker.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.baker.bowAccuracy).toEqualTypeOf<number>();
  expect(data.baker.damage).toBeDefined();
  expect(data.baker.damage).greaterThanOrEqual(0);
  expectTypeOf(data.baker.damage).toEqualTypeOf<number>();
  expect(data.baker.damageTaken).toBeDefined();
  expect(data.baker.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.baker.damageTaken).toEqualTypeOf<number>();
  expect(data.baker.potionsDrunk).toBeDefined();
  expect(data.baker.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.baker.potionsDrunk).toEqualTypeOf<number>();
  expect(data.baker.potionsThrown).toBeDefined();
  expect(data.baker.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.baker.potionsThrown).toEqualTypeOf<number>();
  expect(data.baker.playTime).toBeDefined();
  expect(data.baker.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.baker.playTime).toEqualTypeOf<number>();
  expect(data.baker.mobsSpawned).toBeDefined();
  expect(data.baker.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.baker.mobsSpawned).toEqualTypeOf<number>();
  expect(data.baker.chestsOpened).toBeDefined();
  expect(data.baker.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.baker.chestsOpened).toEqualTypeOf<number>();
  expect(data.knight).toBeDefined();
  expectTypeOf(data.knight).toEqualTypeOf<BlitzSGKit>();
  expect(data.knight.level).toBeDefined();
  expect(data.knight.level).greaterThanOrEqual(0);
  expectTypeOf(data.knight.level).toEqualTypeOf<number>();
  expect(data.knight.exp).toBeDefined();
  expect(data.knight.exp).greaterThanOrEqual(0);
  expectTypeOf(data.knight.exp).toEqualTypeOf<number>();
  expect(data.knight.kills).toBeDefined();
  expect(data.knight.kills).greaterThanOrEqual(0);
  expectTypeOf(data.knight.kills).toEqualTypeOf<number>();
  expect(data.knight.deaths).toBeDefined();
  expect(data.knight.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.knight.deaths).toEqualTypeOf<number>();
  expect(data.knight.KDR).toBeDefined();
  expect(data.knight.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.knight.KDR).toEqualTypeOf<number>();
  expect(data.knight.wins).toBeDefined();
  expect(data.knight.wins).greaterThanOrEqual(0);
  expectTypeOf(data.knight.wins).toEqualTypeOf<number>();
  expect(data.knight.gamesPlayed).toBeDefined();
  expect(data.knight.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.knight.gamesPlayed).toEqualTypeOf<number>();
  expect(data.knight.losses).toBeDefined();
  expect(data.knight.losses).greaterThanOrEqual(0);
  expectTypeOf(data.knight.losses).toEqualTypeOf<number>();
  expect(data.knight.WLR).toBeDefined();
  expect(data.knight.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.knight.WLR).toEqualTypeOf<number>();
  expect(data.knight.arrowsShot).toBeDefined();
  expect(data.knight.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.knight.arrowsShot).toEqualTypeOf<number>();
  expect(data.knight.arrowsHit).toBeDefined();
  expect(data.knight.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.knight.arrowsHit).toEqualTypeOf<number>();
  expect(data.knight.bowAccuracy).toBeDefined();
  expect(data.knight.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.knight.bowAccuracy).toEqualTypeOf<number>();
  expect(data.knight.damage).toBeDefined();
  expect(data.knight.damage).greaterThanOrEqual(0);
  expectTypeOf(data.knight.damage).toEqualTypeOf<number>();
  expect(data.knight.damageTaken).toBeDefined();
  expect(data.knight.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.knight.damageTaken).toEqualTypeOf<number>();
  expect(data.knight.potionsDrunk).toBeDefined();
  expect(data.knight.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.knight.potionsDrunk).toEqualTypeOf<number>();
  expect(data.knight.potionsThrown).toBeDefined();
  expect(data.knight.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.knight.potionsThrown).toEqualTypeOf<number>();
  expect(data.knight.playTime).toBeDefined();
  expect(data.knight.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.knight.playTime).toEqualTypeOf<number>();
  expect(data.knight.mobsSpawned).toBeDefined();
  expect(data.knight.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.knight.mobsSpawned).toEqualTypeOf<number>();
  expect(data.knight.chestsOpened).toBeDefined();
  expect(data.knight.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.knight.chestsOpened).toEqualTypeOf<number>();
  expect(data.guardian).toBeDefined();
  expectTypeOf(data.guardian).toEqualTypeOf<BlitzSGKit>();
  expect(data.guardian.level).toBeDefined();
  expect(data.guardian.level).greaterThanOrEqual(0);
  expectTypeOf(data.guardian.level).toEqualTypeOf<number>();
  expect(data.guardian.exp).toBeDefined();
  expect(data.guardian.exp).greaterThanOrEqual(0);
  expectTypeOf(data.guardian.exp).toEqualTypeOf<number>();
  expect(data.guardian.kills).toBeDefined();
  expect(data.guardian.kills).greaterThanOrEqual(0);
  expectTypeOf(data.guardian.kills).toEqualTypeOf<number>();
  expect(data.guardian.deaths).toBeDefined();
  expect(data.guardian.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.guardian.deaths).toEqualTypeOf<number>();
  expect(data.guardian.KDR).toBeDefined();
  expect(data.guardian.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.guardian.KDR).toEqualTypeOf<number>();
  expect(data.guardian.wins).toBeDefined();
  expect(data.guardian.wins).greaterThanOrEqual(0);
  expectTypeOf(data.guardian.wins).toEqualTypeOf<number>();
  expect(data.guardian.gamesPlayed).toBeDefined();
  expect(data.guardian.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.guardian.gamesPlayed).toEqualTypeOf<number>();
  expect(data.guardian.losses).toBeDefined();
  expect(data.guardian.losses).greaterThanOrEqual(0);
  expectTypeOf(data.guardian.losses).toEqualTypeOf<number>();
  expect(data.guardian.WLR).toBeDefined();
  expect(data.guardian.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.guardian.WLR).toEqualTypeOf<number>();
  expect(data.guardian.arrowsShot).toBeDefined();
  expect(data.guardian.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.guardian.arrowsShot).toEqualTypeOf<number>();
  expect(data.guardian.arrowsHit).toBeDefined();
  expect(data.guardian.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.guardian.arrowsHit).toEqualTypeOf<number>();
  expect(data.guardian.bowAccuracy).toBeDefined();
  expect(data.guardian.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.guardian.bowAccuracy).toEqualTypeOf<number>();
  expect(data.guardian.damage).toBeDefined();
  expect(data.guardian.damage).greaterThanOrEqual(0);
  expectTypeOf(data.guardian.damage).toEqualTypeOf<number>();
  expect(data.guardian.damageTaken).toBeDefined();
  expect(data.guardian.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.guardian.damageTaken).toEqualTypeOf<number>();
  expect(data.guardian.potionsDrunk).toBeDefined();
  expect(data.guardian.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.guardian.potionsDrunk).toEqualTypeOf<number>();
  expect(data.guardian.potionsThrown).toBeDefined();
  expect(data.guardian.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.guardian.potionsThrown).toEqualTypeOf<number>();
  expect(data.guardian.playTime).toBeDefined();
  expect(data.guardian.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.guardian.playTime).toEqualTypeOf<number>();
  expect(data.guardian.mobsSpawned).toBeDefined();
  expect(data.guardian.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.guardian.mobsSpawned).toEqualTypeOf<number>();
  expect(data.guardian.chestsOpened).toBeDefined();
  expect(data.guardian.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.guardian.chestsOpened).toEqualTypeOf<number>();
  expect(data.scout).toBeDefined();
  expectTypeOf(data.scout).toEqualTypeOf<BlitzSGKit>();
  expect(data.scout.level).toBeDefined();
  expect(data.scout.level).greaterThanOrEqual(0);
  expectTypeOf(data.scout.level).toEqualTypeOf<number>();
  expect(data.scout.exp).toBeDefined();
  expect(data.scout.exp).greaterThanOrEqual(0);
  expectTypeOf(data.scout.exp).toEqualTypeOf<number>();
  expect(data.scout.kills).toBeDefined();
  expect(data.scout.kills).greaterThanOrEqual(0);
  expectTypeOf(data.scout.kills).toEqualTypeOf<number>();
  expect(data.scout.deaths).toBeDefined();
  expect(data.scout.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.scout.deaths).toEqualTypeOf<number>();
  expect(data.scout.KDR).toBeDefined();
  expect(data.scout.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.scout.KDR).toEqualTypeOf<number>();
  expect(data.scout.wins).toBeDefined();
  expect(data.scout.wins).greaterThanOrEqual(0);
  expectTypeOf(data.scout.wins).toEqualTypeOf<number>();
  expect(data.scout.gamesPlayed).toBeDefined();
  expect(data.scout.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.scout.gamesPlayed).toEqualTypeOf<number>();
  expect(data.scout.losses).toBeDefined();
  expect(data.scout.losses).greaterThanOrEqual(0);
  expectTypeOf(data.scout.losses).toEqualTypeOf<number>();
  expect(data.scout.WLR).toBeDefined();
  expect(data.scout.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.scout.WLR).toEqualTypeOf<number>();
  expect(data.scout.arrowsShot).toBeDefined();
  expect(data.scout.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.scout.arrowsShot).toEqualTypeOf<number>();
  expect(data.scout.arrowsHit).toBeDefined();
  expect(data.scout.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.scout.arrowsHit).toEqualTypeOf<number>();
  expect(data.scout.bowAccuracy).toBeDefined();
  expect(data.scout.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.scout.bowAccuracy).toEqualTypeOf<number>();
  expect(data.scout.damage).toBeDefined();
  expect(data.scout.damage).greaterThanOrEqual(0);
  expectTypeOf(data.scout.damage).toEqualTypeOf<number>();
  expect(data.scout.damageTaken).toBeDefined();
  expect(data.scout.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.scout.damageTaken).toEqualTypeOf<number>();
  expect(data.scout.potionsDrunk).toBeDefined();
  expect(data.scout.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.scout.potionsDrunk).toEqualTypeOf<number>();
  expect(data.scout.potionsThrown).toBeDefined();
  expect(data.scout.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.scout.potionsThrown).toEqualTypeOf<number>();
  expect(data.scout.playTime).toBeDefined();
  expect(data.scout.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.scout.playTime).toEqualTypeOf<number>();
  expect(data.scout.mobsSpawned).toBeDefined();
  expect(data.scout.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.scout.mobsSpawned).toEqualTypeOf<number>();
  expect(data.scout.chestsOpened).toBeDefined();
  expect(data.scout.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.scout.chestsOpened).toEqualTypeOf<number>();
  expect(data.hunter).toBeDefined();
  expectTypeOf(data.hunter).toEqualTypeOf<BlitzSGKit>();
  expect(data.hunter.level).toBeDefined();
  expect(data.hunter.level).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.level).toEqualTypeOf<number>();
  expect(data.hunter.exp).toBeDefined();
  expect(data.hunter.exp).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.exp).toEqualTypeOf<number>();
  expect(data.hunter.kills).toBeDefined();
  expect(data.hunter.kills).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.kills).toEqualTypeOf<number>();
  expect(data.hunter.deaths).toBeDefined();
  expect(data.hunter.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.deaths).toEqualTypeOf<number>();
  expect(data.hunter.KDR).toBeDefined();
  expect(data.hunter.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.KDR).toEqualTypeOf<number>();
  expect(data.hunter.wins).toBeDefined();
  expect(data.hunter.wins).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.wins).toEqualTypeOf<number>();
  expect(data.hunter.gamesPlayed).toBeDefined();
  expect(data.hunter.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.gamesPlayed).toEqualTypeOf<number>();
  expect(data.hunter.losses).toBeDefined();
  expect(data.hunter.losses).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.losses).toEqualTypeOf<number>();
  expect(data.hunter.WLR).toBeDefined();
  expect(data.hunter.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.WLR).toEqualTypeOf<number>();
  expect(data.hunter.arrowsShot).toBeDefined();
  expect(data.hunter.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.arrowsShot).toEqualTypeOf<number>();
  expect(data.hunter.arrowsHit).toBeDefined();
  expect(data.hunter.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.arrowsHit).toEqualTypeOf<number>();
  expect(data.hunter.bowAccuracy).toBeDefined();
  expect(data.hunter.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.bowAccuracy).toEqualTypeOf<number>();
  expect(data.hunter.damage).toBeDefined();
  expect(data.hunter.damage).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.damage).toEqualTypeOf<number>();
  expect(data.hunter.damageTaken).toBeDefined();
  expect(data.hunter.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.damageTaken).toEqualTypeOf<number>();
  expect(data.hunter.potionsDrunk).toBeDefined();
  expect(data.hunter.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.potionsDrunk).toEqualTypeOf<number>();
  expect(data.hunter.potionsThrown).toBeDefined();
  expect(data.hunter.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.potionsThrown).toEqualTypeOf<number>();
  expect(data.hunter.playTime).toBeDefined();
  expect(data.hunter.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.playTime).toEqualTypeOf<number>();
  expect(data.hunter.mobsSpawned).toBeDefined();
  expect(data.hunter.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.mobsSpawned).toEqualTypeOf<number>();
  expect(data.hunter.chestsOpened).toBeDefined();
  expect(data.hunter.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.chestsOpened).toEqualTypeOf<number>();
  expect(data.hypeTrain).toBeDefined();
  expectTypeOf(data.hypeTrain).toEqualTypeOf<BlitzSGKit>();
  expect(data.hypeTrain.level).toBeDefined();
  expect(data.hypeTrain.level).greaterThanOrEqual(0);
  expectTypeOf(data.hypeTrain.level).toEqualTypeOf<number>();
  expect(data.hypeTrain.exp).toBeDefined();
  expect(data.hypeTrain.exp).greaterThanOrEqual(0);
  expectTypeOf(data.hypeTrain.exp).toEqualTypeOf<number>();
  expect(data.hypeTrain.kills).toBeDefined();
  expect(data.hypeTrain.kills).greaterThanOrEqual(0);
  expectTypeOf(data.hypeTrain.kills).toEqualTypeOf<number>();
  expect(data.hypeTrain.deaths).toBeDefined();
  expect(data.hypeTrain.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.hypeTrain.deaths).toEqualTypeOf<number>();
  expect(data.hypeTrain.KDR).toBeDefined();
  expect(data.hypeTrain.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.hypeTrain.KDR).toEqualTypeOf<number>();
  expect(data.hypeTrain.wins).toBeDefined();
  expect(data.hypeTrain.wins).greaterThanOrEqual(0);
  expectTypeOf(data.hypeTrain.wins).toEqualTypeOf<number>();
  expect(data.hypeTrain.gamesPlayed).toBeDefined();
  expect(data.hypeTrain.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.hypeTrain.gamesPlayed).toEqualTypeOf<number>();
  expect(data.hypeTrain.losses).toBeDefined();
  expect(data.hypeTrain.losses).greaterThanOrEqual(0);
  expectTypeOf(data.hypeTrain.losses).toEqualTypeOf<number>();
  expect(data.hypeTrain.WLR).toBeDefined();
  expect(data.hypeTrain.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.hypeTrain.WLR).toEqualTypeOf<number>();
  expect(data.hypeTrain.arrowsShot).toBeDefined();
  expect(data.hypeTrain.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.hypeTrain.arrowsShot).toEqualTypeOf<number>();
  expect(data.hypeTrain.arrowsHit).toBeDefined();
  expect(data.hypeTrain.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.hypeTrain.arrowsHit).toEqualTypeOf<number>();
  expect(data.hypeTrain.bowAccuracy).toBeDefined();
  expect(data.hypeTrain.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.hypeTrain.bowAccuracy).toEqualTypeOf<number>();
  expect(data.hypeTrain.damage).toBeDefined();
  expect(data.hypeTrain.damage).greaterThanOrEqual(0);
  expectTypeOf(data.hypeTrain.damage).toEqualTypeOf<number>();
  expect(data.hypeTrain.damageTaken).toBeDefined();
  expect(data.hypeTrain.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.hypeTrain.damageTaken).toEqualTypeOf<number>();
  expect(data.hypeTrain.potionsDrunk).toBeDefined();
  expect(data.hypeTrain.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.hypeTrain.potionsDrunk).toEqualTypeOf<number>();
  expect(data.hypeTrain.potionsThrown).toBeDefined();
  expect(data.hypeTrain.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.hypeTrain.potionsThrown).toEqualTypeOf<number>();
  expect(data.hypeTrain.playTime).toBeDefined();
  expect(data.hypeTrain.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.hypeTrain.playTime).toEqualTypeOf<number>();
  expect(data.hypeTrain.mobsSpawned).toBeDefined();
  expect(data.hypeTrain.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.hypeTrain.mobsSpawned).toEqualTypeOf<number>();
  expect(data.hypeTrain.chestsOpened).toBeDefined();
  expect(data.hypeTrain.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.hypeTrain.chestsOpened).toEqualTypeOf<number>();
  expect(data.fisherman).toBeDefined();
  expectTypeOf(data.fisherman).toEqualTypeOf<BlitzSGKit>();
  expect(data.fisherman.level).toBeDefined();
  expect(data.fisherman.level).greaterThanOrEqual(0);
  expectTypeOf(data.fisherman.level).toEqualTypeOf<number>();
  expect(data.fisherman.exp).toBeDefined();
  expect(data.fisherman.exp).greaterThanOrEqual(0);
  expectTypeOf(data.fisherman.exp).toEqualTypeOf<number>();
  expect(data.fisherman.kills).toBeDefined();
  expect(data.fisherman.kills).greaterThanOrEqual(0);
  expectTypeOf(data.fisherman.kills).toEqualTypeOf<number>();
  expect(data.fisherman.deaths).toBeDefined();
  expect(data.fisherman.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.fisherman.deaths).toEqualTypeOf<number>();
  expect(data.fisherman.KDR).toBeDefined();
  expect(data.fisherman.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.fisherman.KDR).toEqualTypeOf<number>();
  expect(data.fisherman.wins).toBeDefined();
  expect(data.fisherman.wins).greaterThanOrEqual(0);
  expectTypeOf(data.fisherman.wins).toEqualTypeOf<number>();
  expect(data.fisherman.gamesPlayed).toBeDefined();
  expect(data.fisherman.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.fisherman.gamesPlayed).toEqualTypeOf<number>();
  expect(data.fisherman.losses).toBeDefined();
  expect(data.fisherman.losses).greaterThanOrEqual(0);
  expectTypeOf(data.fisherman.losses).toEqualTypeOf<number>();
  expect(data.fisherman.WLR).toBeDefined();
  expect(data.fisherman.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.fisherman.WLR).toEqualTypeOf<number>();
  expect(data.fisherman.arrowsShot).toBeDefined();
  expect(data.fisherman.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.fisherman.arrowsShot).toEqualTypeOf<number>();
  expect(data.fisherman.arrowsHit).toBeDefined();
  expect(data.fisherman.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.fisherman.arrowsHit).toEqualTypeOf<number>();
  expect(data.fisherman.bowAccuracy).toBeDefined();
  expect(data.fisherman.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.fisherman.bowAccuracy).toEqualTypeOf<number>();
  expect(data.fisherman.damage).toBeDefined();
  expect(data.fisherman.damage).greaterThanOrEqual(0);
  expectTypeOf(data.fisherman.damage).toEqualTypeOf<number>();
  expect(data.fisherman.damageTaken).toBeDefined();
  expect(data.fisherman.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.fisherman.damageTaken).toEqualTypeOf<number>();
  expect(data.fisherman.potionsDrunk).toBeDefined();
  expect(data.fisherman.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.fisherman.potionsDrunk).toEqualTypeOf<number>();
  expect(data.fisherman.potionsThrown).toBeDefined();
  expect(data.fisherman.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.fisherman.potionsThrown).toEqualTypeOf<number>();
  expect(data.fisherman.playTime).toBeDefined();
  expect(data.fisherman.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.fisherman.playTime).toEqualTypeOf<number>();
  expect(data.fisherman.mobsSpawned).toBeDefined();
  expect(data.fisherman.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.fisherman.mobsSpawned).toEqualTypeOf<number>();
  expect(data.fisherman.chestsOpened).toBeDefined();
  expect(data.fisherman.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.fisherman.chestsOpened).toEqualTypeOf<number>();
  expect(data.armorer).toBeDefined();
  expectTypeOf(data.armorer).toEqualTypeOf<BlitzSGKit>();
  expect(data.armorer.level).toBeDefined();
  expect(data.armorer.level).greaterThanOrEqual(0);
  expectTypeOf(data.armorer.level).toEqualTypeOf<number>();
  expect(data.armorer.exp).toBeDefined();
  expect(data.armorer.exp).greaterThanOrEqual(0);
  expectTypeOf(data.armorer.exp).toEqualTypeOf<number>();
  expect(data.armorer.kills).toBeDefined();
  expect(data.armorer.kills).greaterThanOrEqual(0);
  expectTypeOf(data.armorer.kills).toEqualTypeOf<number>();
  expect(data.armorer.deaths).toBeDefined();
  expect(data.armorer.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.armorer.deaths).toEqualTypeOf<number>();
  expect(data.armorer.KDR).toBeDefined();
  expect(data.armorer.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.armorer.KDR).toEqualTypeOf<number>();
  expect(data.armorer.wins).toBeDefined();
  expect(data.armorer.wins).greaterThanOrEqual(0);
  expectTypeOf(data.armorer.wins).toEqualTypeOf<number>();
  expect(data.armorer.gamesPlayed).toBeDefined();
  expect(data.armorer.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.armorer.gamesPlayed).toEqualTypeOf<number>();
  expect(data.armorer.losses).toBeDefined();
  expect(data.armorer.losses).greaterThanOrEqual(0);
  expectTypeOf(data.armorer.losses).toEqualTypeOf<number>();
  expect(data.armorer.WLR).toBeDefined();
  expect(data.armorer.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.armorer.WLR).toEqualTypeOf<number>();
  expect(data.armorer.arrowsShot).toBeDefined();
  expect(data.armorer.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.armorer.arrowsShot).toEqualTypeOf<number>();
  expect(data.armorer.arrowsHit).toBeDefined();
  expect(data.armorer.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.armorer.arrowsHit).toEqualTypeOf<number>();
  expect(data.armorer.bowAccuracy).toBeDefined();
  expect(data.armorer.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.armorer.bowAccuracy).toEqualTypeOf<number>();
  expect(data.armorer.damage).toBeDefined();
  expect(data.armorer.damage).greaterThanOrEqual(0);
  expectTypeOf(data.armorer.damage).toEqualTypeOf<number>();
  expect(data.armorer.damageTaken).toBeDefined();
  expect(data.armorer.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.armorer.damageTaken).toEqualTypeOf<number>();
  expect(data.armorer.potionsDrunk).toBeDefined();
  expect(data.armorer.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.armorer.potionsDrunk).toEqualTypeOf<number>();
  expect(data.armorer.potionsThrown).toBeDefined();
  expect(data.armorer.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.armorer.potionsThrown).toEqualTypeOf<number>();
  expect(data.armorer.playTime).toBeDefined();
  expect(data.armorer.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.armorer.playTime).toEqualTypeOf<number>();
  expect(data.armorer.mobsSpawned).toBeDefined();
  expect(data.armorer.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.armorer.mobsSpawned).toEqualTypeOf<number>();
  expect(data.armorer.chestsOpened).toBeDefined();
  expect(data.armorer.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.armorer.chestsOpened).toEqualTypeOf<number>();
  expect(data.horsetamer).toBeDefined();
  expectTypeOf(data.horsetamer).toEqualTypeOf<BlitzSGKit>();
  expect(data.horsetamer.level).toBeDefined();
  expect(data.horsetamer.level).greaterThanOrEqual(0);
  expectTypeOf(data.horsetamer.level).toEqualTypeOf<number>();
  expect(data.horsetamer.exp).toBeDefined();
  expect(data.horsetamer.exp).greaterThanOrEqual(0);
  expectTypeOf(data.horsetamer.exp).toEqualTypeOf<number>();
  expect(data.horsetamer.kills).toBeDefined();
  expect(data.horsetamer.kills).greaterThanOrEqual(0);
  expectTypeOf(data.horsetamer.kills).toEqualTypeOf<number>();
  expect(data.horsetamer.deaths).toBeDefined();
  expect(data.horsetamer.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.horsetamer.deaths).toEqualTypeOf<number>();
  expect(data.horsetamer.KDR).toBeDefined();
  expect(data.horsetamer.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.horsetamer.KDR).toEqualTypeOf<number>();
  expect(data.horsetamer.wins).toBeDefined();
  expect(data.horsetamer.wins).greaterThanOrEqual(0);
  expectTypeOf(data.horsetamer.wins).toEqualTypeOf<number>();
  expect(data.horsetamer.gamesPlayed).toBeDefined();
  expect(data.horsetamer.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.horsetamer.gamesPlayed).toEqualTypeOf<number>();
  expect(data.horsetamer.losses).toBeDefined();
  expect(data.horsetamer.losses).greaterThanOrEqual(0);
  expectTypeOf(data.horsetamer.losses).toEqualTypeOf<number>();
  expect(data.horsetamer.WLR).toBeDefined();
  expect(data.horsetamer.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.horsetamer.WLR).toEqualTypeOf<number>();
  expect(data.horsetamer.arrowsShot).toBeDefined();
  expect(data.horsetamer.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.horsetamer.arrowsShot).toEqualTypeOf<number>();
  expect(data.horsetamer.arrowsHit).toBeDefined();
  expect(data.horsetamer.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.horsetamer.arrowsHit).toEqualTypeOf<number>();
  expect(data.horsetamer.bowAccuracy).toBeDefined();
  expect(data.horsetamer.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.horsetamer.bowAccuracy).toEqualTypeOf<number>();
  expect(data.horsetamer.damage).toBeDefined();
  expect(data.horsetamer.damage).greaterThanOrEqual(0);
  expectTypeOf(data.horsetamer.damage).toEqualTypeOf<number>();
  expect(data.horsetamer.damageTaken).toBeDefined();
  expect(data.horsetamer.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.horsetamer.damageTaken).toEqualTypeOf<number>();
  expect(data.horsetamer.potionsDrunk).toBeDefined();
  expect(data.horsetamer.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.horsetamer.potionsDrunk).toEqualTypeOf<number>();
  expect(data.horsetamer.potionsThrown).toBeDefined();
  expect(data.horsetamer.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.horsetamer.potionsThrown).toEqualTypeOf<number>();
  expect(data.horsetamer.playTime).toBeDefined();
  expect(data.horsetamer.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.horsetamer.playTime).toEqualTypeOf<number>();
  expect(data.horsetamer.mobsSpawned).toBeDefined();
  expect(data.horsetamer.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.horsetamer.mobsSpawned).toEqualTypeOf<number>();
  expect(data.horsetamer.chestsOpened).toBeDefined();
  expect(data.horsetamer.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.horsetamer.chestsOpened).toEqualTypeOf<number>();
  expect(data.astronaut).toBeDefined();
  expectTypeOf(data.astronaut).toEqualTypeOf<BlitzSGKit>();
  expect(data.astronaut.level).toBeDefined();
  expect(data.astronaut.level).greaterThanOrEqual(0);
  expectTypeOf(data.astronaut.level).toEqualTypeOf<number>();
  expect(data.astronaut.exp).toBeDefined();
  expect(data.astronaut.exp).greaterThanOrEqual(0);
  expectTypeOf(data.astronaut.exp).toEqualTypeOf<number>();
  expect(data.astronaut.kills).toBeDefined();
  expect(data.astronaut.kills).greaterThanOrEqual(0);
  expectTypeOf(data.astronaut.kills).toEqualTypeOf<number>();
  expect(data.astronaut.deaths).toBeDefined();
  expect(data.astronaut.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.astronaut.deaths).toEqualTypeOf<number>();
  expect(data.astronaut.KDR).toBeDefined();
  expect(data.astronaut.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.astronaut.KDR).toEqualTypeOf<number>();
  expect(data.astronaut.wins).toBeDefined();
  expect(data.astronaut.wins).greaterThanOrEqual(0);
  expectTypeOf(data.astronaut.wins).toEqualTypeOf<number>();
  expect(data.astronaut.gamesPlayed).toBeDefined();
  expect(data.astronaut.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.astronaut.gamesPlayed).toEqualTypeOf<number>();
  expect(data.astronaut.losses).toBeDefined();
  expect(data.astronaut.losses).greaterThanOrEqual(0);
  expectTypeOf(data.astronaut.losses).toEqualTypeOf<number>();
  expect(data.astronaut.WLR).toBeDefined();
  expect(data.astronaut.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.astronaut.WLR).toEqualTypeOf<number>();
  expect(data.astronaut.arrowsShot).toBeDefined();
  expect(data.astronaut.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.astronaut.arrowsShot).toEqualTypeOf<number>();
  expect(data.astronaut.arrowsHit).toBeDefined();
  expect(data.astronaut.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.astronaut.arrowsHit).toEqualTypeOf<number>();
  expect(data.astronaut.bowAccuracy).toBeDefined();
  expect(data.astronaut.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.astronaut.bowAccuracy).toEqualTypeOf<number>();
  expect(data.astronaut.damage).toBeDefined();
  expect(data.astronaut.damage).greaterThanOrEqual(0);
  expectTypeOf(data.astronaut.damage).toEqualTypeOf<number>();
  expect(data.astronaut.damageTaken).toBeDefined();
  expect(data.astronaut.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.astronaut.damageTaken).toEqualTypeOf<number>();
  expect(data.astronaut.potionsDrunk).toBeDefined();
  expect(data.astronaut.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.astronaut.potionsDrunk).toEqualTypeOf<number>();
  expect(data.astronaut.potionsThrown).toBeDefined();
  expect(data.astronaut.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.astronaut.potionsThrown).toEqualTypeOf<number>();
  expect(data.astronaut.playTime).toBeDefined();
  expect(data.astronaut.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.astronaut.playTime).toEqualTypeOf<number>();
  expect(data.astronaut.mobsSpawned).toBeDefined();
  expect(data.astronaut.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.astronaut.mobsSpawned).toEqualTypeOf<number>();
  expect(data.astronaut.chestsOpened).toBeDefined();
  expect(data.astronaut.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.astronaut.chestsOpened).toEqualTypeOf<number>();
  expect(data.troll).toBeDefined();
  expectTypeOf(data.troll).toEqualTypeOf<BlitzSGKit>();
  expect(data.troll.level).toBeDefined();
  expect(data.troll.level).greaterThanOrEqual(0);
  expectTypeOf(data.troll.level).toEqualTypeOf<number>();
  expect(data.troll.exp).toBeDefined();
  expect(data.troll.exp).greaterThanOrEqual(0);
  expectTypeOf(data.troll.exp).toEqualTypeOf<number>();
  expect(data.troll.kills).toBeDefined();
  expect(data.troll.kills).greaterThanOrEqual(0);
  expectTypeOf(data.troll.kills).toEqualTypeOf<number>();
  expect(data.troll.deaths).toBeDefined();
  expect(data.troll.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.troll.deaths).toEqualTypeOf<number>();
  expect(data.troll.KDR).toBeDefined();
  expect(data.troll.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.troll.KDR).toEqualTypeOf<number>();
  expect(data.troll.wins).toBeDefined();
  expect(data.troll.wins).greaterThanOrEqual(0);
  expectTypeOf(data.troll.wins).toEqualTypeOf<number>();
  expect(data.troll.gamesPlayed).toBeDefined();
  expect(data.troll.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.troll.gamesPlayed).toEqualTypeOf<number>();
  expect(data.troll.losses).toBeDefined();
  expect(data.troll.losses).greaterThanOrEqual(0);
  expectTypeOf(data.troll.losses).toEqualTypeOf<number>();
  expect(data.troll.WLR).toBeDefined();
  expect(data.troll.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.troll.WLR).toEqualTypeOf<number>();
  expect(data.troll.arrowsShot).toBeDefined();
  expect(data.troll.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.troll.arrowsShot).toEqualTypeOf<number>();
  expect(data.troll.arrowsHit).toBeDefined();
  expect(data.troll.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.troll.arrowsHit).toEqualTypeOf<number>();
  expect(data.troll.bowAccuracy).toBeDefined();
  expect(data.troll.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.troll.bowAccuracy).toEqualTypeOf<number>();
  expect(data.troll.damage).toBeDefined();
  expect(data.troll.damage).greaterThanOrEqual(0);
  expectTypeOf(data.troll.damage).toEqualTypeOf<number>();
  expect(data.troll.damageTaken).toBeDefined();
  expect(data.troll.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.troll.damageTaken).toEqualTypeOf<number>();
  expect(data.troll.potionsDrunk).toBeDefined();
  expect(data.troll.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.troll.potionsDrunk).toEqualTypeOf<number>();
  expect(data.troll.potionsThrown).toBeDefined();
  expect(data.troll.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.troll.potionsThrown).toEqualTypeOf<number>();
  expect(data.troll.playTime).toBeDefined();
  expect(data.troll.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.troll.playTime).toEqualTypeOf<number>();
  expect(data.troll.mobsSpawned).toBeDefined();
  expect(data.troll.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.troll.mobsSpawned).toEqualTypeOf<number>();
  expect(data.troll.chestsOpened).toBeDefined();
  expect(data.troll.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.troll.chestsOpened).toEqualTypeOf<number>();
  expect(data.reaper).toBeDefined();
  expectTypeOf(data.reaper).toEqualTypeOf<BlitzSGKit>();
  expect(data.reaper.level).toBeDefined();
  expect(data.reaper.level).greaterThanOrEqual(0);
  expectTypeOf(data.reaper.level).toEqualTypeOf<number>();
  expect(data.reaper.exp).toBeDefined();
  expect(data.reaper.exp).greaterThanOrEqual(0);
  expectTypeOf(data.reaper.exp).toEqualTypeOf<number>();
  expect(data.reaper.kills).toBeDefined();
  expect(data.reaper.kills).greaterThanOrEqual(0);
  expectTypeOf(data.reaper.kills).toEqualTypeOf<number>();
  expect(data.reaper.deaths).toBeDefined();
  expect(data.reaper.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.reaper.deaths).toEqualTypeOf<number>();
  expect(data.reaper.KDR).toBeDefined();
  expect(data.reaper.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.reaper.KDR).toEqualTypeOf<number>();
  expect(data.reaper.wins).toBeDefined();
  expect(data.reaper.wins).greaterThanOrEqual(0);
  expectTypeOf(data.reaper.wins).toEqualTypeOf<number>();
  expect(data.reaper.gamesPlayed).toBeDefined();
  expect(data.reaper.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.reaper.gamesPlayed).toEqualTypeOf<number>();
  expect(data.reaper.losses).toBeDefined();
  expect(data.reaper.losses).greaterThanOrEqual(0);
  expectTypeOf(data.reaper.losses).toEqualTypeOf<number>();
  expect(data.reaper.WLR).toBeDefined();
  expect(data.reaper.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.reaper.WLR).toEqualTypeOf<number>();
  expect(data.reaper.arrowsShot).toBeDefined();
  expect(data.reaper.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.reaper.arrowsShot).toEqualTypeOf<number>();
  expect(data.reaper.arrowsHit).toBeDefined();
  expect(data.reaper.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.reaper.arrowsHit).toEqualTypeOf<number>();
  expect(data.reaper.bowAccuracy).toBeDefined();
  expect(data.reaper.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.reaper.bowAccuracy).toEqualTypeOf<number>();
  expect(data.reaper.damage).toBeDefined();
  expect(data.reaper.damage).greaterThanOrEqual(0);
  expectTypeOf(data.reaper.damage).toEqualTypeOf<number>();
  expect(data.reaper.damageTaken).toBeDefined();
  expect(data.reaper.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.reaper.damageTaken).toEqualTypeOf<number>();
  expect(data.reaper.potionsDrunk).toBeDefined();
  expect(data.reaper.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.reaper.potionsDrunk).toEqualTypeOf<number>();
  expect(data.reaper.potionsThrown).toBeDefined();
  expect(data.reaper.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.reaper.potionsThrown).toEqualTypeOf<number>();
  expect(data.reaper.playTime).toBeDefined();
  expect(data.reaper.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.reaper.playTime).toEqualTypeOf<number>();
  expect(data.reaper.mobsSpawned).toBeDefined();
  expect(data.reaper.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.reaper.mobsSpawned).toEqualTypeOf<number>();
  expect(data.reaper.chestsOpened).toBeDefined();
  expect(data.reaper.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.reaper.chestsOpened).toEqualTypeOf<number>();
  expect(data.shark).toBeDefined();
  expectTypeOf(data.shark).toEqualTypeOf<BlitzSGKit>();
  expect(data.shark.level).toBeDefined();
  expect(data.shark.level).greaterThanOrEqual(0);
  expectTypeOf(data.shark.level).toEqualTypeOf<number>();
  expect(data.shark.exp).toBeDefined();
  expect(data.shark.exp).greaterThanOrEqual(0);
  expectTypeOf(data.shark.exp).toEqualTypeOf<number>();
  expect(data.shark.kills).toBeDefined();
  expect(data.shark.kills).greaterThanOrEqual(0);
  expectTypeOf(data.shark.kills).toEqualTypeOf<number>();
  expect(data.shark.deaths).toBeDefined();
  expect(data.shark.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.shark.deaths).toEqualTypeOf<number>();
  expect(data.shark.KDR).toBeDefined();
  expect(data.shark.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.shark.KDR).toEqualTypeOf<number>();
  expect(data.shark.wins).toBeDefined();
  expect(data.shark.wins).greaterThanOrEqual(0);
  expectTypeOf(data.shark.wins).toEqualTypeOf<number>();
  expect(data.shark.gamesPlayed).toBeDefined();
  expect(data.shark.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.shark.gamesPlayed).toEqualTypeOf<number>();
  expect(data.shark.losses).toBeDefined();
  expect(data.shark.losses).greaterThanOrEqual(0);
  expectTypeOf(data.shark.losses).toEqualTypeOf<number>();
  expect(data.shark.WLR).toBeDefined();
  expect(data.shark.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.shark.WLR).toEqualTypeOf<number>();
  expect(data.shark.arrowsShot).toBeDefined();
  expect(data.shark.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.shark.arrowsShot).toEqualTypeOf<number>();
  expect(data.shark.arrowsHit).toBeDefined();
  expect(data.shark.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.shark.arrowsHit).toEqualTypeOf<number>();
  expect(data.shark.bowAccuracy).toBeDefined();
  expect(data.shark.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.shark.bowAccuracy).toEqualTypeOf<number>();
  expect(data.shark.damage).toBeDefined();
  expect(data.shark.damage).greaterThanOrEqual(0);
  expectTypeOf(data.shark.damage).toEqualTypeOf<number>();
  expect(data.shark.damageTaken).toBeDefined();
  expect(data.shark.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.shark.damageTaken).toEqualTypeOf<number>();
  expect(data.shark.potionsDrunk).toBeDefined();
  expect(data.shark.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.shark.potionsDrunk).toEqualTypeOf<number>();
  expect(data.shark.potionsThrown).toBeDefined();
  expect(data.shark.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.shark.potionsThrown).toEqualTypeOf<number>();
  expect(data.shark.playTime).toBeDefined();
  expect(data.shark.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.shark.playTime).toEqualTypeOf<number>();
  expect(data.shark.mobsSpawned).toBeDefined();
  expect(data.shark.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.shark.mobsSpawned).toEqualTypeOf<number>();
  expect(data.shark.chestsOpened).toBeDefined();
  expect(data.shark.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.shark.chestsOpened).toEqualTypeOf<number>();
  expect(data.reddragon).toBeDefined();
  expectTypeOf(data.reddragon).toEqualTypeOf<BlitzSGKit>();
  expect(data.reddragon.level).toBeDefined();
  expect(data.reddragon.level).greaterThanOrEqual(0);
  expectTypeOf(data.reddragon.level).toEqualTypeOf<number>();
  expect(data.reddragon.exp).toBeDefined();
  expect(data.reddragon.exp).greaterThanOrEqual(0);
  expectTypeOf(data.reddragon.exp).toEqualTypeOf<number>();
  expect(data.reddragon.kills).toBeDefined();
  expect(data.reddragon.kills).greaterThanOrEqual(0);
  expectTypeOf(data.reddragon.kills).toEqualTypeOf<number>();
  expect(data.reddragon.deaths).toBeDefined();
  expect(data.reddragon.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.reddragon.deaths).toEqualTypeOf<number>();
  expect(data.reddragon.KDR).toBeDefined();
  expect(data.reddragon.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.reddragon.KDR).toEqualTypeOf<number>();
  expect(data.reddragon.wins).toBeDefined();
  expect(data.reddragon.wins).greaterThanOrEqual(0);
  expectTypeOf(data.reddragon.wins).toEqualTypeOf<number>();
  expect(data.reddragon.gamesPlayed).toBeDefined();
  expect(data.reddragon.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.reddragon.gamesPlayed).toEqualTypeOf<number>();
  expect(data.reddragon.losses).toBeDefined();
  expect(data.reddragon.losses).greaterThanOrEqual(0);
  expectTypeOf(data.reddragon.losses).toEqualTypeOf<number>();
  expect(data.reddragon.WLR).toBeDefined();
  expect(data.reddragon.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.reddragon.WLR).toEqualTypeOf<number>();
  expect(data.reddragon.arrowsShot).toBeDefined();
  expect(data.reddragon.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.reddragon.arrowsShot).toEqualTypeOf<number>();
  expect(data.reddragon.arrowsHit).toBeDefined();
  expect(data.reddragon.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.reddragon.arrowsHit).toEqualTypeOf<number>();
  expect(data.reddragon.bowAccuracy).toBeDefined();
  expect(data.reddragon.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.reddragon.bowAccuracy).toEqualTypeOf<number>();
  expect(data.reddragon.damage).toBeDefined();
  expect(data.reddragon.damage).greaterThanOrEqual(0);
  expectTypeOf(data.reddragon.damage).toEqualTypeOf<number>();
  expect(data.reddragon.damageTaken).toBeDefined();
  expect(data.reddragon.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.reddragon.damageTaken).toEqualTypeOf<number>();
  expect(data.reddragon.potionsDrunk).toBeDefined();
  expect(data.reddragon.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.reddragon.potionsDrunk).toEqualTypeOf<number>();
  expect(data.reddragon.potionsThrown).toBeDefined();
  expect(data.reddragon.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.reddragon.potionsThrown).toEqualTypeOf<number>();
  expect(data.reddragon.playTime).toBeDefined();
  expect(data.reddragon.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.reddragon.playTime).toEqualTypeOf<number>();
  expect(data.reddragon.mobsSpawned).toBeDefined();
  expect(data.reddragon.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.reddragon.mobsSpawned).toEqualTypeOf<number>();
  expect(data.reddragon.chestsOpened).toBeDefined();
  expect(data.reddragon.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.reddragon.chestsOpened).toEqualTypeOf<number>();
  expect(data.toxicologist).toBeDefined();
  expectTypeOf(data.toxicologist).toEqualTypeOf<BlitzSGKit>();
  expect(data.toxicologist.level).toBeDefined();
  expect(data.toxicologist.level).greaterThanOrEqual(0);
  expectTypeOf(data.toxicologist.level).toEqualTypeOf<number>();
  expect(data.toxicologist.exp).toBeDefined();
  expect(data.toxicologist.exp).greaterThanOrEqual(0);
  expectTypeOf(data.toxicologist.exp).toEqualTypeOf<number>();
  expect(data.toxicologist.kills).toBeDefined();
  expect(data.toxicologist.kills).greaterThanOrEqual(0);
  expectTypeOf(data.toxicologist.kills).toEqualTypeOf<number>();
  expect(data.toxicologist.deaths).toBeDefined();
  expect(data.toxicologist.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.toxicologist.deaths).toEqualTypeOf<number>();
  expect(data.toxicologist.KDR).toBeDefined();
  expect(data.toxicologist.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.toxicologist.KDR).toEqualTypeOf<number>();
  expect(data.toxicologist.wins).toBeDefined();
  expect(data.toxicologist.wins).greaterThanOrEqual(0);
  expectTypeOf(data.toxicologist.wins).toEqualTypeOf<number>();
  expect(data.toxicologist.gamesPlayed).toBeDefined();
  expect(data.toxicologist.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.toxicologist.gamesPlayed).toEqualTypeOf<number>();
  expect(data.toxicologist.losses).toBeDefined();
  expect(data.toxicologist.losses).greaterThanOrEqual(0);
  expectTypeOf(data.toxicologist.losses).toEqualTypeOf<number>();
  expect(data.toxicologist.WLR).toBeDefined();
  expect(data.toxicologist.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.toxicologist.WLR).toEqualTypeOf<number>();
  expect(data.toxicologist.arrowsShot).toBeDefined();
  expect(data.toxicologist.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.toxicologist.arrowsShot).toEqualTypeOf<number>();
  expect(data.toxicologist.arrowsHit).toBeDefined();
  expect(data.toxicologist.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.toxicologist.arrowsHit).toEqualTypeOf<number>();
  expect(data.toxicologist.bowAccuracy).toBeDefined();
  expect(data.toxicologist.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.toxicologist.bowAccuracy).toEqualTypeOf<number>();
  expect(data.toxicologist.damage).toBeDefined();
  expect(data.toxicologist.damage).greaterThanOrEqual(0);
  expectTypeOf(data.toxicologist.damage).toEqualTypeOf<number>();
  expect(data.toxicologist.damageTaken).toBeDefined();
  expect(data.toxicologist.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.toxicologist.damageTaken).toEqualTypeOf<number>();
  expect(data.toxicologist.potionsDrunk).toBeDefined();
  expect(data.toxicologist.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.toxicologist.potionsDrunk).toEqualTypeOf<number>();
  expect(data.toxicologist.potionsThrown).toBeDefined();
  expect(data.toxicologist.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.toxicologist.potionsThrown).toEqualTypeOf<number>();
  expect(data.toxicologist.playTime).toBeDefined();
  expect(data.toxicologist.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.toxicologist.playTime).toEqualTypeOf<number>();
  expect(data.toxicologist.mobsSpawned).toBeDefined();
  expect(data.toxicologist.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.toxicologist.mobsSpawned).toEqualTypeOf<number>();
  expect(data.toxicologist.chestsOpened).toBeDefined();
  expect(data.toxicologist.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.toxicologist.chestsOpened).toEqualTypeOf<number>();
  expect(data.rogue).toBeDefined();
  expectTypeOf(data.rogue).toEqualTypeOf<BlitzSGKit>();
  expect(data.rogue.level).toBeDefined();
  expect(data.rogue.level).greaterThanOrEqual(0);
  expectTypeOf(data.rogue.level).toEqualTypeOf<number>();
  expect(data.rogue.exp).toBeDefined();
  expect(data.rogue.exp).greaterThanOrEqual(0);
  expectTypeOf(data.rogue.exp).toEqualTypeOf<number>();
  expect(data.rogue.kills).toBeDefined();
  expect(data.rogue.kills).greaterThanOrEqual(0);
  expectTypeOf(data.rogue.kills).toEqualTypeOf<number>();
  expect(data.rogue.deaths).toBeDefined();
  expect(data.rogue.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.rogue.deaths).toEqualTypeOf<number>();
  expect(data.rogue.KDR).toBeDefined();
  expect(data.rogue.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.rogue.KDR).toEqualTypeOf<number>();
  expect(data.rogue.wins).toBeDefined();
  expect(data.rogue.wins).greaterThanOrEqual(0);
  expectTypeOf(data.rogue.wins).toEqualTypeOf<number>();
  expect(data.rogue.gamesPlayed).toBeDefined();
  expect(data.rogue.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.rogue.gamesPlayed).toEqualTypeOf<number>();
  expect(data.rogue.losses).toBeDefined();
  expect(data.rogue.losses).greaterThanOrEqual(0);
  expectTypeOf(data.rogue.losses).toEqualTypeOf<number>();
  expect(data.rogue.WLR).toBeDefined();
  expect(data.rogue.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.rogue.WLR).toEqualTypeOf<number>();
  expect(data.rogue.arrowsShot).toBeDefined();
  expect(data.rogue.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.rogue.arrowsShot).toEqualTypeOf<number>();
  expect(data.rogue.arrowsHit).toBeDefined();
  expect(data.rogue.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.rogue.arrowsHit).toEqualTypeOf<number>();
  expect(data.rogue.bowAccuracy).toBeDefined();
  expect(data.rogue.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.rogue.bowAccuracy).toEqualTypeOf<number>();
  expect(data.rogue.damage).toBeDefined();
  expect(data.rogue.damage).greaterThanOrEqual(0);
  expectTypeOf(data.rogue.damage).toEqualTypeOf<number>();
  expect(data.rogue.damageTaken).toBeDefined();
  expect(data.rogue.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.rogue.damageTaken).toEqualTypeOf<number>();
  expect(data.rogue.potionsDrunk).toBeDefined();
  expect(data.rogue.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.rogue.potionsDrunk).toEqualTypeOf<number>();
  expect(data.rogue.potionsThrown).toBeDefined();
  expect(data.rogue.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.rogue.potionsThrown).toEqualTypeOf<number>();
  expect(data.rogue.playTime).toBeDefined();
  expect(data.rogue.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.rogue.playTime).toEqualTypeOf<number>();
  expect(data.rogue.mobsSpawned).toBeDefined();
  expect(data.rogue.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.rogue.mobsSpawned).toEqualTypeOf<number>();
  expect(data.rogue.chestsOpened).toBeDefined();
  expect(data.rogue.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.rogue.chestsOpened).toEqualTypeOf<number>();
  expect(data.warlock).toBeDefined();
  expectTypeOf(data.warlock).toEqualTypeOf<BlitzSGKit>();
  expect(data.warlock.level).toBeDefined();
  expect(data.warlock.level).greaterThanOrEqual(0);
  expectTypeOf(data.warlock.level).toEqualTypeOf<number>();
  expect(data.warlock.exp).toBeDefined();
  expect(data.warlock.exp).greaterThanOrEqual(0);
  expectTypeOf(data.warlock.exp).toEqualTypeOf<number>();
  expect(data.warlock.kills).toBeDefined();
  expect(data.warlock.kills).greaterThanOrEqual(0);
  expectTypeOf(data.warlock.kills).toEqualTypeOf<number>();
  expect(data.warlock.deaths).toBeDefined();
  expect(data.warlock.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.warlock.deaths).toEqualTypeOf<number>();
  expect(data.warlock.KDR).toBeDefined();
  expect(data.warlock.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.warlock.KDR).toEqualTypeOf<number>();
  expect(data.warlock.wins).toBeDefined();
  expect(data.warlock.wins).greaterThanOrEqual(0);
  expectTypeOf(data.warlock.wins).toEqualTypeOf<number>();
  expect(data.warlock.gamesPlayed).toBeDefined();
  expect(data.warlock.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.warlock.gamesPlayed).toEqualTypeOf<number>();
  expect(data.warlock.losses).toBeDefined();
  expect(data.warlock.losses).greaterThanOrEqual(0);
  expectTypeOf(data.warlock.losses).toEqualTypeOf<number>();
  expect(data.warlock.WLR).toBeDefined();
  expect(data.warlock.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.warlock.WLR).toEqualTypeOf<number>();
  expect(data.warlock.arrowsShot).toBeDefined();
  expect(data.warlock.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.warlock.arrowsShot).toEqualTypeOf<number>();
  expect(data.warlock.arrowsHit).toBeDefined();
  expect(data.warlock.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.warlock.arrowsHit).toEqualTypeOf<number>();
  expect(data.warlock.bowAccuracy).toBeDefined();
  expect(data.warlock.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.warlock.bowAccuracy).toEqualTypeOf<number>();
  expect(data.warlock.damage).toBeDefined();
  expect(data.warlock.damage).greaterThanOrEqual(0);
  expectTypeOf(data.warlock.damage).toEqualTypeOf<number>();
  expect(data.warlock.damageTaken).toBeDefined();
  expect(data.warlock.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.warlock.damageTaken).toEqualTypeOf<number>();
  expect(data.warlock.potionsDrunk).toBeDefined();
  expect(data.warlock.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.warlock.potionsDrunk).toEqualTypeOf<number>();
  expect(data.warlock.potionsThrown).toBeDefined();
  expect(data.warlock.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.warlock.potionsThrown).toEqualTypeOf<number>();
  expect(data.warlock.playTime).toBeDefined();
  expect(data.warlock.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.warlock.playTime).toEqualTypeOf<number>();
  expect(data.warlock.mobsSpawned).toBeDefined();
  expect(data.warlock.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.warlock.mobsSpawned).toEqualTypeOf<number>();
  expect(data.warlock.chestsOpened).toBeDefined();
  expect(data.warlock.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.warlock.chestsOpened).toEqualTypeOf<number>();
  expect(data.slimeyslime).toBeDefined();
  expectTypeOf(data.slimeyslime).toEqualTypeOf<BlitzSGKit>();
  expect(data.slimeyslime.level).toBeDefined();
  expect(data.slimeyslime.level).greaterThanOrEqual(0);
  expectTypeOf(data.slimeyslime.level).toEqualTypeOf<number>();
  expect(data.slimeyslime.exp).toBeDefined();
  expect(data.slimeyslime.exp).greaterThanOrEqual(0);
  expectTypeOf(data.slimeyslime.exp).toEqualTypeOf<number>();
  expect(data.slimeyslime.kills).toBeDefined();
  expect(data.slimeyslime.kills).greaterThanOrEqual(0);
  expectTypeOf(data.slimeyslime.kills).toEqualTypeOf<number>();
  expect(data.slimeyslime.deaths).toBeDefined();
  expect(data.slimeyslime.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.slimeyslime.deaths).toEqualTypeOf<number>();
  expect(data.slimeyslime.KDR).toBeDefined();
  expect(data.slimeyslime.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.slimeyslime.KDR).toEqualTypeOf<number>();
  expect(data.slimeyslime.wins).toBeDefined();
  expect(data.slimeyslime.wins).greaterThanOrEqual(0);
  expectTypeOf(data.slimeyslime.wins).toEqualTypeOf<number>();
  expect(data.slimeyslime.gamesPlayed).toBeDefined();
  expect(data.slimeyslime.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.slimeyslime.gamesPlayed).toEqualTypeOf<number>();
  expect(data.slimeyslime.losses).toBeDefined();
  expect(data.slimeyslime.losses).greaterThanOrEqual(0);
  expectTypeOf(data.slimeyslime.losses).toEqualTypeOf<number>();
  expect(data.slimeyslime.WLR).toBeDefined();
  expect(data.slimeyslime.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.slimeyslime.WLR).toEqualTypeOf<number>();
  expect(data.slimeyslime.arrowsShot).toBeDefined();
  expect(data.slimeyslime.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.slimeyslime.arrowsShot).toEqualTypeOf<number>();
  expect(data.slimeyslime.arrowsHit).toBeDefined();
  expect(data.slimeyslime.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.slimeyslime.arrowsHit).toEqualTypeOf<number>();
  expect(data.slimeyslime.bowAccuracy).toBeDefined();
  expect(data.slimeyslime.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.slimeyslime.bowAccuracy).toEqualTypeOf<number>();
  expect(data.slimeyslime.damage).toBeDefined();
  expect(data.slimeyslime.damage).greaterThanOrEqual(0);
  expectTypeOf(data.slimeyslime.damage).toEqualTypeOf<number>();
  expect(data.slimeyslime.damageTaken).toBeDefined();
  expect(data.slimeyslime.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.slimeyslime.damageTaken).toEqualTypeOf<number>();
  expect(data.slimeyslime.potionsDrunk).toBeDefined();
  expect(data.slimeyslime.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.slimeyslime.potionsDrunk).toEqualTypeOf<number>();
  expect(data.slimeyslime.potionsThrown).toBeDefined();
  expect(data.slimeyslime.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.slimeyslime.potionsThrown).toEqualTypeOf<number>();
  expect(data.slimeyslime.playTime).toBeDefined();
  expect(data.slimeyslime.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.slimeyslime.playTime).toEqualTypeOf<number>();
  expect(data.slimeyslime.mobsSpawned).toBeDefined();
  expect(data.slimeyslime.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.slimeyslime.mobsSpawned).toEqualTypeOf<number>();
  expect(data.slimeyslime.chestsOpened).toBeDefined();
  expect(data.slimeyslime.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.slimeyslime.chestsOpened).toEqualTypeOf<number>();
  expect(data.jockey).toBeDefined();
  expectTypeOf(data.jockey).toEqualTypeOf<BlitzSGKit>();
  expect(data.jockey.level).toBeDefined();
  expect(data.jockey.level).greaterThanOrEqual(0);
  expectTypeOf(data.jockey.level).toEqualTypeOf<number>();
  expect(data.jockey.exp).toBeDefined();
  expect(data.jockey.exp).greaterThanOrEqual(0);
  expectTypeOf(data.jockey.exp).toEqualTypeOf<number>();
  expect(data.jockey.kills).toBeDefined();
  expect(data.jockey.kills).greaterThanOrEqual(0);
  expectTypeOf(data.jockey.kills).toEqualTypeOf<number>();
  expect(data.jockey.deaths).toBeDefined();
  expect(data.jockey.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.jockey.deaths).toEqualTypeOf<number>();
  expect(data.jockey.KDR).toBeDefined();
  expect(data.jockey.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.jockey.KDR).toEqualTypeOf<number>();
  expect(data.jockey.wins).toBeDefined();
  expect(data.jockey.wins).greaterThanOrEqual(0);
  expectTypeOf(data.jockey.wins).toEqualTypeOf<number>();
  expect(data.jockey.gamesPlayed).toBeDefined();
  expect(data.jockey.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.jockey.gamesPlayed).toEqualTypeOf<number>();
  expect(data.jockey.losses).toBeDefined();
  expect(data.jockey.losses).greaterThanOrEqual(0);
  expectTypeOf(data.jockey.losses).toEqualTypeOf<number>();
  expect(data.jockey.WLR).toBeDefined();
  expect(data.jockey.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.jockey.WLR).toEqualTypeOf<number>();
  expect(data.jockey.arrowsShot).toBeDefined();
  expect(data.jockey.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.jockey.arrowsShot).toEqualTypeOf<number>();
  expect(data.jockey.arrowsHit).toBeDefined();
  expect(data.jockey.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.jockey.arrowsHit).toEqualTypeOf<number>();
  expect(data.jockey.bowAccuracy).toBeDefined();
  expect(data.jockey.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.jockey.bowAccuracy).toEqualTypeOf<number>();
  expect(data.jockey.damage).toBeDefined();
  expect(data.jockey.damage).greaterThanOrEqual(0);
  expectTypeOf(data.jockey.damage).toEqualTypeOf<number>();
  expect(data.jockey.damageTaken).toBeDefined();
  expect(data.jockey.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.jockey.damageTaken).toEqualTypeOf<number>();
  expect(data.jockey.potionsDrunk).toBeDefined();
  expect(data.jockey.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.jockey.potionsDrunk).toEqualTypeOf<number>();
  expect(data.jockey.potionsThrown).toBeDefined();
  expect(data.jockey.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.jockey.potionsThrown).toEqualTypeOf<number>();
  expect(data.jockey.playTime).toBeDefined();
  expect(data.jockey.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.jockey.playTime).toEqualTypeOf<number>();
  expect(data.jockey.mobsSpawned).toBeDefined();
  expect(data.jockey.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.jockey.mobsSpawned).toEqualTypeOf<number>();
  expect(data.jockey.chestsOpened).toBeDefined();
  expect(data.jockey.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.jockey.chestsOpened).toEqualTypeOf<number>();
  expect(data.golem).toBeDefined();
  expectTypeOf(data.golem).toEqualTypeOf<BlitzSGKit>();
  expect(data.golem.level).toBeDefined();
  expect(data.golem.level).greaterThanOrEqual(0);
  expectTypeOf(data.golem.level).toEqualTypeOf<number>();
  expect(data.golem.exp).toBeDefined();
  expect(data.golem.exp).greaterThanOrEqual(0);
  expectTypeOf(data.golem.exp).toEqualTypeOf<number>();
  expect(data.golem.kills).toBeDefined();
  expect(data.golem.kills).greaterThanOrEqual(0);
  expectTypeOf(data.golem.kills).toEqualTypeOf<number>();
  expect(data.golem.deaths).toBeDefined();
  expect(data.golem.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.golem.deaths).toEqualTypeOf<number>();
  expect(data.golem.KDR).toBeDefined();
  expect(data.golem.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.golem.KDR).toEqualTypeOf<number>();
  expect(data.golem.wins).toBeDefined();
  expect(data.golem.wins).greaterThanOrEqual(0);
  expectTypeOf(data.golem.wins).toEqualTypeOf<number>();
  expect(data.golem.gamesPlayed).toBeDefined();
  expect(data.golem.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.golem.gamesPlayed).toEqualTypeOf<number>();
  expect(data.golem.losses).toBeDefined();
  expect(data.golem.losses).greaterThanOrEqual(0);
  expectTypeOf(data.golem.losses).toEqualTypeOf<number>();
  expect(data.golem.WLR).toBeDefined();
  expect(data.golem.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.golem.WLR).toEqualTypeOf<number>();
  expect(data.golem.arrowsShot).toBeDefined();
  expect(data.golem.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.golem.arrowsShot).toEqualTypeOf<number>();
  expect(data.golem.arrowsHit).toBeDefined();
  expect(data.golem.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.golem.arrowsHit).toEqualTypeOf<number>();
  expect(data.golem.bowAccuracy).toBeDefined();
  expect(data.golem.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.golem.bowAccuracy).toEqualTypeOf<number>();
  expect(data.golem.damage).toBeDefined();
  expect(data.golem.damage).greaterThanOrEqual(0);
  expectTypeOf(data.golem.damage).toEqualTypeOf<number>();
  expect(data.golem.damageTaken).toBeDefined();
  expect(data.golem.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.golem.damageTaken).toEqualTypeOf<number>();
  expect(data.golem.potionsDrunk).toBeDefined();
  expect(data.golem.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.golem.potionsDrunk).toEqualTypeOf<number>();
  expect(data.golem.potionsThrown).toBeDefined();
  expect(data.golem.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.golem.potionsThrown).toEqualTypeOf<number>();
  expect(data.golem.playTime).toBeDefined();
  expect(data.golem.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.golem.playTime).toEqualTypeOf<number>();
  expect(data.golem.mobsSpawned).toBeDefined();
  expect(data.golem.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.golem.mobsSpawned).toEqualTypeOf<number>();
  expect(data.golem.chestsOpened).toBeDefined();
  expect(data.golem.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.golem.chestsOpened).toEqualTypeOf<number>();
  expect(data.viking).toBeDefined();
  expectTypeOf(data.viking).toEqualTypeOf<BlitzSGKit>();
  expect(data.viking.level).toBeDefined();
  expect(data.viking.level).greaterThanOrEqual(0);
  expectTypeOf(data.viking.level).toEqualTypeOf<number>();
  expect(data.viking.exp).toBeDefined();
  expect(data.viking.exp).greaterThanOrEqual(0);
  expectTypeOf(data.viking.exp).toEqualTypeOf<number>();
  expect(data.viking.kills).toBeDefined();
  expect(data.viking.kills).greaterThanOrEqual(0);
  expectTypeOf(data.viking.kills).toEqualTypeOf<number>();
  expect(data.viking.deaths).toBeDefined();
  expect(data.viking.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.viking.deaths).toEqualTypeOf<number>();
  expect(data.viking.KDR).toBeDefined();
  expect(data.viking.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.viking.KDR).toEqualTypeOf<number>();
  expect(data.viking.wins).toBeDefined();
  expect(data.viking.wins).greaterThanOrEqual(0);
  expectTypeOf(data.viking.wins).toEqualTypeOf<number>();
  expect(data.viking.gamesPlayed).toBeDefined();
  expect(data.viking.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.viking.gamesPlayed).toEqualTypeOf<number>();
  expect(data.viking.losses).toBeDefined();
  expect(data.viking.losses).greaterThanOrEqual(0);
  expectTypeOf(data.viking.losses).toEqualTypeOf<number>();
  expect(data.viking.WLR).toBeDefined();
  expect(data.viking.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.viking.WLR).toEqualTypeOf<number>();
  expect(data.viking.arrowsShot).toBeDefined();
  expect(data.viking.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.viking.arrowsShot).toEqualTypeOf<number>();
  expect(data.viking.arrowsHit).toBeDefined();
  expect(data.viking.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.viking.arrowsHit).toEqualTypeOf<number>();
  expect(data.viking.bowAccuracy).toBeDefined();
  expect(data.viking.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.viking.bowAccuracy).toEqualTypeOf<number>();
  expect(data.viking.damage).toBeDefined();
  expect(data.viking.damage).greaterThanOrEqual(0);
  expectTypeOf(data.viking.damage).toEqualTypeOf<number>();
  expect(data.viking.damageTaken).toBeDefined();
  expect(data.viking.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.viking.damageTaken).toEqualTypeOf<number>();
  expect(data.viking.potionsDrunk).toBeDefined();
  expect(data.viking.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.viking.potionsDrunk).toEqualTypeOf<number>();
  expect(data.viking.potionsThrown).toBeDefined();
  expect(data.viking.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.viking.potionsThrown).toEqualTypeOf<number>();
  expect(data.viking.playTime).toBeDefined();
  expect(data.viking.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.viking.playTime).toEqualTypeOf<number>();
  expect(data.viking.mobsSpawned).toBeDefined();
  expect(data.viking.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.viking.mobsSpawned).toEqualTypeOf<number>();
  expect(data.viking.chestsOpened).toBeDefined();
  expect(data.viking.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.viking.chestsOpened).toEqualTypeOf<number>();
  expect(data.shadowKnight).toBeDefined();
  expectTypeOf(data.shadowKnight).toEqualTypeOf<BlitzSGKit>();
  expect(data.shadowKnight.level).toBeDefined();
  expect(data.shadowKnight.level).greaterThanOrEqual(0);
  expectTypeOf(data.shadowKnight.level).toEqualTypeOf<number>();
  expect(data.shadowKnight.exp).toBeDefined();
  expect(data.shadowKnight.exp).greaterThanOrEqual(0);
  expectTypeOf(data.shadowKnight.exp).toEqualTypeOf<number>();
  expect(data.shadowKnight.kills).toBeDefined();
  expect(data.shadowKnight.kills).greaterThanOrEqual(0);
  expectTypeOf(data.shadowKnight.kills).toEqualTypeOf<number>();
  expect(data.shadowKnight.deaths).toBeDefined();
  expect(data.shadowKnight.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.shadowKnight.deaths).toEqualTypeOf<number>();
  expect(data.shadowKnight.KDR).toBeDefined();
  expect(data.shadowKnight.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.shadowKnight.KDR).toEqualTypeOf<number>();
  expect(data.shadowKnight.wins).toBeDefined();
  expect(data.shadowKnight.wins).greaterThanOrEqual(0);
  expectTypeOf(data.shadowKnight.wins).toEqualTypeOf<number>();
  expect(data.shadowKnight.gamesPlayed).toBeDefined();
  expect(data.shadowKnight.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.shadowKnight.gamesPlayed).toEqualTypeOf<number>();
  expect(data.shadowKnight.losses).toBeDefined();
  expect(data.shadowKnight.losses).greaterThanOrEqual(0);
  expectTypeOf(data.shadowKnight.losses).toEqualTypeOf<number>();
  expect(data.shadowKnight.WLR).toBeDefined();
  expect(data.shadowKnight.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.shadowKnight.WLR).toEqualTypeOf<number>();
  expect(data.shadowKnight.arrowsShot).toBeDefined();
  expect(data.shadowKnight.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.shadowKnight.arrowsShot).toEqualTypeOf<number>();
  expect(data.shadowKnight.arrowsHit).toBeDefined();
  expect(data.shadowKnight.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.shadowKnight.arrowsHit).toEqualTypeOf<number>();
  expect(data.shadowKnight.bowAccuracy).toBeDefined();
  expect(data.shadowKnight.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.shadowKnight.bowAccuracy).toEqualTypeOf<number>();
  expect(data.shadowKnight.damage).toBeDefined();
  expect(data.shadowKnight.damage).greaterThanOrEqual(0);
  expectTypeOf(data.shadowKnight.damage).toEqualTypeOf<number>();
  expect(data.shadowKnight.damageTaken).toBeDefined();
  expect(data.shadowKnight.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.shadowKnight.damageTaken).toEqualTypeOf<number>();
  expect(data.shadowKnight.potionsDrunk).toBeDefined();
  expect(data.shadowKnight.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.shadowKnight.potionsDrunk).toEqualTypeOf<number>();
  expect(data.shadowKnight.potionsThrown).toBeDefined();
  expect(data.shadowKnight.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.shadowKnight.potionsThrown).toEqualTypeOf<number>();
  expect(data.shadowKnight.playTime).toBeDefined();
  expect(data.shadowKnight.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.shadowKnight.playTime).toEqualTypeOf<number>();
  expect(data.shadowKnight.mobsSpawned).toBeDefined();
  expect(data.shadowKnight.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.shadowKnight.mobsSpawned).toEqualTypeOf<number>();
  expect(data.shadowKnight.chestsOpened).toBeDefined();
  expect(data.shadowKnight.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.shadowKnight.chestsOpened).toEqualTypeOf<number>();
  expect(data.pigman).toBeDefined();
  expectTypeOf(data.pigman).toEqualTypeOf<BlitzSGKit>();
  expect(data.pigman.level).toBeDefined();
  expect(data.pigman.level).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.level).toEqualTypeOf<number>();
  expect(data.pigman.exp).toBeDefined();
  expect(data.pigman.exp).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.exp).toEqualTypeOf<number>();
  expect(data.pigman.kills).toBeDefined();
  expect(data.pigman.kills).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.kills).toEqualTypeOf<number>();
  expect(data.pigman.deaths).toBeDefined();
  expect(data.pigman.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.deaths).toEqualTypeOf<number>();
  expect(data.pigman.KDR).toBeDefined();
  expect(data.pigman.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.KDR).toEqualTypeOf<number>();
  expect(data.pigman.wins).toBeDefined();
  expect(data.pigman.wins).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.wins).toEqualTypeOf<number>();
  expect(data.pigman.gamesPlayed).toBeDefined();
  expect(data.pigman.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.gamesPlayed).toEqualTypeOf<number>();
  expect(data.pigman.losses).toBeDefined();
  expect(data.pigman.losses).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.losses).toEqualTypeOf<number>();
  expect(data.pigman.WLR).toBeDefined();
  expect(data.pigman.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.WLR).toEqualTypeOf<number>();
  expect(data.pigman.arrowsShot).toBeDefined();
  expect(data.pigman.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.arrowsShot).toEqualTypeOf<number>();
  expect(data.pigman.arrowsHit).toBeDefined();
  expect(data.pigman.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.arrowsHit).toEqualTypeOf<number>();
  expect(data.pigman.bowAccuracy).toBeDefined();
  expect(data.pigman.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.bowAccuracy).toEqualTypeOf<number>();
  expect(data.pigman.damage).toBeDefined();
  expect(data.pigman.damage).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.damage).toEqualTypeOf<number>();
  expect(data.pigman.damageTaken).toBeDefined();
  expect(data.pigman.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.damageTaken).toEqualTypeOf<number>();
  expect(data.pigman.potionsDrunk).toBeDefined();
  expect(data.pigman.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.potionsDrunk).toEqualTypeOf<number>();
  expect(data.pigman.potionsThrown).toBeDefined();
  expect(data.pigman.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.potionsThrown).toEqualTypeOf<number>();
  expect(data.pigman.playTime).toBeDefined();
  expect(data.pigman.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.playTime).toEqualTypeOf<number>();
  expect(data.pigman.mobsSpawned).toBeDefined();
  expect(data.pigman.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.mobsSpawned).toEqualTypeOf<number>();
  expect(data.pigman.chestsOpened).toBeDefined();
  expect(data.pigman.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.chestsOpened).toEqualTypeOf<number>();
  expect(data.paladin).toBeDefined();
  expectTypeOf(data.paladin).toEqualTypeOf<BlitzSGKit>();
  expect(data.paladin.level).toBeDefined();
  expect(data.paladin.level).greaterThanOrEqual(0);
  expectTypeOf(data.paladin.level).toEqualTypeOf<number>();
  expect(data.paladin.exp).toBeDefined();
  expect(data.paladin.exp).greaterThanOrEqual(0);
  expectTypeOf(data.paladin.exp).toEqualTypeOf<number>();
  expect(data.paladin.kills).toBeDefined();
  expect(data.paladin.kills).greaterThanOrEqual(0);
  expectTypeOf(data.paladin.kills).toEqualTypeOf<number>();
  expect(data.paladin.deaths).toBeDefined();
  expect(data.paladin.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.paladin.deaths).toEqualTypeOf<number>();
  expect(data.paladin.KDR).toBeDefined();
  expect(data.paladin.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.paladin.KDR).toEqualTypeOf<number>();
  expect(data.paladin.wins).toBeDefined();
  expect(data.paladin.wins).greaterThanOrEqual(0);
  expectTypeOf(data.paladin.wins).toEqualTypeOf<number>();
  expect(data.paladin.gamesPlayed).toBeDefined();
  expect(data.paladin.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.paladin.gamesPlayed).toEqualTypeOf<number>();
  expect(data.paladin.losses).toBeDefined();
  expect(data.paladin.losses).greaterThanOrEqual(0);
  expectTypeOf(data.paladin.losses).toEqualTypeOf<number>();
  expect(data.paladin.WLR).toBeDefined();
  expect(data.paladin.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.paladin.WLR).toEqualTypeOf<number>();
  expect(data.paladin.arrowsShot).toBeDefined();
  expect(data.paladin.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.paladin.arrowsShot).toEqualTypeOf<number>();
  expect(data.paladin.arrowsHit).toBeDefined();
  expect(data.paladin.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.paladin.arrowsHit).toEqualTypeOf<number>();
  expect(data.paladin.bowAccuracy).toBeDefined();
  expect(data.paladin.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.paladin.bowAccuracy).toEqualTypeOf<number>();
  expect(data.paladin.damage).toBeDefined();
  expect(data.paladin.damage).greaterThanOrEqual(0);
  expectTypeOf(data.paladin.damage).toEqualTypeOf<number>();
  expect(data.paladin.damageTaken).toBeDefined();
  expect(data.paladin.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.paladin.damageTaken).toEqualTypeOf<number>();
  expect(data.paladin.potionsDrunk).toBeDefined();
  expect(data.paladin.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.paladin.potionsDrunk).toEqualTypeOf<number>();
  expect(data.paladin.potionsThrown).toBeDefined();
  expect(data.paladin.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.paladin.potionsThrown).toEqualTypeOf<number>();
  expect(data.paladin.playTime).toBeDefined();
  expect(data.paladin.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.paladin.playTime).toEqualTypeOf<number>();
  expect(data.paladin.mobsSpawned).toBeDefined();
  expect(data.paladin.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.paladin.mobsSpawned).toEqualTypeOf<number>();
  expect(data.paladin.chestsOpened).toBeDefined();
  expect(data.paladin.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.paladin.chestsOpened).toEqualTypeOf<number>();
  expect(data.necromancer).toBeDefined();
  expectTypeOf(data.necromancer).toEqualTypeOf<BlitzSGKit>();
  expect(data.necromancer.level).toBeDefined();
  expect(data.necromancer.level).greaterThanOrEqual(0);
  expectTypeOf(data.necromancer.level).toEqualTypeOf<number>();
  expect(data.necromancer.exp).toBeDefined();
  expect(data.necromancer.exp).greaterThanOrEqual(0);
  expectTypeOf(data.necromancer.exp).toEqualTypeOf<number>();
  expect(data.necromancer.kills).toBeDefined();
  expect(data.necromancer.kills).greaterThanOrEqual(0);
  expectTypeOf(data.necromancer.kills).toEqualTypeOf<number>();
  expect(data.necromancer.deaths).toBeDefined();
  expect(data.necromancer.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.necromancer.deaths).toEqualTypeOf<number>();
  expect(data.necromancer.KDR).toBeDefined();
  expect(data.necromancer.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.necromancer.KDR).toEqualTypeOf<number>();
  expect(data.necromancer.wins).toBeDefined();
  expect(data.necromancer.wins).greaterThanOrEqual(0);
  expectTypeOf(data.necromancer.wins).toEqualTypeOf<number>();
  expect(data.necromancer.gamesPlayed).toBeDefined();
  expect(data.necromancer.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.necromancer.gamesPlayed).toEqualTypeOf<number>();
  expect(data.necromancer.losses).toBeDefined();
  expect(data.necromancer.losses).greaterThanOrEqual(0);
  expectTypeOf(data.necromancer.losses).toEqualTypeOf<number>();
  expect(data.necromancer.WLR).toBeDefined();
  expect(data.necromancer.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.necromancer.WLR).toEqualTypeOf<number>();
  expect(data.necromancer.arrowsShot).toBeDefined();
  expect(data.necromancer.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.necromancer.arrowsShot).toEqualTypeOf<number>();
  expect(data.necromancer.arrowsHit).toBeDefined();
  expect(data.necromancer.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.necromancer.arrowsHit).toEqualTypeOf<number>();
  expect(data.necromancer.bowAccuracy).toBeDefined();
  expect(data.necromancer.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.necromancer.bowAccuracy).toEqualTypeOf<number>();
  expect(data.necromancer.damage).toBeDefined();
  expect(data.necromancer.damage).greaterThanOrEqual(0);
  expectTypeOf(data.necromancer.damage).toEqualTypeOf<number>();
  expect(data.necromancer.damageTaken).toBeDefined();
  expect(data.necromancer.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.necromancer.damageTaken).toEqualTypeOf<number>();
  expect(data.necromancer.potionsDrunk).toBeDefined();
  expect(data.necromancer.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.necromancer.potionsDrunk).toEqualTypeOf<number>();
  expect(data.necromancer.potionsThrown).toBeDefined();
  expect(data.necromancer.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.necromancer.potionsThrown).toEqualTypeOf<number>();
  expect(data.necromancer.playTime).toBeDefined();
  expect(data.necromancer.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.necromancer.playTime).toEqualTypeOf<number>();
  expect(data.necromancer.mobsSpawned).toBeDefined();
  expect(data.necromancer.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.necromancer.mobsSpawned).toEqualTypeOf<number>();
  expect(data.necromancer.chestsOpened).toBeDefined();
  expect(data.necromancer.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.necromancer.chestsOpened).toEqualTypeOf<number>();
  expect(data.florist).toBeDefined();
  expectTypeOf(data.florist).toEqualTypeOf<BlitzSGKit>();
  expect(data.florist.level).toBeDefined();
  expect(data.florist.level).greaterThanOrEqual(0);
  expectTypeOf(data.florist.level).toEqualTypeOf<number>();
  expect(data.florist.exp).toBeDefined();
  expect(data.florist.exp).greaterThanOrEqual(0);
  expectTypeOf(data.florist.exp).toEqualTypeOf<number>();
  expect(data.florist.kills).toBeDefined();
  expect(data.florist.kills).greaterThanOrEqual(0);
  expectTypeOf(data.florist.kills).toEqualTypeOf<number>();
  expect(data.florist.deaths).toBeDefined();
  expect(data.florist.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.florist.deaths).toEqualTypeOf<number>();
  expect(data.florist.KDR).toBeDefined();
  expect(data.florist.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.florist.KDR).toEqualTypeOf<number>();
  expect(data.florist.wins).toBeDefined();
  expect(data.florist.wins).greaterThanOrEqual(0);
  expectTypeOf(data.florist.wins).toEqualTypeOf<number>();
  expect(data.florist.gamesPlayed).toBeDefined();
  expect(data.florist.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.florist.gamesPlayed).toEqualTypeOf<number>();
  expect(data.florist.losses).toBeDefined();
  expect(data.florist.losses).greaterThanOrEqual(0);
  expectTypeOf(data.florist.losses).toEqualTypeOf<number>();
  expect(data.florist.WLR).toBeDefined();
  expect(data.florist.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.florist.WLR).toEqualTypeOf<number>();
  expect(data.florist.arrowsShot).toBeDefined();
  expect(data.florist.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.florist.arrowsShot).toEqualTypeOf<number>();
  expect(data.florist.arrowsHit).toBeDefined();
  expect(data.florist.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.florist.arrowsHit).toEqualTypeOf<number>();
  expect(data.florist.bowAccuracy).toBeDefined();
  expect(data.florist.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.florist.bowAccuracy).toEqualTypeOf<number>();
  expect(data.florist.damage).toBeDefined();
  expect(data.florist.damage).greaterThanOrEqual(0);
  expectTypeOf(data.florist.damage).toEqualTypeOf<number>();
  expect(data.florist.damageTaken).toBeDefined();
  expect(data.florist.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.florist.damageTaken).toEqualTypeOf<number>();
  expect(data.florist.potionsDrunk).toBeDefined();
  expect(data.florist.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.florist.potionsDrunk).toEqualTypeOf<number>();
  expect(data.florist.potionsThrown).toBeDefined();
  expect(data.florist.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.florist.potionsThrown).toEqualTypeOf<number>();
  expect(data.florist.playTime).toBeDefined();
  expect(data.florist.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.florist.playTime).toEqualTypeOf<number>();
  expect(data.florist.mobsSpawned).toBeDefined();
  expect(data.florist.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.florist.mobsSpawned).toEqualTypeOf<number>();
  expect(data.florist.chestsOpened).toBeDefined();
  expect(data.florist.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.florist.chestsOpened).toEqualTypeOf<number>();
  expect(data.diver).toBeDefined();
  expectTypeOf(data.diver).toEqualTypeOf<BlitzSGKit>();
  expect(data.diver.level).toBeDefined();
  expect(data.diver.level).greaterThanOrEqual(0);
  expectTypeOf(data.diver.level).toEqualTypeOf<number>();
  expect(data.diver.exp).toBeDefined();
  expect(data.diver.exp).greaterThanOrEqual(0);
  expectTypeOf(data.diver.exp).toEqualTypeOf<number>();
  expect(data.diver.kills).toBeDefined();
  expect(data.diver.kills).greaterThanOrEqual(0);
  expectTypeOf(data.diver.kills).toEqualTypeOf<number>();
  expect(data.diver.deaths).toBeDefined();
  expect(data.diver.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.diver.deaths).toEqualTypeOf<number>();
  expect(data.diver.KDR).toBeDefined();
  expect(data.diver.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.diver.KDR).toEqualTypeOf<number>();
  expect(data.diver.wins).toBeDefined();
  expect(data.diver.wins).greaterThanOrEqual(0);
  expectTypeOf(data.diver.wins).toEqualTypeOf<number>();
  expect(data.diver.gamesPlayed).toBeDefined();
  expect(data.diver.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.diver.gamesPlayed).toEqualTypeOf<number>();
  expect(data.diver.losses).toBeDefined();
  expect(data.diver.losses).greaterThanOrEqual(0);
  expectTypeOf(data.diver.losses).toEqualTypeOf<number>();
  expect(data.diver.WLR).toBeDefined();
  expect(data.diver.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.diver.WLR).toEqualTypeOf<number>();
  expect(data.diver.arrowsShot).toBeDefined();
  expect(data.diver.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.diver.arrowsShot).toEqualTypeOf<number>();
  expect(data.diver.arrowsHit).toBeDefined();
  expect(data.diver.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.diver.arrowsHit).toEqualTypeOf<number>();
  expect(data.diver.bowAccuracy).toBeDefined();
  expect(data.diver.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.diver.bowAccuracy).toEqualTypeOf<number>();
  expect(data.diver.damage).toBeDefined();
  expect(data.diver.damage).greaterThanOrEqual(0);
  expectTypeOf(data.diver.damage).toEqualTypeOf<number>();
  expect(data.diver.damageTaken).toBeDefined();
  expect(data.diver.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.diver.damageTaken).toEqualTypeOf<number>();
  expect(data.diver.potionsDrunk).toBeDefined();
  expect(data.diver.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.diver.potionsDrunk).toEqualTypeOf<number>();
  expect(data.diver.potionsThrown).toBeDefined();
  expect(data.diver.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.diver.potionsThrown).toEqualTypeOf<number>();
  expect(data.diver.playTime).toBeDefined();
  expect(data.diver.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.diver.playTime).toEqualTypeOf<number>();
  expect(data.diver.mobsSpawned).toBeDefined();
  expect(data.diver.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.diver.mobsSpawned).toEqualTypeOf<number>();
  expect(data.diver.chestsOpened).toBeDefined();
  expect(data.diver.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.diver.chestsOpened).toEqualTypeOf<number>();
  expect(data.arachnologist).toBeDefined();
  expectTypeOf(data.arachnologist).toEqualTypeOf<BlitzSGKit>();
  expect(data.arachnologist.level).toBeDefined();
  expect(data.arachnologist.level).greaterThanOrEqual(0);
  expectTypeOf(data.arachnologist.level).toEqualTypeOf<number>();
  expect(data.arachnologist.exp).toBeDefined();
  expect(data.arachnologist.exp).greaterThanOrEqual(0);
  expectTypeOf(data.arachnologist.exp).toEqualTypeOf<number>();
  expect(data.arachnologist.kills).toBeDefined();
  expect(data.arachnologist.kills).greaterThanOrEqual(0);
  expectTypeOf(data.arachnologist.kills).toEqualTypeOf<number>();
  expect(data.arachnologist.deaths).toBeDefined();
  expect(data.arachnologist.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.arachnologist.deaths).toEqualTypeOf<number>();
  expect(data.arachnologist.KDR).toBeDefined();
  expect(data.arachnologist.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.arachnologist.KDR).toEqualTypeOf<number>();
  expect(data.arachnologist.wins).toBeDefined();
  expect(data.arachnologist.wins).greaterThanOrEqual(0);
  expectTypeOf(data.arachnologist.wins).toEqualTypeOf<number>();
  expect(data.arachnologist.gamesPlayed).toBeDefined();
  expect(data.arachnologist.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.arachnologist.gamesPlayed).toEqualTypeOf<number>();
  expect(data.arachnologist.losses).toBeDefined();
  expect(data.arachnologist.losses).greaterThanOrEqual(0);
  expectTypeOf(data.arachnologist.losses).toEqualTypeOf<number>();
  expect(data.arachnologist.WLR).toBeDefined();
  expect(data.arachnologist.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.arachnologist.WLR).toEqualTypeOf<number>();
  expect(data.arachnologist.arrowsShot).toBeDefined();
  expect(data.arachnologist.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.arachnologist.arrowsShot).toEqualTypeOf<number>();
  expect(data.arachnologist.arrowsHit).toBeDefined();
  expect(data.arachnologist.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.arachnologist.arrowsHit).toEqualTypeOf<number>();
  expect(data.arachnologist.bowAccuracy).toBeDefined();
  expect(data.arachnologist.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.arachnologist.bowAccuracy).toEqualTypeOf<number>();
  expect(data.arachnologist.damage).toBeDefined();
  expect(data.arachnologist.damage).greaterThanOrEqual(0);
  expectTypeOf(data.arachnologist.damage).toEqualTypeOf<number>();
  expect(data.arachnologist.damageTaken).toBeDefined();
  expect(data.arachnologist.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.arachnologist.damageTaken).toEqualTypeOf<number>();
  expect(data.arachnologist.potionsDrunk).toBeDefined();
  expect(data.arachnologist.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.arachnologist.potionsDrunk).toEqualTypeOf<number>();
  expect(data.arachnologist.potionsThrown).toBeDefined();
  expect(data.arachnologist.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.arachnologist.potionsThrown).toEqualTypeOf<number>();
  expect(data.arachnologist.playTime).toBeDefined();
  expect(data.arachnologist.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.arachnologist.playTime).toEqualTypeOf<number>();
  expect(data.arachnologist.mobsSpawned).toBeDefined();
  expect(data.arachnologist.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.arachnologist.mobsSpawned).toEqualTypeOf<number>();
  expect(data.arachnologist.chestsOpened).toBeDefined();
  expect(data.arachnologist.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.arachnologist.chestsOpened).toEqualTypeOf<number>();
  expect(data.blaze).toBeDefined();
  expectTypeOf(data.blaze).toEqualTypeOf<BlitzSGKit>();
  expect(data.blaze.level).toBeDefined();
  expect(data.blaze.level).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.level).toEqualTypeOf<number>();
  expect(data.blaze.exp).toBeDefined();
  expect(data.blaze.exp).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.exp).toEqualTypeOf<number>();
  expect(data.blaze.kills).toBeDefined();
  expect(data.blaze.kills).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.kills).toEqualTypeOf<number>();
  expect(data.blaze.deaths).toBeDefined();
  expect(data.blaze.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.deaths).toEqualTypeOf<number>();
  expect(data.blaze.KDR).toBeDefined();
  expect(data.blaze.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.KDR).toEqualTypeOf<number>();
  expect(data.blaze.wins).toBeDefined();
  expect(data.blaze.wins).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.wins).toEqualTypeOf<number>();
  expect(data.blaze.gamesPlayed).toBeDefined();
  expect(data.blaze.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.gamesPlayed).toEqualTypeOf<number>();
  expect(data.blaze.losses).toBeDefined();
  expect(data.blaze.losses).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.losses).toEqualTypeOf<number>();
  expect(data.blaze.WLR).toBeDefined();
  expect(data.blaze.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.WLR).toEqualTypeOf<number>();
  expect(data.blaze.arrowsShot).toBeDefined();
  expect(data.blaze.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.arrowsShot).toEqualTypeOf<number>();
  expect(data.blaze.arrowsHit).toBeDefined();
  expect(data.blaze.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.arrowsHit).toEqualTypeOf<number>();
  expect(data.blaze.bowAccuracy).toBeDefined();
  expect(data.blaze.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.bowAccuracy).toEqualTypeOf<number>();
  expect(data.blaze.damage).toBeDefined();
  expect(data.blaze.damage).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.damage).toEqualTypeOf<number>();
  expect(data.blaze.damageTaken).toBeDefined();
  expect(data.blaze.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.damageTaken).toEqualTypeOf<number>();
  expect(data.blaze.potionsDrunk).toBeDefined();
  expect(data.blaze.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.potionsDrunk).toEqualTypeOf<number>();
  expect(data.blaze.potionsThrown).toBeDefined();
  expect(data.blaze.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.potionsThrown).toEqualTypeOf<number>();
  expect(data.blaze.playTime).toBeDefined();
  expect(data.blaze.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.playTime).toEqualTypeOf<number>();
  expect(data.blaze.mobsSpawned).toBeDefined();
  expect(data.blaze.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.mobsSpawned).toEqualTypeOf<number>();
  expect(data.blaze.chestsOpened).toBeDefined();
  expect(data.blaze.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.chestsOpened).toEqualTypeOf<number>();
  expect(data.wolftamer).toBeDefined();
  expectTypeOf(data.wolftamer).toEqualTypeOf<BlitzSGKit>();
  expect(data.wolftamer.level).toBeDefined();
  expect(data.wolftamer.level).greaterThanOrEqual(0);
  expectTypeOf(data.wolftamer.level).toEqualTypeOf<number>();
  expect(data.wolftamer.exp).toBeDefined();
  expect(data.wolftamer.exp).greaterThanOrEqual(0);
  expectTypeOf(data.wolftamer.exp).toEqualTypeOf<number>();
  expect(data.wolftamer.kills).toBeDefined();
  expect(data.wolftamer.kills).greaterThanOrEqual(0);
  expectTypeOf(data.wolftamer.kills).toEqualTypeOf<number>();
  expect(data.wolftamer.deaths).toBeDefined();
  expect(data.wolftamer.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.wolftamer.deaths).toEqualTypeOf<number>();
  expect(data.wolftamer.KDR).toBeDefined();
  expect(data.wolftamer.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.wolftamer.KDR).toEqualTypeOf<number>();
  expect(data.wolftamer.wins).toBeDefined();
  expect(data.wolftamer.wins).greaterThanOrEqual(0);
  expectTypeOf(data.wolftamer.wins).toEqualTypeOf<number>();
  expect(data.wolftamer.gamesPlayed).toBeDefined();
  expect(data.wolftamer.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.wolftamer.gamesPlayed).toEqualTypeOf<number>();
  expect(data.wolftamer.losses).toBeDefined();
  expect(data.wolftamer.losses).greaterThanOrEqual(0);
  expectTypeOf(data.wolftamer.losses).toEqualTypeOf<number>();
  expect(data.wolftamer.WLR).toBeDefined();
  expect(data.wolftamer.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.wolftamer.WLR).toEqualTypeOf<number>();
  expect(data.wolftamer.arrowsShot).toBeDefined();
  expect(data.wolftamer.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.wolftamer.arrowsShot).toEqualTypeOf<number>();
  expect(data.wolftamer.arrowsHit).toBeDefined();
  expect(data.wolftamer.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.wolftamer.arrowsHit).toEqualTypeOf<number>();
  expect(data.wolftamer.bowAccuracy).toBeDefined();
  expect(data.wolftamer.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.wolftamer.bowAccuracy).toEqualTypeOf<number>();
  expect(data.wolftamer.damage).toBeDefined();
  expect(data.wolftamer.damage).greaterThanOrEqual(0);
  expectTypeOf(data.wolftamer.damage).toEqualTypeOf<number>();
  expect(data.wolftamer.damageTaken).toBeDefined();
  expect(data.wolftamer.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.wolftamer.damageTaken).toEqualTypeOf<number>();
  expect(data.wolftamer.potionsDrunk).toBeDefined();
  expect(data.wolftamer.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.wolftamer.potionsDrunk).toEqualTypeOf<number>();
  expect(data.wolftamer.potionsThrown).toBeDefined();
  expect(data.wolftamer.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.wolftamer.potionsThrown).toEqualTypeOf<number>();
  expect(data.wolftamer.playTime).toBeDefined();
  expect(data.wolftamer.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.wolftamer.playTime).toEqualTypeOf<number>();
  expect(data.wolftamer.mobsSpawned).toBeDefined();
  expect(data.wolftamer.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.wolftamer.mobsSpawned).toEqualTypeOf<number>();
  expect(data.wolftamer.chestsOpened).toBeDefined();
  expect(data.wolftamer.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.wolftamer.chestsOpened).toEqualTypeOf<number>();
  expect(data.tim).toBeDefined();
  expectTypeOf(data.tim).toEqualTypeOf<BlitzSGKit>();
  expect(data.tim.level).toBeDefined();
  expect(data.tim.level).greaterThanOrEqual(0);
  expectTypeOf(data.tim.level).toEqualTypeOf<number>();
  expect(data.tim.exp).toBeDefined();
  expect(data.tim.exp).greaterThanOrEqual(0);
  expectTypeOf(data.tim.exp).toEqualTypeOf<number>();
  expect(data.tim.kills).toBeDefined();
  expect(data.tim.kills).greaterThanOrEqual(0);
  expectTypeOf(data.tim.kills).toEqualTypeOf<number>();
  expect(data.tim.deaths).toBeDefined();
  expect(data.tim.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.tim.deaths).toEqualTypeOf<number>();
  expect(data.tim.KDR).toBeDefined();
  expect(data.tim.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.tim.KDR).toEqualTypeOf<number>();
  expect(data.tim.wins).toBeDefined();
  expect(data.tim.wins).greaterThanOrEqual(0);
  expectTypeOf(data.tim.wins).toEqualTypeOf<number>();
  expect(data.tim.gamesPlayed).toBeDefined();
  expect(data.tim.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.tim.gamesPlayed).toEqualTypeOf<number>();
  expect(data.tim.losses).toBeDefined();
  expect(data.tim.losses).greaterThanOrEqual(0);
  expectTypeOf(data.tim.losses).toEqualTypeOf<number>();
  expect(data.tim.WLR).toBeDefined();
  expect(data.tim.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.tim.WLR).toEqualTypeOf<number>();
  expect(data.tim.arrowsShot).toBeDefined();
  expect(data.tim.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.tim.arrowsShot).toEqualTypeOf<number>();
  expect(data.tim.arrowsHit).toBeDefined();
  expect(data.tim.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.tim.arrowsHit).toEqualTypeOf<number>();
  expect(data.tim.bowAccuracy).toBeDefined();
  expect(data.tim.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.tim.bowAccuracy).toEqualTypeOf<number>();
  expect(data.tim.damage).toBeDefined();
  expect(data.tim.damage).greaterThanOrEqual(0);
  expectTypeOf(data.tim.damage).toEqualTypeOf<number>();
  expect(data.tim.damageTaken).toBeDefined();
  expect(data.tim.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.tim.damageTaken).toEqualTypeOf<number>();
  expect(data.tim.potionsDrunk).toBeDefined();
  expect(data.tim.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.tim.potionsDrunk).toEqualTypeOf<number>();
  expect(data.tim.potionsThrown).toBeDefined();
  expect(data.tim.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.tim.potionsThrown).toEqualTypeOf<number>();
  expect(data.tim.playTime).toBeDefined();
  expect(data.tim.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.tim.playTime).toEqualTypeOf<number>();
  expect(data.tim.mobsSpawned).toBeDefined();
  expect(data.tim.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.tim.mobsSpawned).toEqualTypeOf<number>();
  expect(data.tim.chestsOpened).toBeDefined();
  expect(data.tim.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.tim.chestsOpened).toEqualTypeOf<number>();
  expect(data.farmer).toBeDefined();
  expectTypeOf(data.farmer).toEqualTypeOf<BlitzSGKit>();
  expect(data.farmer.level).toBeDefined();
  expect(data.farmer.level).greaterThanOrEqual(0);
  expectTypeOf(data.farmer.level).toEqualTypeOf<number>();
  expect(data.farmer.exp).toBeDefined();
  expect(data.farmer.exp).greaterThanOrEqual(0);
  expectTypeOf(data.farmer.exp).toEqualTypeOf<number>();
  expect(data.farmer.kills).toBeDefined();
  expect(data.farmer.kills).greaterThanOrEqual(0);
  expectTypeOf(data.farmer.kills).toEqualTypeOf<number>();
  expect(data.farmer.deaths).toBeDefined();
  expect(data.farmer.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.farmer.deaths).toEqualTypeOf<number>();
  expect(data.farmer.KDR).toBeDefined();
  expect(data.farmer.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.farmer.KDR).toEqualTypeOf<number>();
  expect(data.farmer.wins).toBeDefined();
  expect(data.farmer.wins).greaterThanOrEqual(0);
  expectTypeOf(data.farmer.wins).toEqualTypeOf<number>();
  expect(data.farmer.gamesPlayed).toBeDefined();
  expect(data.farmer.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.farmer.gamesPlayed).toEqualTypeOf<number>();
  expect(data.farmer.losses).toBeDefined();
  expect(data.farmer.losses).greaterThanOrEqual(0);
  expectTypeOf(data.farmer.losses).toEqualTypeOf<number>();
  expect(data.farmer.WLR).toBeDefined();
  expect(data.farmer.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.farmer.WLR).toEqualTypeOf<number>();
  expect(data.farmer.arrowsShot).toBeDefined();
  expect(data.farmer.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.farmer.arrowsShot).toEqualTypeOf<number>();
  expect(data.farmer.arrowsHit).toBeDefined();
  expect(data.farmer.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.farmer.arrowsHit).toEqualTypeOf<number>();
  expect(data.farmer.bowAccuracy).toBeDefined();
  expect(data.farmer.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.farmer.bowAccuracy).toEqualTypeOf<number>();
  expect(data.farmer.damage).toBeDefined();
  expect(data.farmer.damage).greaterThanOrEqual(0);
  expectTypeOf(data.farmer.damage).toEqualTypeOf<number>();
  expect(data.farmer.damageTaken).toBeDefined();
  expect(data.farmer.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.farmer.damageTaken).toEqualTypeOf<number>();
  expect(data.farmer.potionsDrunk).toBeDefined();
  expect(data.farmer.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.farmer.potionsDrunk).toEqualTypeOf<number>();
  expect(data.farmer.potionsThrown).toBeDefined();
  expect(data.farmer.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.farmer.potionsThrown).toEqualTypeOf<number>();
  expect(data.farmer.playTime).toBeDefined();
  expect(data.farmer.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.farmer.playTime).toEqualTypeOf<number>();
  expect(data.farmer.mobsSpawned).toBeDefined();
  expect(data.farmer.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.farmer.mobsSpawned).toEqualTypeOf<number>();
  expect(data.farmer.chestsOpened).toBeDefined();
  expect(data.farmer.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.farmer.chestsOpened).toEqualTypeOf<number>();
  expect(data.creepertamer).toBeDefined();
  expectTypeOf(data.creepertamer).toEqualTypeOf<BlitzSGKit>();
  expect(data.creepertamer.level).toBeDefined();
  expect(data.creepertamer.level).greaterThanOrEqual(0);
  expectTypeOf(data.creepertamer.level).toEqualTypeOf<number>();
  expect(data.creepertamer.exp).toBeDefined();
  expect(data.creepertamer.exp).greaterThanOrEqual(0);
  expectTypeOf(data.creepertamer.exp).toEqualTypeOf<number>();
  expect(data.creepertamer.kills).toBeDefined();
  expect(data.creepertamer.kills).greaterThanOrEqual(0);
  expectTypeOf(data.creepertamer.kills).toEqualTypeOf<number>();
  expect(data.creepertamer.deaths).toBeDefined();
  expect(data.creepertamer.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.creepertamer.deaths).toEqualTypeOf<number>();
  expect(data.creepertamer.KDR).toBeDefined();
  expect(data.creepertamer.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.creepertamer.KDR).toEqualTypeOf<number>();
  expect(data.creepertamer.wins).toBeDefined();
  expect(data.creepertamer.wins).greaterThanOrEqual(0);
  expectTypeOf(data.creepertamer.wins).toEqualTypeOf<number>();
  expect(data.creepertamer.gamesPlayed).toBeDefined();
  expect(data.creepertamer.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.creepertamer.gamesPlayed).toEqualTypeOf<number>();
  expect(data.creepertamer.losses).toBeDefined();
  expect(data.creepertamer.losses).greaterThanOrEqual(0);
  expectTypeOf(data.creepertamer.losses).toEqualTypeOf<number>();
  expect(data.creepertamer.WLR).toBeDefined();
  expect(data.creepertamer.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.creepertamer.WLR).toEqualTypeOf<number>();
  expect(data.creepertamer.arrowsShot).toBeDefined();
  expect(data.creepertamer.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.creepertamer.arrowsShot).toEqualTypeOf<number>();
  expect(data.creepertamer.arrowsHit).toBeDefined();
  expect(data.creepertamer.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.creepertamer.arrowsHit).toEqualTypeOf<number>();
  expect(data.creepertamer.bowAccuracy).toBeDefined();
  expect(data.creepertamer.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.creepertamer.bowAccuracy).toEqualTypeOf<number>();
  expect(data.creepertamer.damage).toBeDefined();
  expect(data.creepertamer.damage).greaterThanOrEqual(0);
  expectTypeOf(data.creepertamer.damage).toEqualTypeOf<number>();
  expect(data.creepertamer.damageTaken).toBeDefined();
  expect(data.creepertamer.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.creepertamer.damageTaken).toEqualTypeOf<number>();
  expect(data.creepertamer.potionsDrunk).toBeDefined();
  expect(data.creepertamer.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.creepertamer.potionsDrunk).toEqualTypeOf<number>();
  expect(data.creepertamer.potionsThrown).toBeDefined();
  expect(data.creepertamer.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.creepertamer.potionsThrown).toEqualTypeOf<number>();
  expect(data.creepertamer.playTime).toBeDefined();
  expect(data.creepertamer.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.creepertamer.playTime).toEqualTypeOf<number>();
  expect(data.creepertamer.mobsSpawned).toBeDefined();
  expect(data.creepertamer.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.creepertamer.mobsSpawned).toEqualTypeOf<number>();
  expect(data.creepertamer.chestsOpened).toBeDefined();
  expect(data.creepertamer.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.creepertamer.chestsOpened).toEqualTypeOf<number>();
  expect(data.snowman).toBeDefined();
  expectTypeOf(data.snowman).toEqualTypeOf<BlitzSGKit>();
  expect(data.snowman.level).toBeDefined();
  expect(data.snowman.level).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.level).toEqualTypeOf<number>();
  expect(data.snowman.exp).toBeDefined();
  expect(data.snowman.exp).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.exp).toEqualTypeOf<number>();
  expect(data.snowman.kills).toBeDefined();
  expect(data.snowman.kills).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.kills).toEqualTypeOf<number>();
  expect(data.snowman.deaths).toBeDefined();
  expect(data.snowman.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.deaths).toEqualTypeOf<number>();
  expect(data.snowman.KDR).toBeDefined();
  expect(data.snowman.KDR).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.KDR).toEqualTypeOf<number>();
  expect(data.snowman.wins).toBeDefined();
  expect(data.snowman.wins).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.wins).toEqualTypeOf<number>();
  expect(data.snowman.gamesPlayed).toBeDefined();
  expect(data.snowman.gamesPlayed).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.gamesPlayed).toEqualTypeOf<number>();
  expect(data.snowman.losses).toBeDefined();
  expect(data.snowman.losses).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.losses).toEqualTypeOf<number>();
  expect(data.snowman.WLR).toBeDefined();
  expect(data.snowman.WLR).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.WLR).toEqualTypeOf<number>();
  expect(data.snowman.arrowsShot).toBeDefined();
  expect(data.snowman.arrowsShot).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.arrowsShot).toEqualTypeOf<number>();
  expect(data.snowman.arrowsHit).toBeDefined();
  expect(data.snowman.arrowsHit).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.arrowsHit).toEqualTypeOf<number>();
  expect(data.snowman.bowAccuracy).toBeDefined();
  expect(data.snowman.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.bowAccuracy).toEqualTypeOf<number>();
  expect(data.snowman.damage).toBeDefined();
  expect(data.snowman.damage).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.damage).toEqualTypeOf<number>();
  expect(data.snowman.damageTaken).toBeDefined();
  expect(data.snowman.damageTaken).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.damageTaken).toEqualTypeOf<number>();
  expect(data.snowman.potionsDrunk).toBeDefined();
  expect(data.snowman.potionsDrunk).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.potionsDrunk).toEqualTypeOf<number>();
  expect(data.snowman.potionsThrown).toBeDefined();
  expect(data.snowman.potionsThrown).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.potionsThrown).toEqualTypeOf<number>();
  expect(data.snowman.playTime).toBeDefined();
  expect(data.snowman.playTime).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.playTime).toEqualTypeOf<number>();
  expect(data.snowman.mobsSpawned).toBeDefined();
  expect(data.snowman.mobsSpawned).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.mobsSpawned).toEqualTypeOf<number>();
  expect(data.snowman.chestsOpened).toBeDefined();
  expect(data.snowman.chestsOpened).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.chestsOpened).toEqualTypeOf<number>();
});
