import Duels, { DuelsSkyWars, DuelsUHC, DuelsMegaWalls, DuelsOP, DuelsGamemode, DuelsBridge } from './Duels';
import { expect, expectTypeOf, test } from 'vitest';

test('Duels', () => {
  const data = new Duels({ stats: 'meow' });
  expect(data.tokens).toBeDefined();
  expect(data.tokens).greaterThanOrEqual(0);
  expectTypeOf(data.tokens).toEqualTypeOf<number>();
  expect(data.title).toBeDefined();
  expectTypeOf(data.title).toEqualTypeOf<string | null>();
  expect(data.kills).toBeDefined();
  expect(data.kills).greaterThanOrEqual(0);
  expectTypeOf(data.kills).toEqualTypeOf<number>();
  expect(data.deaths).toBeDefined();
  expect(data.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.deaths).toEqualTypeOf<number>();
  expect(data.KDRatio).toBeDefined();
  expect(data.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.KDRatio).toEqualTypeOf<number>();
  expect(data.wins).toBeDefined();
  expect(data.wins).greaterThanOrEqual(0);
  expectTypeOf(data.wins).toEqualTypeOf<number>();
  expect(data.losses).toBeDefined();
  expect(data.losses).greaterThanOrEqual(0);
  expectTypeOf(data.losses).toEqualTypeOf<number>();
  expect(data.WLRatio).toBeDefined();
  expect(data.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.WLRatio).toEqualTypeOf<number>();
  expect(data.playedGames).toBeDefined();
  expect(data.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.playedGames).toEqualTypeOf<number>();
  expect(data.winstreak).toBeDefined();
  expect(data.winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.winstreak).toEqualTypeOf<number>();
  expect(data.bestWinstreak).toBeDefined();
  expect(data.bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.bestWinstreak).toEqualTypeOf<number>();
  expect(data.ping).toBeDefined();
  expect(data.ping).greaterThanOrEqual(0);
  expectTypeOf(data.ping).toEqualTypeOf<number>();
  expect(data.blocksPlaced).toBeDefined();
  expect(data.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.blocksPlaced).toEqualTypeOf<number>();
  expect(data.swings).toBeDefined();
  expect(data.swings).greaterThanOrEqual(0);
  expectTypeOf(data.swings).toEqualTypeOf<number>();
  expect(data.hits).toBeDefined();
  expect(data.hits).greaterThanOrEqual(0);
  expectTypeOf(data.hits).toEqualTypeOf<number>();
  expect(data.meleeAccuracy).toBeDefined();
  expect(data.meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.meleeAccuracy).toEqualTypeOf<number>();
  expect(data.bowShots).toBeDefined();
  expect(data.bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.bowShots).toEqualTypeOf<number>();
  expect(data.bowHits).toBeDefined();
  expect(data.bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.bowHits).toEqualTypeOf<number>();
  expect(data.bowAccuracy).toBeDefined();
  expect(data.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.bowAccuracy).toEqualTypeOf<number>();
  expect(data.healthRegenerated).toBeDefined();
  expect(data.healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.healthRegenerated).toEqualTypeOf<number>();
  expect(data.goldenApplesEatan).toBeDefined();
  expect(data.goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.goldenApplesEatan).toEqualTypeOf<number>();
  expect(data.uhc).toBeDefined();
  expectTypeOf(data.uhc).toEqualTypeOf<DuelsUHC>();
  expectTypeOf(data.uhc.title).toEqualTypeOf<string>();
  expect(data.uhc.winstreak).toBeDefined();
  expect(data.uhc.winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.winstreak).toEqualTypeOf<number>();
  expect(data.uhc.bestWinstreak).toBeDefined();
  expect(data.uhc.bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.bestWinstreak).toEqualTypeOf<number>();
  expect(data.uhc.solo).toBeDefined();
  expectTypeOf(data.uhc.solo).toEqualTypeOf<DuelsGamemode>();
  expectTypeOf(data.uhc.solo.title).toEqualTypeOf<string>();
  expect(data.uhc.solo.winstreak).toBeDefined();
  expect(data.uhc.solo.winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.solo.winstreak).toEqualTypeOf<number>();
  expect(data.uhc.solo.bestWinstreak).toBeDefined();
  expect(data.uhc.solo.bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.solo.bestWinstreak).toEqualTypeOf<number>();
  expect(data.uhc.solo.kills).toBeDefined();
  expect(data.uhc.solo.kills).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.solo.kills).toEqualTypeOf<number>();
  expect(data.uhc.solo.deaths).toBeDefined();
  expect(data.uhc.solo.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.solo.deaths).toEqualTypeOf<number>();
  expect(data.uhc.solo.KDRatio).toBeDefined();
  expect(data.uhc.solo.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.solo.KDRatio).toEqualTypeOf<number>();
  expect(data.uhc.solo.wins).toBeDefined();
  expect(data.uhc.solo.wins).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.solo.wins).toEqualTypeOf<number>();
  expect(data.uhc.solo.losses).toBeDefined();
  expect(data.uhc.solo.losses).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.solo.losses).toEqualTypeOf<number>();
  expect(data.uhc.solo.WLRatio).toBeDefined();
  expect(data.uhc.solo.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.solo.WLRatio).toEqualTypeOf<number>();
  expect(data.uhc.solo.playedGames).toBeDefined();
  expect(data.uhc.solo.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.solo.playedGames).toEqualTypeOf<number>();
  expect(data.uhc.solo.swings).toBeDefined();
  expect(data.uhc.solo.swings).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.solo.swings).toEqualTypeOf<number>();
  expect(data.uhc.solo.hits).toBeDefined();
  expect(data.uhc.solo.hits).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.solo.hits).toEqualTypeOf<number>();
  expect(data.uhc.solo.meleeAccuracy).toBeDefined();
  expect(data.uhc.solo.meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.solo.meleeAccuracy).toEqualTypeOf<number>();
  expect(data.uhc.solo.bowShots).toBeDefined();
  expect(data.uhc.solo.bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.solo.bowShots).toEqualTypeOf<number>();
  expect(data.uhc.solo.bowHits).toBeDefined();
  expect(data.uhc.solo.bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.solo.bowHits).toEqualTypeOf<number>();
  expect(data.uhc.solo.bowAccuracy).toBeDefined();
  expect(data.uhc.solo.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.solo.bowAccuracy).toEqualTypeOf<number>();
  expect(data.uhc.solo.blocksPlaced).toBeDefined();
  expect(data.uhc.solo.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.solo.blocksPlaced).toEqualTypeOf<number>();
  expect(data.uhc.solo.healthRegenerated).toBeDefined();
  expect(data.uhc.solo.healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.solo.healthRegenerated).toEqualTypeOf<number>();
  expect(data.uhc.solo.goldenApplesEatan).toBeDefined();
  expect(data.uhc.solo.goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.solo.goldenApplesEatan).toEqualTypeOf<number>();
  expect(data.uhc.doubles).toBeDefined();
  expectTypeOf(data.uhc.doubles).toEqualTypeOf<DuelsGamemode>();
  expectTypeOf(data.uhc.doubles.title).toEqualTypeOf<string>();
  expect(data.uhc.doubles.winstreak).toBeDefined();
  expect(data.uhc.doubles.winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.doubles.winstreak).toEqualTypeOf<number>();
  expect(data.uhc.doubles.bestWinstreak).toBeDefined();
  expect(data.uhc.doubles.bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.doubles.bestWinstreak).toEqualTypeOf<number>();
  expect(data.uhc.doubles.kills).toBeDefined();
  expect(data.uhc.doubles.kills).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.doubles.kills).toEqualTypeOf<number>();
  expect(data.uhc.doubles.deaths).toBeDefined();
  expect(data.uhc.doubles.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.doubles.deaths).toEqualTypeOf<number>();
  expect(data.uhc.doubles.KDRatio).toBeDefined();
  expect(data.uhc.doubles.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.doubles.KDRatio).toEqualTypeOf<number>();
  expect(data.uhc.doubles.wins).toBeDefined();
  expect(data.uhc.doubles.wins).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.doubles.wins).toEqualTypeOf<number>();
  expect(data.uhc.doubles.losses).toBeDefined();
  expect(data.uhc.doubles.losses).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.doubles.losses).toEqualTypeOf<number>();
  expect(data.uhc.doubles.WLRatio).toBeDefined();
  expect(data.uhc.doubles.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.doubles.WLRatio).toEqualTypeOf<number>();
  expect(data.uhc.doubles.playedGames).toBeDefined();
  expect(data.uhc.doubles.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.doubles.playedGames).toEqualTypeOf<number>();
  expect(data.uhc.doubles.swings).toBeDefined();
  expect(data.uhc.doubles.swings).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.doubles.swings).toEqualTypeOf<number>();
  expect(data.uhc.doubles.hits).toBeDefined();
  expect(data.uhc.doubles.hits).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.doubles.hits).toEqualTypeOf<number>();
  expect(data.uhc.doubles.meleeAccuracy).toBeDefined();
  expect(data.uhc.doubles.meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.doubles.meleeAccuracy).toEqualTypeOf<number>();
  expect(data.uhc.doubles.bowShots).toBeDefined();
  expect(data.uhc.doubles.bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.doubles.bowShots).toEqualTypeOf<number>();
  expect(data.uhc.doubles.bowHits).toBeDefined();
  expect(data.uhc.doubles.bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.doubles.bowHits).toEqualTypeOf<number>();
  expect(data.uhc.doubles.bowAccuracy).toBeDefined();
  expect(data.uhc.doubles.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.doubles.bowAccuracy).toEqualTypeOf<number>();
  expect(data.uhc.doubles.blocksPlaced).toBeDefined();
  expect(data.uhc.doubles.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.doubles.blocksPlaced).toEqualTypeOf<number>();
  expect(data.uhc.doubles.healthRegenerated).toBeDefined();
  expect(data.uhc.doubles.healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.doubles.healthRegenerated).toEqualTypeOf<number>();
  expect(data.uhc.doubles.goldenApplesEatan).toBeDefined();
  expect(data.uhc.doubles.goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.doubles.goldenApplesEatan).toEqualTypeOf<number>();
  expect(data.uhc.fours).toBeDefined();
  expectTypeOf(data.uhc.fours).toEqualTypeOf<DuelsGamemode>();
  expectTypeOf(data.uhc.fours.title).toEqualTypeOf<string>();
  expect(data.uhc.fours.winstreak).toBeDefined();
  expect(data.uhc.fours.winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.fours.winstreak).toEqualTypeOf<number>();
  expect(data.uhc.fours.bestWinstreak).toBeDefined();
  expect(data.uhc.fours.bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.fours.bestWinstreak).toEqualTypeOf<number>();
  expect(data.uhc.fours.kills).toBeDefined();
  expect(data.uhc.fours.kills).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.fours.kills).toEqualTypeOf<number>();
  expect(data.uhc.fours.deaths).toBeDefined();
  expect(data.uhc.fours.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.fours.deaths).toEqualTypeOf<number>();
  expect(data.uhc.fours.KDRatio).toBeDefined();
  expect(data.uhc.fours.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.fours.KDRatio).toEqualTypeOf<number>();
  expect(data.uhc.fours.wins).toBeDefined();
  expect(data.uhc.fours.wins).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.fours.wins).toEqualTypeOf<number>();
  expect(data.uhc.fours.losses).toBeDefined();
  expect(data.uhc.fours.losses).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.fours.losses).toEqualTypeOf<number>();
  expect(data.uhc.fours.WLRatio).toBeDefined();
  expect(data.uhc.fours.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.fours.WLRatio).toEqualTypeOf<number>();
  expect(data.uhc.fours.playedGames).toBeDefined();
  expect(data.uhc.fours.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.fours.playedGames).toEqualTypeOf<number>();
  expect(data.uhc.fours.swings).toBeDefined();
  expect(data.uhc.fours.swings).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.fours.swings).toEqualTypeOf<number>();
  expect(data.uhc.fours.hits).toBeDefined();
  expect(data.uhc.fours.hits).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.fours.hits).toEqualTypeOf<number>();
  expect(data.uhc.fours.meleeAccuracy).toBeDefined();
  expect(data.uhc.fours.meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.fours.meleeAccuracy).toEqualTypeOf<number>();
  expect(data.uhc.fours.bowShots).toBeDefined();
  expect(data.uhc.fours.bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.fours.bowShots).toEqualTypeOf<number>();
  expect(data.uhc.fours.bowHits).toBeDefined();
  expect(data.uhc.fours.bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.fours.bowHits).toEqualTypeOf<number>();
  expect(data.uhc.fours.bowAccuracy).toBeDefined();
  expect(data.uhc.fours.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.fours.bowAccuracy).toEqualTypeOf<number>();
  expect(data.uhc.fours.blocksPlaced).toBeDefined();
  expect(data.uhc.fours.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.fours.blocksPlaced).toEqualTypeOf<number>();
  expect(data.uhc.fours.healthRegenerated).toBeDefined();
  expect(data.uhc.fours.healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.fours.healthRegenerated).toEqualTypeOf<number>();
  expect(data.uhc.fours.goldenApplesEatan).toBeDefined();
  expect(data.uhc.fours.goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.fours.goldenApplesEatan).toEqualTypeOf<number>();
  expect(data.uhc.deathmatch).toBeDefined();
  expectTypeOf(data.uhc.deathmatch).toEqualTypeOf<DuelsGamemode>();
  expectTypeOf(data.uhc.deathmatch.title).toEqualTypeOf<string>();
  expect(data.uhc.deathmatch.winstreak).toBeDefined();
  expect(data.uhc.deathmatch.winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.deathmatch.winstreak).toEqualTypeOf<number>();
  expect(data.uhc.deathmatch.bestWinstreak).toBeDefined();
  expect(data.uhc.deathmatch.bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.deathmatch.bestWinstreak).toEqualTypeOf<number>();
  expect(data.uhc.deathmatch.kills).toBeDefined();
  expect(data.uhc.deathmatch.kills).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.deathmatch.kills).toEqualTypeOf<number>();
  expect(data.uhc.deathmatch.deaths).toBeDefined();
  expect(data.uhc.deathmatch.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.deathmatch.deaths).toEqualTypeOf<number>();
  expect(data.uhc.deathmatch.KDRatio).toBeDefined();
  expect(data.uhc.deathmatch.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.deathmatch.KDRatio).toEqualTypeOf<number>();
  expect(data.uhc.deathmatch.wins).toBeDefined();
  expect(data.uhc.deathmatch.wins).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.deathmatch.wins).toEqualTypeOf<number>();
  expect(data.uhc.deathmatch.losses).toBeDefined();
  expect(data.uhc.deathmatch.losses).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.deathmatch.losses).toEqualTypeOf<number>();
  expect(data.uhc.deathmatch.WLRatio).toBeDefined();
  expect(data.uhc.deathmatch.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.deathmatch.WLRatio).toEqualTypeOf<number>();
  expect(data.uhc.deathmatch.playedGames).toBeDefined();
  expect(data.uhc.deathmatch.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.deathmatch.playedGames).toEqualTypeOf<number>();
  expect(data.uhc.deathmatch.swings).toBeDefined();
  expect(data.uhc.deathmatch.swings).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.deathmatch.swings).toEqualTypeOf<number>();
  expect(data.uhc.deathmatch.hits).toBeDefined();
  expect(data.uhc.deathmatch.hits).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.deathmatch.hits).toEqualTypeOf<number>();
  expect(data.uhc.deathmatch.meleeAccuracy).toBeDefined();
  expect(data.uhc.deathmatch.meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.deathmatch.meleeAccuracy).toEqualTypeOf<number>();
  expect(data.uhc.deathmatch.bowShots).toBeDefined();
  expect(data.uhc.deathmatch.bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.deathmatch.bowShots).toEqualTypeOf<number>();
  expect(data.uhc.deathmatch.bowHits).toBeDefined();
  expect(data.uhc.deathmatch.bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.deathmatch.bowHits).toEqualTypeOf<number>();
  expect(data.uhc.deathmatch.bowAccuracy).toBeDefined();
  expect(data.uhc.deathmatch.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.deathmatch.bowAccuracy).toEqualTypeOf<number>();
  expect(data.uhc.deathmatch.blocksPlaced).toBeDefined();
  expect(data.uhc.deathmatch.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.deathmatch.blocksPlaced).toEqualTypeOf<number>();
  expect(data.uhc.deathmatch.healthRegenerated).toBeDefined();
  expect(data.uhc.deathmatch.healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.deathmatch.healthRegenerated).toEqualTypeOf<number>();
  expect(data.uhc.deathmatch.goldenApplesEatan).toBeDefined();
  expect(data.uhc.deathmatch.goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.deathmatch.goldenApplesEatan).toEqualTypeOf<number>();
  expect(data.uhc.kills).toBeDefined();
  expect(data.uhc.kills).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.kills).toEqualTypeOf<number>();
  expect(data.uhc.deaths).toBeDefined();
  expect(data.uhc.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.deaths).toEqualTypeOf<number>();
  expect(data.uhc.KDRatio).toBeDefined();
  expect(data.uhc.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.KDRatio).toEqualTypeOf<number>();
  expect(data.uhc.wins).toBeDefined();
  expect(data.uhc.wins).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.wins).toEqualTypeOf<number>();
  expect(data.uhc.losses).toBeDefined();
  expect(data.uhc.losses).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.losses).toEqualTypeOf<number>();
  expect(data.uhc.WLRatio).toBeDefined();
  expect(data.uhc.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.WLRatio).toEqualTypeOf<number>();
  expect(data.uhc.playedGames).toBeDefined();
  expect(data.uhc.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.playedGames).toEqualTypeOf<number>();
  expect(data.uhc.swings).toBeDefined();
  expect(data.uhc.swings).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.swings).toEqualTypeOf<number>();
  expect(data.uhc.hits).toBeDefined();
  expect(data.uhc.hits).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.hits).toEqualTypeOf<number>();
  expect(data.uhc.meleeAccuracy).toBeDefined();
  expect(data.uhc.meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.meleeAccuracy).toEqualTypeOf<number>();
  expect(data.uhc.bowShots).toBeDefined();
  expect(data.uhc.bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.bowShots).toEqualTypeOf<number>();
  expect(data.uhc.bowHits).toBeDefined();
  expect(data.uhc.bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.bowHits).toEqualTypeOf<number>();
  expect(data.uhc.bowAccuracy).toBeDefined();
  expect(data.uhc.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.bowAccuracy).toEqualTypeOf<number>();
  expect(data.uhc.blocksPlaced).toBeDefined();
  expect(data.uhc.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.blocksPlaced).toEqualTypeOf<number>();
  expect(data.uhc.healthRegenerated).toBeDefined();
  expect(data.uhc.healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.healthRegenerated).toEqualTypeOf<number>();
  expect(data.uhc.goldenApplesEatan).toBeDefined();
  expect(data.uhc.goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.uhc.goldenApplesEatan).toEqualTypeOf<number>();
  expect(data.skywars).toBeDefined();
  expectTypeOf(data.skywars).toEqualTypeOf<DuelsSkyWars>();
  expect(data.skywars.title).toBeDefined();
  expectTypeOf(data.skywars.title).toEqualTypeOf<string>();
  expect(data.skywars.winstreak).toBeDefined();
  expect(data.skywars.winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.winstreak).toEqualTypeOf<number>();
  expect(data.skywars.bestWinstreak).toBeDefined();
  expect(data.skywars.bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.bestWinstreak).toEqualTypeOf<number>();
  expect(data.skywars.solo).toBeDefined();
  expectTypeOf(data.skywars.solo).toEqualTypeOf<DuelsGamemode>();
  expect(data.skywars.solo.title).toBeDefined();
  expectTypeOf(data.skywars.solo.title).toEqualTypeOf<string>();
  expect(data.skywars.solo.winstreak).toBeDefined();
  expect(data.skywars.solo.winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.solo.winstreak).toEqualTypeOf<number>();
  expect(data.skywars.solo.bestWinstreak).toBeDefined();
  expect(data.skywars.solo.bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.solo.bestWinstreak).toEqualTypeOf<number>();
  expect(data.skywars.solo.kills).toBeDefined();
  expect(data.skywars.solo.kills).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.solo.kills).toEqualTypeOf<number>();
  expect(data.skywars.solo.deaths).toBeDefined();
  expect(data.skywars.solo.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.solo.deaths).toEqualTypeOf<number>();
  expect(data.skywars.solo.KDRatio).toBeDefined();
  expect(data.skywars.solo.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.solo.KDRatio).toEqualTypeOf<number>();
  expect(data.skywars.solo.wins).toBeDefined();
  expect(data.skywars.solo.wins).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.solo.wins).toEqualTypeOf<number>();
  expect(data.skywars.solo.losses).toBeDefined();
  expect(data.skywars.solo.losses).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.solo.losses).toEqualTypeOf<number>();
  expect(data.skywars.solo.WLRatio).toBeDefined();
  expect(data.skywars.solo.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.solo.WLRatio).toEqualTypeOf<number>();
  expect(data.skywars.solo.playedGames).toBeDefined();
  expect(data.skywars.solo.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.solo.playedGames).toEqualTypeOf<number>();
  expect(data.skywars.solo.swings).toBeDefined();
  expect(data.skywars.solo.swings).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.solo.swings).toEqualTypeOf<number>();
  expect(data.skywars.solo.hits).toBeDefined();
  expect(data.skywars.solo.hits).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.solo.hits).toEqualTypeOf<number>();
  expect(data.skywars.solo.meleeAccuracy).toBeDefined();
  expect(data.skywars.solo.meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.solo.meleeAccuracy).toEqualTypeOf<number>();
  expect(data.skywars.solo.bowShots).toBeDefined();
  expect(data.skywars.solo.bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.solo.bowShots).toEqualTypeOf<number>();
  expect(data.skywars.solo.bowHits).toBeDefined();
  expect(data.skywars.solo.bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.solo.bowHits).toEqualTypeOf<number>();
  expect(data.skywars.solo.bowAccuracy).toBeDefined();
  expect(data.skywars.solo.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.solo.bowAccuracy).toEqualTypeOf<number>();
  expect(data.skywars.solo.blocksPlaced).toBeDefined();
  expect(data.skywars.solo.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.solo.blocksPlaced).toEqualTypeOf<number>();
  expect(data.skywars.solo.healthRegenerated).toBeDefined();
  expect(data.skywars.solo.healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.solo.healthRegenerated).toEqualTypeOf<number>();
  expect(data.skywars.solo.goldenApplesEatan).toBeDefined();
  expect(data.skywars.solo.goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.solo.goldenApplesEatan).toEqualTypeOf<number>();
  expect(data.skywars.doubles).toBeDefined();
  expectTypeOf(data.skywars.doubles).toEqualTypeOf<DuelsGamemode>();
  expect(data.skywars.doubles.title).toBeDefined();
  expectTypeOf(data.skywars.doubles.title).toEqualTypeOf<string>();
  expect(data.skywars.doubles.winstreak).toBeDefined();
  expect(data.skywars.doubles.winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.doubles.winstreak).toEqualTypeOf<number>();
  expect(data.skywars.doubles.bestWinstreak).toBeDefined();
  expect(data.skywars.doubles.bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.doubles.bestWinstreak).toEqualTypeOf<number>();
  expect(data.skywars.doubles.kills).toBeDefined();
  expect(data.skywars.doubles.kills).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.doubles.kills).toEqualTypeOf<number>();
  expect(data.skywars.doubles.deaths).toBeDefined();
  expect(data.skywars.doubles.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.doubles.deaths).toEqualTypeOf<number>();
  expect(data.skywars.doubles.KDRatio).toBeDefined();
  expect(data.skywars.doubles.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.doubles.KDRatio).toEqualTypeOf<number>();
  expect(data.skywars.doubles.wins).toBeDefined();
  expect(data.skywars.doubles.wins).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.doubles.wins).toEqualTypeOf<number>();
  expect(data.skywars.doubles.losses).toBeDefined();
  expect(data.skywars.doubles.losses).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.doubles.losses).toEqualTypeOf<number>();
  expect(data.skywars.doubles.WLRatio).toBeDefined();
  expect(data.skywars.doubles.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.doubles.WLRatio).toEqualTypeOf<number>();
  expect(data.skywars.doubles.playedGames).toBeDefined();
  expect(data.skywars.doubles.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.doubles.playedGames).toEqualTypeOf<number>();
  expect(data.skywars.doubles.swings).toBeDefined();
  expect(data.skywars.doubles.swings).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.doubles.swings).toEqualTypeOf<number>();
  expect(data.skywars.doubles.hits).toBeDefined();
  expect(data.skywars.doubles.hits).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.doubles.hits).toEqualTypeOf<number>();
  expect(data.skywars.doubles.meleeAccuracy).toBeDefined();
  expect(data.skywars.doubles.meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.doubles.meleeAccuracy).toEqualTypeOf<number>();
  expect(data.skywars.doubles.bowShots).toBeDefined();
  expect(data.skywars.doubles.bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.doubles.bowShots).toEqualTypeOf<number>();
  expect(data.skywars.doubles.bowHits).toBeDefined();
  expect(data.skywars.doubles.bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.doubles.bowHits).toEqualTypeOf<number>();
  expect(data.skywars.doubles.bowAccuracy).toBeDefined();
  expect(data.skywars.doubles.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.doubles.bowAccuracy).toEqualTypeOf<number>();
  expect(data.skywars.doubles.blocksPlaced).toBeDefined();
  expect(data.skywars.doubles.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.doubles.blocksPlaced).toEqualTypeOf<number>();
  expect(data.skywars.doubles.healthRegenerated).toBeDefined();
  expect(data.skywars.doubles.healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.doubles.healthRegenerated).toEqualTypeOf<number>();
  expect(data.skywars.doubles.goldenApplesEatan).toBeDefined();
  expect(data.skywars.doubles.goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.doubles.goldenApplesEatan).toEqualTypeOf<number>();
  expect(data.skywars.kills).toBeDefined();
  expect(data.skywars.kills).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.kills).toEqualTypeOf<number>();
  expect(data.skywars.deaths).toBeDefined();
  expect(data.skywars.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.deaths).toEqualTypeOf<number>();
  expect(data.skywars.KDRatio).toBeDefined();
  expect(data.skywars.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.KDRatio).toEqualTypeOf<number>();
  expect(data.skywars.wins).toBeDefined();
  expect(data.skywars.wins).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.wins).toEqualTypeOf<number>();
  expect(data.skywars.losses).toBeDefined();
  expect(data.skywars.losses).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.losses).toEqualTypeOf<number>();
  expect(data.skywars.WLRatio).toBeDefined();
  expect(data.skywars.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.WLRatio).toEqualTypeOf<number>();
  expect(data.skywars.playedGames).toBeDefined();
  expect(data.skywars.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.playedGames).toEqualTypeOf<number>();
  expect(data.skywars.swings).toBeDefined();
  expect(data.skywars.swings).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.swings).toEqualTypeOf<number>();
  expect(data.skywars.hits).toBeDefined();
  expect(data.skywars.hits).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.hits).toEqualTypeOf<number>();
  expect(data.skywars.meleeAccuracy).toBeDefined();
  expect(data.skywars.meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.meleeAccuracy).toEqualTypeOf<number>();
  expect(data.skywars.bowShots).toBeDefined();
  expect(data.skywars.bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.bowShots).toEqualTypeOf<number>();
  expect(data.skywars.bowHits).toBeDefined();
  expect(data.skywars.bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.bowHits).toEqualTypeOf<number>();
  expect(data.skywars.bowAccuracy).toBeDefined();
  expect(data.skywars.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.bowAccuracy).toEqualTypeOf<number>();
  expect(data.skywars.blocksPlaced).toBeDefined();
  expect(data.skywars.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.blocksPlaced).toEqualTypeOf<number>();
  expect(data.skywars.healthRegenerated).toBeDefined();
  expect(data.skywars.healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.healthRegenerated).toEqualTypeOf<number>();
  expect(data.skywars.goldenApplesEatan).toBeDefined();
  expect(data.skywars.goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.skywars.goldenApplesEatan).toEqualTypeOf<number>();
  expect(data.megawalls).toBeDefined();
  expectTypeOf(data.megawalls).toEqualTypeOf<DuelsMegaWalls>();
  expect(data.megawalls.title).toBeDefined();
  expectTypeOf(data.megawalls.title).toEqualTypeOf<string>();
  expect(data.megawalls.winstreak).toBeDefined();
  expect(data.megawalls.winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.winstreak).toEqualTypeOf<number>();
  expect(data.megawalls.bestWinstreak).toBeDefined();
  expect(data.megawalls.bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.bestWinstreak).toEqualTypeOf<number>();
  expect(data.megawalls.solo).toBeDefined();
  expectTypeOf(data.megawalls.solo).toEqualTypeOf<DuelsGamemode>();
  expect(data.megawalls.solo.title).toBeDefined();
  expectTypeOf(data.megawalls.solo.title).toEqualTypeOf<string>();
  expect(data.megawalls.solo.winstreak).toBeDefined();
  expect(data.megawalls.solo.winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.solo.winstreak).toEqualTypeOf<number>();
  expect(data.megawalls.solo.bestWinstreak).toBeDefined();
  expect(data.megawalls.solo.bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.solo.bestWinstreak).toEqualTypeOf<number>();
  expect(data.megawalls.solo.kills).toBeDefined();
  expect(data.megawalls.solo.kills).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.solo.kills).toEqualTypeOf<number>();
  expect(data.megawalls.solo.deaths).toBeDefined();
  expect(data.megawalls.solo.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.solo.deaths).toEqualTypeOf<number>();
  expect(data.megawalls.solo.KDRatio).toBeDefined();
  expect(data.megawalls.solo.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.solo.KDRatio).toEqualTypeOf<number>();
  expect(data.megawalls.solo.wins).toBeDefined();
  expect(data.megawalls.solo.wins).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.solo.wins).toEqualTypeOf<number>();
  expect(data.megawalls.solo.losses).toBeDefined();
  expect(data.megawalls.solo.losses).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.solo.losses).toEqualTypeOf<number>();
  expect(data.megawalls.solo.WLRatio).toBeDefined();
  expect(data.megawalls.solo.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.solo.WLRatio).toEqualTypeOf<number>();
  expect(data.megawalls.solo.playedGames).toBeDefined();
  expect(data.megawalls.solo.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.solo.playedGames).toEqualTypeOf<number>();
  expect(data.megawalls.solo.swings).toBeDefined();
  expect(data.megawalls.solo.swings).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.solo.swings).toEqualTypeOf<number>();
  expect(data.megawalls.solo.hits).toBeDefined();
  expect(data.megawalls.solo.hits).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.solo.hits).toEqualTypeOf<number>();
  expect(data.megawalls.solo.meleeAccuracy).toBeDefined();
  expect(data.megawalls.solo.meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.solo.meleeAccuracy).toEqualTypeOf<number>();
  expect(data.megawalls.solo.bowShots).toBeDefined();
  expect(data.megawalls.solo.bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.solo.bowShots).toEqualTypeOf<number>();
  expect(data.megawalls.solo.bowHits).toBeDefined();
  expect(data.megawalls.solo.bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.solo.bowHits).toEqualTypeOf<number>();
  expect(data.megawalls.solo.bowAccuracy).toBeDefined();
  expect(data.megawalls.solo.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.solo.bowAccuracy).toEqualTypeOf<number>();
  expect(data.megawalls.solo.blocksPlaced).toBeDefined();
  expect(data.megawalls.solo.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.solo.blocksPlaced).toEqualTypeOf<number>();
  expect(data.megawalls.solo.healthRegenerated).toBeDefined();
  expect(data.megawalls.solo.healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.solo.healthRegenerated).toEqualTypeOf<number>();
  expect(data.megawalls.solo.goldenApplesEatan).toBeDefined();
  expect(data.megawalls.solo.goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.solo.goldenApplesEatan).toEqualTypeOf<number>();
  expect(data.megawalls.doubles).toBeDefined();
  expectTypeOf(data.megawalls.doubles).toEqualTypeOf<DuelsGamemode>();
  expect(data.megawalls.doubles.title).toBeDefined();
  expectTypeOf(data.megawalls.doubles.title).toEqualTypeOf<string>();
  expect(data.megawalls.doubles.winstreak).toBeDefined();
  expect(data.megawalls.doubles.winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.doubles.winstreak).toEqualTypeOf<number>();
  expect(data.megawalls.doubles.bestWinstreak).toBeDefined();
  expect(data.megawalls.doubles.bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.doubles.bestWinstreak).toEqualTypeOf<number>();
  expect(data.megawalls.doubles.kills).toBeDefined();
  expect(data.megawalls.doubles.kills).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.doubles.kills).toEqualTypeOf<number>();
  expect(data.megawalls.doubles.deaths).toBeDefined();
  expect(data.megawalls.doubles.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.doubles.deaths).toEqualTypeOf<number>();
  expect(data.megawalls.doubles.KDRatio).toBeDefined();
  expect(data.megawalls.doubles.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.doubles.KDRatio).toEqualTypeOf<number>();
  expect(data.megawalls.doubles.wins).toBeDefined();
  expect(data.megawalls.doubles.wins).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.doubles.wins).toEqualTypeOf<number>();
  expect(data.megawalls.doubles.losses).toBeDefined();
  expect(data.megawalls.doubles.losses).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.doubles.losses).toEqualTypeOf<number>();
  expect(data.megawalls.doubles.WLRatio).toBeDefined();
  expect(data.megawalls.doubles.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.doubles.WLRatio).toEqualTypeOf<number>();
  expect(data.megawalls.doubles.playedGames).toBeDefined();
  expect(data.megawalls.doubles.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.doubles.playedGames).toEqualTypeOf<number>();
  expect(data.megawalls.doubles.swings).toBeDefined();
  expect(data.megawalls.doubles.swings).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.doubles.swings).toEqualTypeOf<number>();
  expect(data.megawalls.doubles.hits).toBeDefined();
  expect(data.megawalls.doubles.hits).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.doubles.hits).toEqualTypeOf<number>();
  expect(data.megawalls.doubles.meleeAccuracy).toBeDefined();
  expect(data.megawalls.doubles.meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.doubles.meleeAccuracy).toEqualTypeOf<number>();
  expect(data.megawalls.doubles.bowShots).toBeDefined();
  expect(data.megawalls.doubles.bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.doubles.bowShots).toEqualTypeOf<number>();
  expect(data.megawalls.doubles.bowHits).toBeDefined();
  expect(data.megawalls.doubles.bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.doubles.bowHits).toEqualTypeOf<number>();
  expect(data.megawalls.doubles.bowAccuracy).toBeDefined();
  expect(data.megawalls.doubles.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.doubles.bowAccuracy).toEqualTypeOf<number>();
  expect(data.megawalls.doubles.blocksPlaced).toBeDefined();
  expect(data.megawalls.doubles.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.doubles.blocksPlaced).toEqualTypeOf<number>();
  expect(data.megawalls.doubles.healthRegenerated).toBeDefined();
  expect(data.megawalls.doubles.healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.doubles.healthRegenerated).toEqualTypeOf<number>();
  expect(data.megawalls.doubles.goldenApplesEatan).toBeDefined();
  expect(data.megawalls.doubles.goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.doubles.goldenApplesEatan).toEqualTypeOf<number>();
  expect(data.megawalls.kills).toBeDefined();
  expect(data.megawalls.kills).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.kills).toEqualTypeOf<number>();
  expect(data.megawalls.deaths).toBeDefined();
  expect(data.megawalls.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.deaths).toEqualTypeOf<number>();
  expect(data.megawalls.KDRatio).toBeDefined();
  expect(data.megawalls.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.KDRatio).toEqualTypeOf<number>();
  expect(data.megawalls.wins).toBeDefined();
  expect(data.megawalls.wins).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.wins).toEqualTypeOf<number>();
  expect(data.megawalls.losses).toBeDefined();
  expect(data.megawalls.losses).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.losses).toEqualTypeOf<number>();
  expect(data.megawalls.WLRatio).toBeDefined();
  expect(data.megawalls.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.WLRatio).toEqualTypeOf<number>();
  expect(data.megawalls.playedGames).toBeDefined();
  expect(data.megawalls.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.playedGames).toEqualTypeOf<number>();
  expect(data.megawalls.swings).toBeDefined();
  expect(data.megawalls.swings).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.swings).toEqualTypeOf<number>();
  expect(data.megawalls.hits).toBeDefined();
  expect(data.megawalls.hits).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.hits).toEqualTypeOf<number>();
  expect(data.megawalls.meleeAccuracy).toBeDefined();
  expect(data.megawalls.meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.meleeAccuracy).toEqualTypeOf<number>();
  expect(data.megawalls.bowShots).toBeDefined();
  expect(data.megawalls.bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.bowShots).toEqualTypeOf<number>();
  expect(data.megawalls.bowHits).toBeDefined();
  expect(data.megawalls.bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.bowHits).toEqualTypeOf<number>();
  expect(data.megawalls.bowAccuracy).toBeDefined();
  expect(data.megawalls.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.bowAccuracy).toEqualTypeOf<number>();
  expect(data.megawalls.blocksPlaced).toBeDefined();
  expect(data.megawalls.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.blocksPlaced).toEqualTypeOf<number>();
  expect(data.megawalls.healthRegenerated).toBeDefined();
  expect(data.megawalls.healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.healthRegenerated).toEqualTypeOf<number>();
  expect(data.megawalls.goldenApplesEatan).toBeDefined();
  expect(data.megawalls.goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.megawalls.goldenApplesEatan).toEqualTypeOf<number>();
  expect(data.blitz).toBeDefined();
  expectTypeOf(data.blitz).toEqualTypeOf<DuelsGamemode>();
  expectTypeOf(data.blitz.title).toEqualTypeOf<string>();
  expect(data.blitz.winstreak).toBeDefined();
  expect(data.blitz.winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.blitz.winstreak).toEqualTypeOf<number>();
  expect(data.blitz.bestWinstreak).toBeDefined();
  expect(data.blitz.bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.blitz.bestWinstreak).toEqualTypeOf<number>();
  expect(data.blitz.kills).toBeDefined();
  expect(data.blitz.kills).greaterThanOrEqual(0);
  expectTypeOf(data.blitz.kills).toEqualTypeOf<number>();
  expect(data.blitz.deaths).toBeDefined();
  expect(data.blitz.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.blitz.deaths).toEqualTypeOf<number>();
  expect(data.blitz.KDRatio).toBeDefined();
  expect(data.blitz.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.blitz.KDRatio).toEqualTypeOf<number>();
  expect(data.blitz.wins).toBeDefined();
  expect(data.blitz.wins).greaterThanOrEqual(0);
  expectTypeOf(data.blitz.wins).toEqualTypeOf<number>();
  expect(data.blitz.losses).toBeDefined();
  expect(data.blitz.losses).greaterThanOrEqual(0);
  expectTypeOf(data.blitz.losses).toEqualTypeOf<number>();
  expect(data.blitz.WLRatio).toBeDefined();
  expect(data.blitz.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.blitz.WLRatio).toEqualTypeOf<number>();
  expect(data.blitz.playedGames).toBeDefined();
  expect(data.blitz.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.blitz.playedGames).toEqualTypeOf<number>();
  expect(data.blitz.swings).toBeDefined();
  expect(data.blitz.swings).greaterThanOrEqual(0);
  expectTypeOf(data.blitz.swings).toEqualTypeOf<number>();
  expect(data.blitz.hits).toBeDefined();
  expect(data.blitz.hits).greaterThanOrEqual(0);
  expectTypeOf(data.blitz.hits).toEqualTypeOf<number>();
  expect(data.blitz.meleeAccuracy).toBeDefined();
  expect(data.blitz.meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.blitz.meleeAccuracy).toEqualTypeOf<number>();
  expect(data.blitz.bowShots).toBeDefined();
  expect(data.blitz.bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.blitz.bowShots).toEqualTypeOf<number>();
  expect(data.blitz.bowHits).toBeDefined();
  expect(data.blitz.bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.blitz.bowHits).toEqualTypeOf<number>();
  expect(data.blitz.bowAccuracy).toBeDefined();
  expect(data.blitz.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.blitz.bowAccuracy).toEqualTypeOf<number>();
  expect(data.blitz.blocksPlaced).toBeDefined();
  expect(data.blitz.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.blitz.blocksPlaced).toEqualTypeOf<number>();
  expect(data.blitz.healthRegenerated).toBeDefined();
  expect(data.blitz.healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.blitz.healthRegenerated).toEqualTypeOf<number>();
  expect(data.blitz.goldenApplesEatan).toBeDefined();
  expect(data.blitz.goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.blitz.goldenApplesEatan).toEqualTypeOf<number>();
  expect(data.op).toBeDefined();
  expectTypeOf(data.op).toEqualTypeOf<DuelsOP>();
  expect(data.op.title).toBeDefined();
  expectTypeOf(data.op.title).toEqualTypeOf<string>();
  expect(data.op.winstreak).toBeDefined();
  expect(data.op.winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.op.winstreak).toEqualTypeOf<number>();
  expect(data.op.bestWinstreak).toBeDefined();
  expect(data.op.bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.op.bestWinstreak).toEqualTypeOf<number>();
  expect(data.op.solo).toBeDefined();
  expectTypeOf(data.op.solo).toEqualTypeOf<DuelsGamemode>();
  expect(data.op.solo.title).toBeDefined();
  expectTypeOf(data.op.solo.title).toEqualTypeOf<string>();
  expect(data.op.solo.winstreak).toBeDefined();
  expect(data.op.solo.winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.op.solo.winstreak).toEqualTypeOf<number>();
  expect(data.op.solo.bestWinstreak).toBeDefined();
  expect(data.op.solo.bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.op.solo.bestWinstreak).toEqualTypeOf<number>();
  expect(data.op.solo.kills).toBeDefined();
  expect(data.op.solo.kills).greaterThanOrEqual(0);
  expectTypeOf(data.op.solo.kills).toEqualTypeOf<number>();
  expect(data.op.solo.deaths).toBeDefined();
  expect(data.op.solo.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.op.solo.deaths).toEqualTypeOf<number>();
  expect(data.op.solo.KDRatio).toBeDefined();
  expect(data.op.solo.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.op.solo.KDRatio).toEqualTypeOf<number>();
  expect(data.op.solo.wins).toBeDefined();
  expect(data.op.solo.wins).greaterThanOrEqual(0);
  expectTypeOf(data.op.solo.wins).toEqualTypeOf<number>();
  expect(data.op.solo.losses).toBeDefined();
  expect(data.op.solo.losses).greaterThanOrEqual(0);
  expectTypeOf(data.op.solo.losses).toEqualTypeOf<number>();
  expect(data.op.solo.WLRatio).toBeDefined();
  expect(data.op.solo.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.op.solo.WLRatio).toEqualTypeOf<number>();
  expect(data.op.solo.playedGames).toBeDefined();
  expect(data.op.solo.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.op.solo.playedGames).toEqualTypeOf<number>();
  expect(data.op.solo.swings).toBeDefined();
  expect(data.op.solo.swings).greaterThanOrEqual(0);
  expectTypeOf(data.op.solo.swings).toEqualTypeOf<number>();
  expect(data.op.solo.hits).toBeDefined();
  expect(data.op.solo.hits).greaterThanOrEqual(0);
  expectTypeOf(data.op.solo.hits).toEqualTypeOf<number>();
  expect(data.op.solo.meleeAccuracy).toBeDefined();
  expect(data.op.solo.meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.op.solo.meleeAccuracy).toEqualTypeOf<number>();
  expect(data.op.solo.bowShots).toBeDefined();
  expect(data.op.solo.bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.op.solo.bowShots).toEqualTypeOf<number>();
  expect(data.op.solo.bowHits).toBeDefined();
  expect(data.op.solo.bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.op.solo.bowHits).toEqualTypeOf<number>();
  expect(data.op.solo.bowAccuracy).toBeDefined();
  expect(data.op.solo.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.op.solo.bowAccuracy).toEqualTypeOf<number>();
  expect(data.op.solo.blocksPlaced).toBeDefined();
  expect(data.op.solo.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.op.solo.blocksPlaced).toEqualTypeOf<number>();
  expect(data.op.solo.healthRegenerated).toBeDefined();
  expect(data.op.solo.healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.op.solo.healthRegenerated).toEqualTypeOf<number>();
  expect(data.op.solo.goldenApplesEatan).toBeDefined();
  expect(data.op.solo.goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.op.solo.goldenApplesEatan).toEqualTypeOf<number>();
  expect(data.op.doubles).toBeDefined();
  expectTypeOf(data.op.doubles).toEqualTypeOf<DuelsGamemode>();
  expect(data.op.doubles.title).toBeDefined();
  expectTypeOf(data.op.doubles.title).toEqualTypeOf<string>();
  expect(data.op.doubles.winstreak).toBeDefined();
  expect(data.op.doubles.winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.op.doubles.winstreak).toEqualTypeOf<number>();
  expect(data.op.doubles.bestWinstreak).toBeDefined();
  expect(data.op.doubles.bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.op.doubles.bestWinstreak).toEqualTypeOf<number>();
  expect(data.op.doubles.kills).toBeDefined();
  expect(data.op.doubles.kills).greaterThanOrEqual(0);
  expectTypeOf(data.op.doubles.kills).toEqualTypeOf<number>();
  expect(data.op.doubles.deaths).toBeDefined();
  expect(data.op.doubles.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.op.doubles.deaths).toEqualTypeOf<number>();
  expect(data.op.doubles.KDRatio).toBeDefined();
  expect(data.op.doubles.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.op.doubles.KDRatio).toEqualTypeOf<number>();
  expect(data.op.doubles.wins).toBeDefined();
  expect(data.op.doubles.wins).greaterThanOrEqual(0);
  expectTypeOf(data.op.doubles.wins).toEqualTypeOf<number>();
  expect(data.op.doubles.losses).toBeDefined();
  expect(data.op.doubles.losses).greaterThanOrEqual(0);
  expectTypeOf(data.op.doubles.losses).toEqualTypeOf<number>();
  expect(data.op.doubles.WLRatio).toBeDefined();
  expect(data.op.doubles.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.op.doubles.WLRatio).toEqualTypeOf<number>();
  expect(data.op.doubles.playedGames).toBeDefined();
  expect(data.op.doubles.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.op.doubles.playedGames).toEqualTypeOf<number>();
  expect(data.op.doubles.swings).toBeDefined();
  expect(data.op.doubles.swings).greaterThanOrEqual(0);
  expectTypeOf(data.op.doubles.swings).toEqualTypeOf<number>();
  expect(data.op.doubles.hits).toBeDefined();
  expect(data.op.doubles.hits).greaterThanOrEqual(0);
  expectTypeOf(data.op.doubles.hits).toEqualTypeOf<number>();
  expect(data.op.doubles.meleeAccuracy).toBeDefined();
  expect(data.op.doubles.meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.op.doubles.meleeAccuracy).toEqualTypeOf<number>();
  expect(data.op.doubles.bowShots).toBeDefined();
  expect(data.op.doubles.bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.op.doubles.bowShots).toEqualTypeOf<number>();
  expect(data.op.doubles.bowHits).toBeDefined();
  expect(data.op.doubles.bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.op.doubles.bowHits).toEqualTypeOf<number>();
  expect(data.op.doubles.bowAccuracy).toBeDefined();
  expect(data.op.doubles.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.op.doubles.bowAccuracy).toEqualTypeOf<number>();
  expect(data.op.doubles.blocksPlaced).toBeDefined();
  expect(data.op.doubles.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.op.doubles.blocksPlaced).toEqualTypeOf<number>();
  expect(data.op.doubles.healthRegenerated).toBeDefined();
  expect(data.op.doubles.healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.op.doubles.healthRegenerated).toEqualTypeOf<number>();
  expect(data.op.doubles.goldenApplesEatan).toBeDefined();
  expect(data.op.doubles.goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.op.doubles.goldenApplesEatan).toEqualTypeOf<number>();
  expect(data.op.kills).toBeDefined();
  expect(data.op.kills).greaterThanOrEqual(0);
  expectTypeOf(data.op.kills).toEqualTypeOf<number>();
  expect(data.op.deaths).toBeDefined();
  expect(data.op.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.op.deaths).toEqualTypeOf<number>();
  expect(data.op.KDRatio).toBeDefined();
  expect(data.op.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.op.KDRatio).toEqualTypeOf<number>();
  expect(data.op.wins).toBeDefined();
  expect(data.op.wins).greaterThanOrEqual(0);
  expectTypeOf(data.op.wins).toEqualTypeOf<number>();
  expect(data.op.losses).toBeDefined();
  expect(data.op.losses).greaterThanOrEqual(0);
  expectTypeOf(data.op.losses).toEqualTypeOf<number>();
  expect(data.op.WLRatio).toBeDefined();
  expect(data.op.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.op.WLRatio).toEqualTypeOf<number>();
  expect(data.op.playedGames).toBeDefined();
  expect(data.op.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.op.playedGames).toEqualTypeOf<number>();
  expect(data.op.swings).toBeDefined();
  expect(data.op.swings).greaterThanOrEqual(0);
  expectTypeOf(data.op.swings).toEqualTypeOf<number>();
  expect(data.op.hits).toBeDefined();
  expect(data.op.hits).greaterThanOrEqual(0);
  expectTypeOf(data.op.hits).toEqualTypeOf<number>();
  expect(data.op.meleeAccuracy).toBeDefined();
  expect(data.op.meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.op.meleeAccuracy).toEqualTypeOf<number>();
  expect(data.op.bowShots).toBeDefined();
  expect(data.op.bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.op.bowShots).toEqualTypeOf<number>();
  expect(data.op.bowHits).toBeDefined();
  expect(data.op.bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.op.bowHits).toEqualTypeOf<number>();
  expect(data.op.bowAccuracy).toBeDefined();
  expect(data.op.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.op.bowAccuracy).toEqualTypeOf<number>();
  expect(data.op.blocksPlaced).toBeDefined();
  expect(data.op.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.op.blocksPlaced).toEqualTypeOf<number>();
  expect(data.op.healthRegenerated).toBeDefined();
  expect(data.op.healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.op.healthRegenerated).toEqualTypeOf<number>();
  expect(data.op.goldenApplesEatan).toBeDefined();
  expect(data.op.goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.op.goldenApplesEatan).toEqualTypeOf<number>();
  expect(data.classic).toBeDefined();
  expectTypeOf(data.classic).toEqualTypeOf<DuelsGamemode>();
  expectTypeOf(data.classic.title).toEqualTypeOf<string>();
  expect(data.classic.winstreak).toBeDefined();
  expect(data.classic.winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.classic.winstreak).toEqualTypeOf<number>();
  expect(data.classic.bestWinstreak).toBeDefined();
  expect(data.classic.bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.classic.bestWinstreak).toEqualTypeOf<number>();
  expect(data.classic.kills).toBeDefined();
  expect(data.classic.kills).greaterThanOrEqual(0);
  expectTypeOf(data.classic.kills).toEqualTypeOf<number>();
  expect(data.classic.deaths).toBeDefined();
  expect(data.classic.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.classic.deaths).toEqualTypeOf<number>();
  expect(data.classic.KDRatio).toBeDefined();
  expect(data.classic.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.classic.KDRatio).toEqualTypeOf<number>();
  expect(data.classic.wins).toBeDefined();
  expect(data.classic.wins).greaterThanOrEqual(0);
  expectTypeOf(data.classic.wins).toEqualTypeOf<number>();
  expect(data.classic.losses).toBeDefined();
  expect(data.classic.losses).greaterThanOrEqual(0);
  expectTypeOf(data.classic.losses).toEqualTypeOf<number>();
  expect(data.classic.WLRatio).toBeDefined();
  expect(data.classic.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.classic.WLRatio).toEqualTypeOf<number>();
  expect(data.classic.playedGames).toBeDefined();
  expect(data.classic.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.classic.playedGames).toEqualTypeOf<number>();
  expect(data.classic.swings).toBeDefined();
  expect(data.classic.swings).greaterThanOrEqual(0);
  expectTypeOf(data.classic.swings).toEqualTypeOf<number>();
  expect(data.classic.hits).toBeDefined();
  expect(data.classic.hits).greaterThanOrEqual(0);
  expectTypeOf(data.classic.hits).toEqualTypeOf<number>();
  expect(data.classic.meleeAccuracy).toBeDefined();
  expect(data.classic.meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.classic.meleeAccuracy).toEqualTypeOf<number>();
  expect(data.classic.bowShots).toBeDefined();
  expect(data.classic.bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.classic.bowShots).toEqualTypeOf<number>();
  expect(data.classic.bowHits).toBeDefined();
  expect(data.classic.bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.classic.bowHits).toEqualTypeOf<number>();
  expect(data.classic.bowAccuracy).toBeDefined();
  expect(data.classic.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.classic.bowAccuracy).toEqualTypeOf<number>();
  expect(data.classic.blocksPlaced).toBeDefined();
  expect(data.classic.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.classic.blocksPlaced).toEqualTypeOf<number>();
  expect(data.classic.healthRegenerated).toBeDefined();
  expect(data.classic.healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.classic.healthRegenerated).toEqualTypeOf<number>();
  expect(data.classic.goldenApplesEatan).toBeDefined();
  expect(data.classic.goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.classic.goldenApplesEatan).toEqualTypeOf<number>();
  expect(data.bow).toBeDefined();
  expectTypeOf(data.bow).toEqualTypeOf<DuelsGamemode>();
  expectTypeOf(data.bow.title).toEqualTypeOf<string>();
  expect(data.bow.winstreak).toBeDefined();
  expect(data.bow.winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.bow.winstreak).toEqualTypeOf<number>();
  expect(data.bow.bestWinstreak).toBeDefined();
  expect(data.bow.bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.bow.bestWinstreak).toEqualTypeOf<number>();
  expect(data.bow.kills).toBeDefined();
  expect(data.bow.kills).greaterThanOrEqual(0);
  expectTypeOf(data.bow.kills).toEqualTypeOf<number>();
  expect(data.bow.deaths).toBeDefined();
  expect(data.bow.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.bow.deaths).toEqualTypeOf<number>();
  expect(data.bow.KDRatio).toBeDefined();
  expect(data.bow.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.bow.KDRatio).toEqualTypeOf<number>();
  expect(data.bow.wins).toBeDefined();
  expect(data.bow.wins).greaterThanOrEqual(0);
  expectTypeOf(data.bow.wins).toEqualTypeOf<number>();
  expect(data.bow.losses).toBeDefined();
  expect(data.bow.losses).greaterThanOrEqual(0);
  expectTypeOf(data.bow.losses).toEqualTypeOf<number>();
  expect(data.bow.WLRatio).toBeDefined();
  expect(data.bow.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.bow.WLRatio).toEqualTypeOf<number>();
  expect(data.bow.playedGames).toBeDefined();
  expect(data.bow.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.bow.playedGames).toEqualTypeOf<number>();
  expect(data.bow.swings).toBeDefined();
  expect(data.bow.swings).greaterThanOrEqual(0);
  expectTypeOf(data.bow.swings).toEqualTypeOf<number>();
  expect(data.bow.hits).toBeDefined();
  expect(data.bow.hits).greaterThanOrEqual(0);
  expectTypeOf(data.bow.hits).toEqualTypeOf<number>();
  expect(data.bow.meleeAccuracy).toBeDefined();
  expect(data.bow.meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.bow.meleeAccuracy).toEqualTypeOf<number>();
  expect(data.bow.bowShots).toBeDefined();
  expect(data.bow.bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.bow.bowShots).toEqualTypeOf<number>();
  expect(data.bow.bowHits).toBeDefined();
  expect(data.bow.bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.bow.bowHits).toEqualTypeOf<number>();
  expect(data.bow.bowAccuracy).toBeDefined();
  expect(data.bow.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.bow.bowAccuracy).toEqualTypeOf<number>();
  expect(data.bow.blocksPlaced).toBeDefined();
  expect(data.bow.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.bow.blocksPlaced).toEqualTypeOf<number>();
  expect(data.bow.healthRegenerated).toBeDefined();
  expect(data.bow.healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.bow.healthRegenerated).toEqualTypeOf<number>();
  expect(data.bow.goldenApplesEatan).toBeDefined();
  expect(data.bow.goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.bow.goldenApplesEatan).toEqualTypeOf<number>();
  expect(data.noDebuff).toBeDefined();
  expectTypeOf(data.noDebuff).toEqualTypeOf<DuelsGamemode>();
  expectTypeOf(data.noDebuff.title).toEqualTypeOf<string>();
  expect(data.noDebuff.winstreak).toBeDefined();
  expect(data.noDebuff.winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.noDebuff.winstreak).toEqualTypeOf<number>();
  expect(data.noDebuff.bestWinstreak).toBeDefined();
  expect(data.noDebuff.bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.noDebuff.bestWinstreak).toEqualTypeOf<number>();
  expect(data.noDebuff.kills).toBeDefined();
  expect(data.noDebuff.kills).greaterThanOrEqual(0);
  expectTypeOf(data.noDebuff.kills).toEqualTypeOf<number>();
  expect(data.noDebuff.deaths).toBeDefined();
  expect(data.noDebuff.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.noDebuff.deaths).toEqualTypeOf<number>();
  expect(data.noDebuff.KDRatio).toBeDefined();
  expect(data.noDebuff.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.noDebuff.KDRatio).toEqualTypeOf<number>();
  expect(data.noDebuff.wins).toBeDefined();
  expect(data.noDebuff.wins).greaterThanOrEqual(0);
  expectTypeOf(data.noDebuff.wins).toEqualTypeOf<number>();
  expect(data.noDebuff.losses).toBeDefined();
  expect(data.noDebuff.losses).greaterThanOrEqual(0);
  expectTypeOf(data.noDebuff.losses).toEqualTypeOf<number>();
  expect(data.noDebuff.WLRatio).toBeDefined();
  expect(data.noDebuff.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.noDebuff.WLRatio).toEqualTypeOf<number>();
  expect(data.noDebuff.playedGames).toBeDefined();
  expect(data.noDebuff.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.noDebuff.playedGames).toEqualTypeOf<number>();
  expect(data.noDebuff.swings).toBeDefined();
  expect(data.noDebuff.swings).greaterThanOrEqual(0);
  expectTypeOf(data.noDebuff.swings).toEqualTypeOf<number>();
  expect(data.noDebuff.hits).toBeDefined();
  expect(data.noDebuff.hits).greaterThanOrEqual(0);
  expectTypeOf(data.noDebuff.hits).toEqualTypeOf<number>();
  expect(data.noDebuff.meleeAccuracy).toBeDefined();
  expect(data.noDebuff.meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.noDebuff.meleeAccuracy).toEqualTypeOf<number>();
  expect(data.noDebuff.bowShots).toBeDefined();
  expect(data.noDebuff.bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.noDebuff.bowShots).toEqualTypeOf<number>();
  expect(data.noDebuff.bowHits).toBeDefined();
  expect(data.noDebuff.bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.noDebuff.bowHits).toEqualTypeOf<number>();
  expect(data.noDebuff.bowAccuracy).toBeDefined();
  expect(data.noDebuff.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.noDebuff.bowAccuracy).toEqualTypeOf<number>();
  expect(data.noDebuff.blocksPlaced).toBeDefined();
  expect(data.noDebuff.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.noDebuff.blocksPlaced).toEqualTypeOf<number>();
  expect(data.noDebuff.healthRegenerated).toBeDefined();
  expect(data.noDebuff.healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.noDebuff.healthRegenerated).toEqualTypeOf<number>();
  expect(data.noDebuff.goldenApplesEatan).toBeDefined();
  expect(data.noDebuff.goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.noDebuff.goldenApplesEatan).toEqualTypeOf<number>();
  expect(data.combo).toBeDefined();
  expectTypeOf(data.combo).toEqualTypeOf<DuelsGamemode>();
  expectTypeOf(data.combo.title).toEqualTypeOf<string>();
  expect(data.combo.winstreak).toBeDefined();
  expect(data.combo.winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.combo.winstreak).toEqualTypeOf<number>();
  expect(data.combo.bestWinstreak).toBeDefined();
  expect(data.combo.bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.combo.bestWinstreak).toEqualTypeOf<number>();
  expect(data.combo.kills).toBeDefined();
  expect(data.combo.kills).greaterThanOrEqual(0);
  expectTypeOf(data.combo.kills).toEqualTypeOf<number>();
  expect(data.combo.deaths).toBeDefined();
  expect(data.combo.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.combo.deaths).toEqualTypeOf<number>();
  expect(data.combo.KDRatio).toBeDefined();
  expect(data.combo.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.combo.KDRatio).toEqualTypeOf<number>();
  expect(data.combo.wins).toBeDefined();
  expect(data.combo.wins).greaterThanOrEqual(0);
  expectTypeOf(data.combo.wins).toEqualTypeOf<number>();
  expect(data.combo.losses).toBeDefined();
  expect(data.combo.losses).greaterThanOrEqual(0);
  expectTypeOf(data.combo.losses).toEqualTypeOf<number>();
  expect(data.combo.WLRatio).toBeDefined();
  expect(data.combo.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.combo.WLRatio).toEqualTypeOf<number>();
  expect(data.combo.playedGames).toBeDefined();
  expect(data.combo.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.combo.playedGames).toEqualTypeOf<number>();
  expect(data.combo.swings).toBeDefined();
  expect(data.combo.swings).greaterThanOrEqual(0);
  expectTypeOf(data.combo.swings).toEqualTypeOf<number>();
  expect(data.combo.hits).toBeDefined();
  expect(data.combo.hits).greaterThanOrEqual(0);
  expectTypeOf(data.combo.hits).toEqualTypeOf<number>();
  expect(data.combo.meleeAccuracy).toBeDefined();
  expect(data.combo.meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.combo.meleeAccuracy).toEqualTypeOf<number>();
  expect(data.combo.bowShots).toBeDefined();
  expect(data.combo.bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.combo.bowShots).toEqualTypeOf<number>();
  expect(data.combo.bowHits).toBeDefined();
  expect(data.combo.bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.combo.bowHits).toEqualTypeOf<number>();
  expect(data.combo.bowAccuracy).toBeDefined();
  expect(data.combo.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.combo.bowAccuracy).toEqualTypeOf<number>();
  expect(data.combo.blocksPlaced).toBeDefined();
  expect(data.combo.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.combo.blocksPlaced).toEqualTypeOf<number>();
  expect(data.combo.healthRegenerated).toBeDefined();
  expect(data.combo.healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.combo.healthRegenerated).toEqualTypeOf<number>();
  expect(data.combo.goldenApplesEatan).toBeDefined();
  expect(data.combo.goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.combo.goldenApplesEatan).toEqualTypeOf<number>();
  expect(data.bowSpleef).toBeDefined();
  expectTypeOf(data.bowSpleef).toEqualTypeOf<DuelsGamemode>();
  expectTypeOf(data.bowSpleef.title).toEqualTypeOf<string>();
  expect(data.bowSpleef.winstreak).toBeDefined();
  expect(data.bowSpleef.winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.bowSpleef.winstreak).toEqualTypeOf<number>();
  expect(data.bowSpleef.bestWinstreak).toBeDefined();
  expect(data.bowSpleef.bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.bowSpleef.bestWinstreak).toEqualTypeOf<number>();
  expect(data.bowSpleef.kills).toBeDefined();
  expect(data.bowSpleef.kills).greaterThanOrEqual(0);
  expectTypeOf(data.bowSpleef.kills).toEqualTypeOf<number>();
  expect(data.bowSpleef.deaths).toBeDefined();
  expect(data.bowSpleef.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.bowSpleef.deaths).toEqualTypeOf<number>();
  expect(data.bowSpleef.KDRatio).toBeDefined();
  expect(data.bowSpleef.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.bowSpleef.KDRatio).toEqualTypeOf<number>();
  expect(data.bowSpleef.wins).toBeDefined();
  expect(data.bowSpleef.wins).greaterThanOrEqual(0);
  expectTypeOf(data.bowSpleef.wins).toEqualTypeOf<number>();
  expect(data.bowSpleef.losses).toBeDefined();
  expect(data.bowSpleef.losses).greaterThanOrEqual(0);
  expectTypeOf(data.bowSpleef.losses).toEqualTypeOf<number>();
  expect(data.bowSpleef.WLRatio).toBeDefined();
  expect(data.bowSpleef.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.bowSpleef.WLRatio).toEqualTypeOf<number>();
  expect(data.bowSpleef.playedGames).toBeDefined();
  expect(data.bowSpleef.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.bowSpleef.playedGames).toEqualTypeOf<number>();
  expect(data.bowSpleef.swings).toBeDefined();
  expect(data.bowSpleef.swings).greaterThanOrEqual(0);
  expectTypeOf(data.bowSpleef.swings).toEqualTypeOf<number>();
  expect(data.bowSpleef.hits).toBeDefined();
  expect(data.bowSpleef.hits).greaterThanOrEqual(0);
  expectTypeOf(data.bowSpleef.hits).toEqualTypeOf<number>();
  expect(data.bowSpleef.meleeAccuracy).toBeDefined();
  expect(data.bowSpleef.meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.bowSpleef.meleeAccuracy).toEqualTypeOf<number>();
  expect(data.bowSpleef.bowShots).toBeDefined();
  expect(data.bowSpleef.bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.bowSpleef.bowShots).toEqualTypeOf<number>();
  expect(data.bowSpleef.bowHits).toBeDefined();
  expect(data.bowSpleef.bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.bowSpleef.bowHits).toEqualTypeOf<number>();
  expect(data.bowSpleef.bowAccuracy).toBeDefined();
  expect(data.bowSpleef.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.bowSpleef.bowAccuracy).toEqualTypeOf<number>();
  expect(data.bowSpleef.blocksPlaced).toBeDefined();
  expect(data.bowSpleef.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.bowSpleef.blocksPlaced).toEqualTypeOf<number>();
  expect(data.bowSpleef.healthRegenerated).toBeDefined();
  expect(data.bowSpleef.healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.bowSpleef.healthRegenerated).toEqualTypeOf<number>();
  expect(data.bowSpleef.goldenApplesEatan).toBeDefined();
  expect(data.bowSpleef.goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.bowSpleef.goldenApplesEatan).toEqualTypeOf<number>();
  expect(data.sumo).toBeDefined();
  expectTypeOf(data.sumo).toEqualTypeOf<DuelsGamemode>();
  expectTypeOf(data.sumo.title).toEqualTypeOf<string>();
  expect(data.sumo.winstreak).toBeDefined();
  expect(data.sumo.winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.sumo.winstreak).toEqualTypeOf<number>();
  expect(data.sumo.bestWinstreak).toBeDefined();
  expect(data.sumo.bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.sumo.bestWinstreak).toEqualTypeOf<number>();
  expect(data.sumo.kills).toBeDefined();
  expect(data.sumo.kills).greaterThanOrEqual(0);
  expectTypeOf(data.sumo.kills).toEqualTypeOf<number>();
  expect(data.sumo.deaths).toBeDefined();
  expect(data.sumo.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.sumo.deaths).toEqualTypeOf<number>();
  expect(data.sumo.KDRatio).toBeDefined();
  expect(data.sumo.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.sumo.KDRatio).toEqualTypeOf<number>();
  expect(data.sumo.wins).toBeDefined();
  expect(data.sumo.wins).greaterThanOrEqual(0);
  expectTypeOf(data.sumo.wins).toEqualTypeOf<number>();
  expect(data.sumo.losses).toBeDefined();
  expect(data.sumo.losses).greaterThanOrEqual(0);
  expectTypeOf(data.sumo.losses).toEqualTypeOf<number>();
  expect(data.sumo.WLRatio).toBeDefined();
  expect(data.sumo.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.sumo.WLRatio).toEqualTypeOf<number>();
  expect(data.sumo.playedGames).toBeDefined();
  expect(data.sumo.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.sumo.playedGames).toEqualTypeOf<number>();
  expect(data.sumo.swings).toBeDefined();
  expect(data.sumo.swings).greaterThanOrEqual(0);
  expectTypeOf(data.sumo.swings).toEqualTypeOf<number>();
  expect(data.sumo.hits).toBeDefined();
  expect(data.sumo.hits).greaterThanOrEqual(0);
  expectTypeOf(data.sumo.hits).toEqualTypeOf<number>();
  expect(data.sumo.meleeAccuracy).toBeDefined();
  expect(data.sumo.meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.sumo.meleeAccuracy).toEqualTypeOf<number>();
  expect(data.sumo.bowShots).toBeDefined();
  expect(data.sumo.bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.sumo.bowShots).toEqualTypeOf<number>();
  expect(data.sumo.bowHits).toBeDefined();
  expect(data.sumo.bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.sumo.bowHits).toEqualTypeOf<number>();
  expect(data.sumo.bowAccuracy).toBeDefined();
  expect(data.sumo.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.sumo.bowAccuracy).toEqualTypeOf<number>();
  expect(data.sumo.blocksPlaced).toBeDefined();
  expect(data.sumo.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.sumo.blocksPlaced).toEqualTypeOf<number>();
  expect(data.sumo.healthRegenerated).toBeDefined();
  expect(data.sumo.healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.sumo.healthRegenerated).toEqualTypeOf<number>();
  expect(data.sumo.goldenApplesEatan).toBeDefined();
  expect(data.sumo.goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.sumo.goldenApplesEatan).toEqualTypeOf<number>();
  expect(data.bridge).toBeDefined();
  expectTypeOf(data.bridge).toEqualTypeOf<DuelsBridge>();
  expect(data.bridge.title).toBeDefined();
  expectTypeOf(data.bridge.title).toEqualTypeOf<string>();
  expect(data.bridge.winstreak).toBeDefined();
  expect(data.bridge.winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.winstreak).toEqualTypeOf<number>();
  expect(data.bridge.bestWinstreak).toBeDefined();
  expect(data.bridge.bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.bestWinstreak).toEqualTypeOf<number>();
  expect(data.bridge.solo).toBeDefined();
  expectTypeOf(data.bridge.solo).toEqualTypeOf<DuelsGamemode>();
  expect(data.bridge.solo.title).toBeDefined();
  expectTypeOf(data.bridge.solo.title).toEqualTypeOf<string>();
  expect(data.bridge.solo.winstreak).toBeDefined();
  expect(data.bridge.solo.winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.solo.winstreak).toEqualTypeOf<number>();
  expect(data.bridge.solo.bestWinstreak).toBeDefined();
  expect(data.bridge.solo.bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.solo.bestWinstreak).toEqualTypeOf<number>();
  expect(data.bridge.solo.kills).toBeDefined();
  expect(data.bridge.solo.kills).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.solo.kills).toEqualTypeOf<number>();
  expect(data.bridge.solo.deaths).toBeDefined();
  expect(data.bridge.solo.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.solo.deaths).toEqualTypeOf<number>();
  expect(data.bridge.solo.KDRatio).toBeDefined();
  expect(data.bridge.solo.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.solo.KDRatio).toEqualTypeOf<number>();
  expect(data.bridge.solo.wins).toBeDefined();
  expect(data.bridge.solo.wins).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.solo.wins).toEqualTypeOf<number>();
  expect(data.bridge.solo.losses).toBeDefined();
  expect(data.bridge.solo.losses).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.solo.losses).toEqualTypeOf<number>();
  expect(data.bridge.solo.WLRatio).toBeDefined();
  expect(data.bridge.solo.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.solo.WLRatio).toEqualTypeOf<number>();
  expect(data.bridge.solo.playedGames).toBeDefined();
  expect(data.bridge.solo.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.solo.playedGames).toEqualTypeOf<number>();
  expect(data.bridge.solo.swings).toBeDefined();
  expect(data.bridge.solo.swings).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.solo.swings).toEqualTypeOf<number>();
  expect(data.bridge.solo.hits).toBeDefined();
  expect(data.bridge.solo.hits).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.solo.hits).toEqualTypeOf<number>();
  expect(data.bridge.solo.meleeAccuracy).toBeDefined();
  expect(data.bridge.solo.meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.solo.meleeAccuracy).toEqualTypeOf<number>();
  expect(data.bridge.solo.bowShots).toBeDefined();
  expect(data.bridge.solo.bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.solo.bowShots).toEqualTypeOf<number>();
  expect(data.bridge.solo.bowHits).toBeDefined();
  expect(data.bridge.solo.bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.solo.bowHits).toEqualTypeOf<number>();
  expect(data.bridge.solo.bowAccuracy).toBeDefined();
  expect(data.bridge.solo.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.solo.bowAccuracy).toEqualTypeOf<number>();
  expect(data.bridge.solo.blocksPlaced).toBeDefined();
  expect(data.bridge.solo.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.solo.blocksPlaced).toEqualTypeOf<number>();
  expect(data.bridge.solo.healthRegenerated).toBeDefined();
  expect(data.bridge.solo.healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.solo.healthRegenerated).toEqualTypeOf<number>();
  expect(data.bridge.solo.goldenApplesEatan).toBeDefined();
  expect(data.bridge.solo.goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.solo.goldenApplesEatan).toEqualTypeOf<number>();
  expect(data.bridge.doubles).toBeDefined();
  expectTypeOf(data.bridge.doubles).toEqualTypeOf<DuelsGamemode>();
  expect(data.bridge.doubles.title).toBeDefined();
  expectTypeOf(data.bridge.doubles.title).toEqualTypeOf<string>();
  expect(data.bridge.doubles.winstreak).toBeDefined();
  expect(data.bridge.doubles.winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.doubles.winstreak).toEqualTypeOf<number>();
  expect(data.bridge.doubles.bestWinstreak).toBeDefined();
  expect(data.bridge.doubles.bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.doubles.bestWinstreak).toEqualTypeOf<number>();
  expect(data.bridge.doubles.kills).toBeDefined();
  expect(data.bridge.doubles.kills).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.doubles.kills).toEqualTypeOf<number>();
  expect(data.bridge.doubles.deaths).toBeDefined();
  expect(data.bridge.doubles.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.doubles.deaths).toEqualTypeOf<number>();
  expect(data.bridge.doubles.KDRatio).toBeDefined();
  expect(data.bridge.doubles.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.doubles.KDRatio).toEqualTypeOf<number>();
  expect(data.bridge.doubles.wins).toBeDefined();
  expect(data.bridge.doubles.wins).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.doubles.wins).toEqualTypeOf<number>();
  expect(data.bridge.doubles.losses).toBeDefined();
  expect(data.bridge.doubles.losses).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.doubles.losses).toEqualTypeOf<number>();
  expect(data.bridge.doubles.WLRatio).toBeDefined();
  expect(data.bridge.doubles.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.doubles.WLRatio).toEqualTypeOf<number>();
  expect(data.bridge.doubles.playedGames).toBeDefined();
  expect(data.bridge.doubles.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.doubles.playedGames).toEqualTypeOf<number>();
  expect(data.bridge.doubles.swings).toBeDefined();
  expect(data.bridge.doubles.swings).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.doubles.swings).toEqualTypeOf<number>();
  expect(data.bridge.doubles.hits).toBeDefined();
  expect(data.bridge.doubles.hits).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.doubles.hits).toEqualTypeOf<number>();
  expect(data.bridge.doubles.meleeAccuracy).toBeDefined();
  expect(data.bridge.doubles.meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.doubles.meleeAccuracy).toEqualTypeOf<number>();
  expect(data.bridge.doubles.bowShots).toBeDefined();
  expect(data.bridge.doubles.bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.doubles.bowShots).toEqualTypeOf<number>();
  expect(data.bridge.doubles.bowHits).toBeDefined();
  expect(data.bridge.doubles.bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.doubles.bowHits).toEqualTypeOf<number>();
  expect(data.bridge.doubles.bowAccuracy).toBeDefined();
  expect(data.bridge.doubles.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.doubles.bowAccuracy).toEqualTypeOf<number>();
  expect(data.bridge.doubles.blocksPlaced).toBeDefined();
  expect(data.bridge.doubles.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.doubles.blocksPlaced).toEqualTypeOf<number>();
  expect(data.bridge.doubles.healthRegenerated).toBeDefined();
  expect(data.bridge.doubles.healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.doubles.healthRegenerated).toEqualTypeOf<number>();
  expect(data.bridge.doubles.goldenApplesEatan).toBeDefined();
  expect(data.bridge.doubles.goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.doubles.goldenApplesEatan).toEqualTypeOf<number>();
  expect(data.bridge.threes).toBeDefined();
  expectTypeOf(data.bridge.threes).toEqualTypeOf<DuelsGamemode>();
  expect(data.bridge.threes.title).toBeDefined();
  expectTypeOf(data.bridge.threes.title).toEqualTypeOf<string>();
  expect(data.bridge.threes.winstreak).toBeDefined();
  expect(data.bridge.threes.winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.threes.winstreak).toEqualTypeOf<number>();
  expect(data.bridge.threes.bestWinstreak).toBeDefined();
  expect(data.bridge.threes.bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.threes.bestWinstreak).toEqualTypeOf<number>();
  expect(data.bridge.threes.kills).toBeDefined();
  expect(data.bridge.threes.kills).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.threes.kills).toEqualTypeOf<number>();
  expect(data.bridge.threes.deaths).toBeDefined();
  expect(data.bridge.threes.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.threes.deaths).toEqualTypeOf<number>();
  expect(data.bridge.threes.KDRatio).toBeDefined();
  expect(data.bridge.threes.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.threes.KDRatio).toEqualTypeOf<number>();
  expect(data.bridge.threes.wins).toBeDefined();
  expect(data.bridge.threes.wins).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.threes.wins).toEqualTypeOf<number>();
  expect(data.bridge.threes.losses).toBeDefined();
  expect(data.bridge.threes.losses).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.threes.losses).toEqualTypeOf<number>();
  expect(data.bridge.threes.WLRatio).toBeDefined();
  expect(data.bridge.threes.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.threes.WLRatio).toEqualTypeOf<number>();
  expect(data.bridge.threes.playedGames).toBeDefined();
  expect(data.bridge.threes.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.threes.playedGames).toEqualTypeOf<number>();
  expect(data.bridge.threes.swings).toBeDefined();
  expect(data.bridge.threes.swings).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.threes.swings).toEqualTypeOf<number>();
  expect(data.bridge.threes.hits).toBeDefined();
  expect(data.bridge.threes.hits).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.threes.hits).toEqualTypeOf<number>();
  expect(data.bridge.threes.meleeAccuracy).toBeDefined();
  expect(data.bridge.threes.meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.threes.meleeAccuracy).toEqualTypeOf<number>();
  expect(data.bridge.threes.bowShots).toBeDefined();
  expect(data.bridge.threes.bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.threes.bowShots).toEqualTypeOf<number>();
  expect(data.bridge.threes.bowHits).toBeDefined();
  expect(data.bridge.threes.bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.threes.bowHits).toEqualTypeOf<number>();
  expect(data.bridge.threes.bowAccuracy).toBeDefined();
  expect(data.bridge.threes.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.threes.bowAccuracy).toEqualTypeOf<number>();
  expect(data.bridge.threes.blocksPlaced).toBeDefined();
  expect(data.bridge.threes.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.threes.blocksPlaced).toEqualTypeOf<number>();
  expect(data.bridge.threes.healthRegenerated).toBeDefined();
  expect(data.bridge.threes.healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.threes.healthRegenerated).toEqualTypeOf<number>();
  expect(data.bridge.threes.goldenApplesEatan).toBeDefined();
  expect(data.bridge.threes.goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.threes.goldenApplesEatan).toEqualTypeOf<number>();
  expect(data.bridge.fours).toBeDefined();
  expectTypeOf(data.bridge.fours).toEqualTypeOf<DuelsGamemode>();
  expect(data.bridge.fours.title).toBeDefined();
  expectTypeOf(data.bridge.fours.title).toEqualTypeOf<string>();
  expect(data.bridge.fours.winstreak).toBeDefined();
  expect(data.bridge.fours.winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.fours.winstreak).toEqualTypeOf<number>();
  expect(data.bridge.fours.bestWinstreak).toBeDefined();
  expect(data.bridge.fours.bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.fours.bestWinstreak).toEqualTypeOf<number>();
  expect(data.bridge.fours.kills).toBeDefined();
  expect(data.bridge.fours.kills).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.fours.kills).toEqualTypeOf<number>();
  expect(data.bridge.fours.deaths).toBeDefined();
  expect(data.bridge.fours.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.fours.deaths).toEqualTypeOf<number>();
  expect(data.bridge.fours.KDRatio).toBeDefined();
  expect(data.bridge.fours.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.fours.KDRatio).toEqualTypeOf<number>();
  expect(data.bridge.fours.wins).toBeDefined();
  expect(data.bridge.fours.wins).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.fours.wins).toEqualTypeOf<number>();
  expect(data.bridge.fours.losses).toBeDefined();
  expect(data.bridge.fours.losses).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.fours.losses).toEqualTypeOf<number>();
  expect(data.bridge.fours.WLRatio).toBeDefined();
  expect(data.bridge.fours.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.fours.WLRatio).toEqualTypeOf<number>();
  expect(data.bridge.fours.playedGames).toBeDefined();
  expect(data.bridge.fours.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.fours.playedGames).toEqualTypeOf<number>();
  expect(data.bridge.fours.swings).toBeDefined();
  expect(data.bridge.fours.swings).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.fours.swings).toEqualTypeOf<number>();
  expect(data.bridge.fours.hits).toBeDefined();
  expect(data.bridge.fours.hits).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.fours.hits).toEqualTypeOf<number>();
  expect(data.bridge.fours.meleeAccuracy).toBeDefined();
  expect(data.bridge.fours.meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.fours.meleeAccuracy).toEqualTypeOf<number>();
  expect(data.bridge.fours.bowShots).toBeDefined();
  expect(data.bridge.fours.bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.fours.bowShots).toEqualTypeOf<number>();
  expect(data.bridge.fours.bowHits).toBeDefined();
  expect(data.bridge.fours.bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.fours.bowHits).toEqualTypeOf<number>();
  expect(data.bridge.fours.bowAccuracy).toBeDefined();
  expect(data.bridge.fours.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.fours.bowAccuracy).toEqualTypeOf<number>();
  expect(data.bridge.fours.blocksPlaced).toBeDefined();
  expect(data.bridge.fours.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.fours.blocksPlaced).toEqualTypeOf<number>();
  expect(data.bridge.fours.healthRegenerated).toBeDefined();
  expect(data.bridge.fours.healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.fours.healthRegenerated).toEqualTypeOf<number>();
  expect(data.bridge.fours.goldenApplesEatan).toBeDefined();
  expect(data.bridge.fours.goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.fours.goldenApplesEatan).toEqualTypeOf<number>();
  expect(data.bridge['2v2v2v2']).toBeDefined();
  expectTypeOf(data.bridge['2v2v2v2']).toEqualTypeOf<DuelsGamemode>();
  expect(data.bridge['2v2v2v2'].title).toBeDefined();
  expectTypeOf(data.bridge['2v2v2v2'].title).toEqualTypeOf<string>();
  expect(data.bridge['2v2v2v2'].winstreak).toBeDefined();
  expect(data.bridge['2v2v2v2'].winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['2v2v2v2'].winstreak).toEqualTypeOf<number>();
  expect(data.bridge['2v2v2v2'].bestWinstreak).toBeDefined();
  expect(data.bridge['2v2v2v2'].bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['2v2v2v2'].bestWinstreak).toEqualTypeOf<number>();
  expect(data.bridge['2v2v2v2'].kills).toBeDefined();
  expect(data.bridge['2v2v2v2'].kills).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['2v2v2v2'].kills).toEqualTypeOf<number>();
  expect(data.bridge['2v2v2v2'].deaths).toBeDefined();
  expect(data.bridge['2v2v2v2'].deaths).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['2v2v2v2'].deaths).toEqualTypeOf<number>();
  expect(data.bridge['2v2v2v2'].KDRatio).toBeDefined();
  expect(data.bridge['2v2v2v2'].KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['2v2v2v2'].KDRatio).toEqualTypeOf<number>();
  expect(data.bridge['2v2v2v2'].wins).toBeDefined();
  expect(data.bridge['2v2v2v2'].wins).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['2v2v2v2'].wins).toEqualTypeOf<number>();
  expect(data.bridge['2v2v2v2'].losses).toBeDefined();
  expect(data.bridge['2v2v2v2'].losses).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['2v2v2v2'].losses).toEqualTypeOf<number>();
  expect(data.bridge['2v2v2v2'].WLRatio).toBeDefined();
  expect(data.bridge['2v2v2v2'].WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['2v2v2v2'].WLRatio).toEqualTypeOf<number>();
  expect(data.bridge['2v2v2v2'].playedGames).toBeDefined();
  expect(data.bridge['2v2v2v2'].playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['2v2v2v2'].playedGames).toEqualTypeOf<number>();
  expect(data.bridge['2v2v2v2'].swings).toBeDefined();
  expect(data.bridge['2v2v2v2'].swings).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['2v2v2v2'].swings).toEqualTypeOf<number>();
  expect(data.bridge['2v2v2v2'].hits).toBeDefined();
  expect(data.bridge['2v2v2v2'].hits).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['2v2v2v2'].hits).toEqualTypeOf<number>();
  expect(data.bridge['2v2v2v2'].meleeAccuracy).toBeDefined();
  expect(data.bridge['2v2v2v2'].meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['2v2v2v2'].meleeAccuracy).toEqualTypeOf<number>();
  expect(data.bridge['2v2v2v2'].bowShots).toBeDefined();
  expect(data.bridge['2v2v2v2'].bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['2v2v2v2'].bowShots).toEqualTypeOf<number>();
  expect(data.bridge['2v2v2v2'].bowHits).toBeDefined();
  expect(data.bridge['2v2v2v2'].bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['2v2v2v2'].bowHits).toEqualTypeOf<number>();
  expect(data.bridge['2v2v2v2'].bowAccuracy).toBeDefined();
  expect(data.bridge['2v2v2v2'].bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['2v2v2v2'].bowAccuracy).toEqualTypeOf<number>();
  expect(data.bridge['2v2v2v2'].blocksPlaced).toBeDefined();
  expect(data.bridge['2v2v2v2'].blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['2v2v2v2'].blocksPlaced).toEqualTypeOf<number>();
  expect(data.bridge['2v2v2v2'].healthRegenerated).toBeDefined();
  expect(data.bridge['2v2v2v2'].healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['2v2v2v2'].healthRegenerated).toEqualTypeOf<number>();
  expect(data.bridge['2v2v2v2'].goldenApplesEatan).toBeDefined();
  expect(data.bridge['2v2v2v2'].goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['2v2v2v2'].goldenApplesEatan).toEqualTypeOf<number>();
  expect(data.bridge['3v3v3v3']).toBeDefined();
  expectTypeOf(data.bridge['3v3v3v3']).toEqualTypeOf<DuelsGamemode>();
  expect(data.bridge['3v3v3v3'].title).toBeDefined();
  expectTypeOf(data.bridge['3v3v3v3'].title).toEqualTypeOf<string>();
  expect(data.bridge['3v3v3v3'].winstreak).toBeDefined();
  expect(data.bridge['3v3v3v3'].winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['3v3v3v3'].winstreak).toEqualTypeOf<number>();
  expect(data.bridge['3v3v3v3'].bestWinstreak).toBeDefined();
  expect(data.bridge['3v3v3v3'].bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['3v3v3v3'].bestWinstreak).toEqualTypeOf<number>();
  expect(data.bridge['3v3v3v3'].kills).toBeDefined();
  expect(data.bridge['3v3v3v3'].kills).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['3v3v3v3'].kills).toEqualTypeOf<number>();
  expect(data.bridge['3v3v3v3'].deaths).toBeDefined();
  expect(data.bridge['3v3v3v3'].deaths).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['3v3v3v3'].deaths).toEqualTypeOf<number>();
  expect(data.bridge['3v3v3v3'].KDRatio).toBeDefined();
  expect(data.bridge['3v3v3v3'].KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['3v3v3v3'].KDRatio).toEqualTypeOf<number>();
  expect(data.bridge['3v3v3v3'].wins).toBeDefined();
  expect(data.bridge['3v3v3v3'].wins).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['3v3v3v3'].wins).toEqualTypeOf<number>();
  expect(data.bridge['3v3v3v3'].losses).toBeDefined();
  expect(data.bridge['3v3v3v3'].losses).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['3v3v3v3'].losses).toEqualTypeOf<number>();
  expect(data.bridge['3v3v3v3'].WLRatio).toBeDefined();
  expect(data.bridge['3v3v3v3'].WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['3v3v3v3'].WLRatio).toEqualTypeOf<number>();
  expect(data.bridge['3v3v3v3'].playedGames).toBeDefined();
  expect(data.bridge['3v3v3v3'].playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['3v3v3v3'].playedGames).toEqualTypeOf<number>();
  expect(data.bridge['3v3v3v3'].swings).toBeDefined();
  expect(data.bridge['3v3v3v3'].swings).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['3v3v3v3'].swings).toEqualTypeOf<number>();
  expect(data.bridge['3v3v3v3'].hits).toBeDefined();
  expect(data.bridge['3v3v3v3'].hits).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['3v3v3v3'].hits).toEqualTypeOf<number>();
  expect(data.bridge['3v3v3v3'].meleeAccuracy).toBeDefined();
  expect(data.bridge['3v3v3v3'].meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['3v3v3v3'].meleeAccuracy).toEqualTypeOf<number>();
  expect(data.bridge['3v3v3v3'].bowShots).toBeDefined();
  expect(data.bridge['3v3v3v3'].bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['3v3v3v3'].bowShots).toEqualTypeOf<number>();
  expect(data.bridge['3v3v3v3'].bowHits).toBeDefined();
  expect(data.bridge['3v3v3v3'].bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['3v3v3v3'].bowHits).toEqualTypeOf<number>();
  expect(data.bridge['3v3v3v3'].bowAccuracy).toBeDefined();
  expect(data.bridge['3v3v3v3'].bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['3v3v3v3'].bowAccuracy).toEqualTypeOf<number>();
  expect(data.bridge['3v3v3v3'].blocksPlaced).toBeDefined();
  expect(data.bridge['3v3v3v3'].blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['3v3v3v3'].blocksPlaced).toEqualTypeOf<number>();
  expect(data.bridge['3v3v3v3'].healthRegenerated).toBeDefined();
  expect(data.bridge['3v3v3v3'].healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['3v3v3v3'].healthRegenerated).toEqualTypeOf<number>();
  expect(data.bridge['3v3v3v3'].goldenApplesEatan).toBeDefined();
  expect(data.bridge['3v3v3v3'].goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.bridge['3v3v3v3'].goldenApplesEatan).toEqualTypeOf<number>();
  expect(data.bridge.ctf).toBeDefined();
  expectTypeOf(data.bridge.ctf).toEqualTypeOf<DuelsGamemode>();
  expect(data.bridge.ctf.title).toBeDefined();
  expectTypeOf(data.bridge.ctf.title).toEqualTypeOf<string>();
  expect(data.bridge.ctf.winstreak).toBeDefined();
  expect(data.bridge.ctf.winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.ctf.winstreak).toEqualTypeOf<number>();
  expect(data.bridge.ctf.bestWinstreak).toBeDefined();
  expect(data.bridge.ctf.bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.ctf.bestWinstreak).toEqualTypeOf<number>();
  expect(data.bridge.ctf.kills).toBeDefined();
  expect(data.bridge.ctf.kills).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.ctf.kills).toEqualTypeOf<number>();
  expect(data.bridge.ctf.deaths).toBeDefined();
  expect(data.bridge.ctf.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.ctf.deaths).toEqualTypeOf<number>();
  expect(data.bridge.ctf.KDRatio).toBeDefined();
  expect(data.bridge.ctf.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.ctf.KDRatio).toEqualTypeOf<number>();
  expect(data.bridge.ctf.wins).toBeDefined();
  expect(data.bridge.ctf.wins).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.ctf.wins).toEqualTypeOf<number>();
  expect(data.bridge.ctf.losses).toBeDefined();
  expect(data.bridge.ctf.losses).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.ctf.losses).toEqualTypeOf<number>();
  expect(data.bridge.ctf.WLRatio).toBeDefined();
  expect(data.bridge.ctf.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.ctf.WLRatio).toEqualTypeOf<number>();
  expect(data.bridge.ctf.playedGames).toBeDefined();
  expect(data.bridge.ctf.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.ctf.playedGames).toEqualTypeOf<number>();
  expect(data.bridge.ctf.swings).toBeDefined();
  expect(data.bridge.ctf.swings).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.ctf.swings).toEqualTypeOf<number>();
  expect(data.bridge.ctf.hits).toBeDefined();
  expect(data.bridge.ctf.hits).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.ctf.hits).toEqualTypeOf<number>();
  expect(data.bridge.ctf.meleeAccuracy).toBeDefined();
  expect(data.bridge.ctf.meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.ctf.meleeAccuracy).toEqualTypeOf<number>();
  expect(data.bridge.ctf.bowShots).toBeDefined();
  expect(data.bridge.ctf.bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.ctf.bowShots).toEqualTypeOf<number>();
  expect(data.bridge.ctf.bowHits).toBeDefined();
  expect(data.bridge.ctf.bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.ctf.bowHits).toEqualTypeOf<number>();
  expect(data.bridge.ctf.bowAccuracy).toBeDefined();
  expect(data.bridge.ctf.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.ctf.bowAccuracy).toEqualTypeOf<number>();
  expect(data.bridge.ctf.blocksPlaced).toBeDefined();
  expect(data.bridge.ctf.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.ctf.blocksPlaced).toEqualTypeOf<number>();
  expect(data.bridge.ctf.healthRegenerated).toBeDefined();
  expect(data.bridge.ctf.healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.ctf.healthRegenerated).toEqualTypeOf<number>();
  expect(data.bridge.ctf.goldenApplesEatan).toBeDefined();
  expect(data.bridge.ctf.goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.ctf.goldenApplesEatan).toEqualTypeOf<number>();
  expect(data.bridge.kills).toBeDefined();
  expect(data.bridge.kills).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.kills).toEqualTypeOf<number>();
  expect(data.bridge.deaths).toBeDefined();
  expect(data.bridge.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.deaths).toEqualTypeOf<number>();
  expect(data.bridge.KDRatio).toBeDefined();
  expect(data.bridge.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.KDRatio).toEqualTypeOf<number>();
  expect(data.bridge.wins).toBeDefined();
  expect(data.bridge.wins).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.wins).toEqualTypeOf<number>();
  expect(data.bridge.losses).toBeDefined();
  expect(data.bridge.losses).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.losses).toEqualTypeOf<number>();
  expect(data.bridge.WLRatio).toBeDefined();
  expect(data.bridge.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.WLRatio).toEqualTypeOf<number>();
  expect(data.bridge.playedGames).toBeDefined();
  expect(data.bridge.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.playedGames).toEqualTypeOf<number>();
  expect(data.bridge.swings).toBeDefined();
  expect(data.bridge.swings).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.swings).toEqualTypeOf<number>();
  expect(data.bridge.hits).toBeDefined();
  expect(data.bridge.hits).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.hits).toEqualTypeOf<number>();
  expect(data.bridge.meleeAccuracy).toBeDefined();
  expect(data.bridge.meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.meleeAccuracy).toEqualTypeOf<number>();
  expect(data.bridge.bowShots).toBeDefined();
  expect(data.bridge.bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.bowShots).toEqualTypeOf<number>();
  expect(data.bridge.bowHits).toBeDefined();
  expect(data.bridge.bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.bowHits).toEqualTypeOf<number>();
  expect(data.bridge.bowAccuracy).toBeDefined();
  expect(data.bridge.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.bowAccuracy).toEqualTypeOf<number>();
  expect(data.bridge.blocksPlaced).toBeDefined();
  expect(data.bridge.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.blocksPlaced).toEqualTypeOf<number>();
  expect(data.bridge.healthRegenerated).toBeDefined();
  expect(data.bridge.healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.healthRegenerated).toEqualTypeOf<number>();
  expect(data.bridge.goldenApplesEatan).toBeDefined();
  expect(data.bridge.goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.bridge.goldenApplesEatan).toEqualTypeOf<number>();
  expect(data.parkour).toBeDefined();
  expectTypeOf(data.parkour).toEqualTypeOf<DuelsGamemode>();
  expectTypeOf(data.parkour.title).toEqualTypeOf<string>();
  expect(data.parkour.winstreak).toBeDefined();
  expect(data.parkour.winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.parkour.winstreak).toEqualTypeOf<number>();
  expect(data.parkour.bestWinstreak).toBeDefined();
  expect(data.parkour.bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.parkour.bestWinstreak).toEqualTypeOf<number>();
  expect(data.parkour.kills).toBeDefined();
  expect(data.parkour.kills).greaterThanOrEqual(0);
  expectTypeOf(data.parkour.kills).toEqualTypeOf<number>();
  expect(data.parkour.deaths).toBeDefined();
  expect(data.parkour.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.parkour.deaths).toEqualTypeOf<number>();
  expect(data.parkour.KDRatio).toBeDefined();
  expect(data.parkour.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.parkour.KDRatio).toEqualTypeOf<number>();
  expect(data.parkour.wins).toBeDefined();
  expect(data.parkour.wins).greaterThanOrEqual(0);
  expectTypeOf(data.parkour.wins).toEqualTypeOf<number>();
  expect(data.parkour.losses).toBeDefined();
  expect(data.parkour.losses).greaterThanOrEqual(0);
  expectTypeOf(data.parkour.losses).toEqualTypeOf<number>();
  expect(data.parkour.WLRatio).toBeDefined();
  expect(data.parkour.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.parkour.WLRatio).toEqualTypeOf<number>();
  expect(data.parkour.playedGames).toBeDefined();
  expect(data.parkour.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.parkour.playedGames).toEqualTypeOf<number>();
  expect(data.parkour.swings).toBeDefined();
  expect(data.parkour.swings).greaterThanOrEqual(0);
  expectTypeOf(data.parkour.swings).toEqualTypeOf<number>();
  expect(data.parkour.hits).toBeDefined();
  expect(data.parkour.hits).greaterThanOrEqual(0);
  expectTypeOf(data.parkour.hits).toEqualTypeOf<number>();
  expect(data.parkour.meleeAccuracy).toBeDefined();
  expect(data.parkour.meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.parkour.meleeAccuracy).toEqualTypeOf<number>();
  expect(data.parkour.bowShots).toBeDefined();
  expect(data.parkour.bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.parkour.bowShots).toEqualTypeOf<number>();
  expect(data.parkour.bowHits).toBeDefined();
  expect(data.parkour.bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.parkour.bowHits).toEqualTypeOf<number>();
  expect(data.parkour.bowAccuracy).toBeDefined();
  expect(data.parkour.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.parkour.bowAccuracy).toEqualTypeOf<number>();
  expect(data.parkour.blocksPlaced).toBeDefined();
  expect(data.parkour.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.parkour.blocksPlaced).toEqualTypeOf<number>();
  expect(data.parkour.healthRegenerated).toBeDefined();
  expect(data.parkour.healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.parkour.healthRegenerated).toEqualTypeOf<number>();
  expect(data.parkour.goldenApplesEatan).toBeDefined();
  expect(data.parkour.goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.parkour.goldenApplesEatan).toEqualTypeOf<number>();
  expect(data.arena).toBeDefined();
  expectTypeOf(data.arena).toEqualTypeOf<DuelsGamemode>();
  expectTypeOf(data.arena.title).toEqualTypeOf<string>();
  expect(data.arena.winstreak).toBeDefined();
  expect(data.arena.winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.arena.winstreak).toEqualTypeOf<number>();
  expect(data.arena.bestWinstreak).toBeDefined();
  expect(data.arena.bestWinstreak).greaterThanOrEqual(0);
  expectTypeOf(data.arena.bestWinstreak).toEqualTypeOf<number>();
  expect(data.arena.kills).toBeDefined();
  expect(data.arena.kills).greaterThanOrEqual(0);
  expectTypeOf(data.arena.kills).toEqualTypeOf<number>();
  expect(data.arena.deaths).toBeDefined();
  expect(data.arena.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.arena.deaths).toEqualTypeOf<number>();
  expect(data.arena.KDRatio).toBeDefined();
  expect(data.arena.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.arena.KDRatio).toEqualTypeOf<number>();
  expect(data.arena.wins).toBeDefined();
  expect(data.arena.wins).greaterThanOrEqual(0);
  expectTypeOf(data.arena.wins).toEqualTypeOf<number>();
  expect(data.arena.losses).toBeDefined();
  expect(data.arena.losses).greaterThanOrEqual(0);
  expectTypeOf(data.arena.losses).toEqualTypeOf<number>();
  expect(data.arena.WLRatio).toBeDefined();
  expect(data.arena.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.arena.WLRatio).toEqualTypeOf<number>();
  expect(data.arena.playedGames).toBeDefined();
  expect(data.arena.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.arena.playedGames).toEqualTypeOf<number>();
  expect(data.arena.swings).toBeDefined();
  expect(data.arena.swings).greaterThanOrEqual(0);
  expectTypeOf(data.arena.swings).toEqualTypeOf<number>();
  expect(data.arena.hits).toBeDefined();
  expect(data.arena.hits).greaterThanOrEqual(0);
  expectTypeOf(data.arena.hits).toEqualTypeOf<number>();
  expect(data.arena.meleeAccuracy).toBeDefined();
  expect(data.arena.meleeAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.arena.meleeAccuracy).toEqualTypeOf<number>();
  expect(data.arena.bowShots).toBeDefined();
  expect(data.arena.bowShots).greaterThanOrEqual(0);
  expectTypeOf(data.arena.bowShots).toEqualTypeOf<number>();
  expect(data.arena.bowHits).toBeDefined();
  expect(data.arena.bowHits).greaterThanOrEqual(0);
  expectTypeOf(data.arena.bowHits).toEqualTypeOf<number>();
  expect(data.arena.bowAccuracy).toBeDefined();
  expect(data.arena.bowAccuracy).greaterThanOrEqual(0);
  expectTypeOf(data.arena.bowAccuracy).toEqualTypeOf<number>();
  expect(data.arena.blocksPlaced).toBeDefined();
  expect(data.arena.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.arena.blocksPlaced).toEqualTypeOf<number>();
  expect(data.arena.healthRegenerated).toBeDefined();
  expect(data.arena.healthRegenerated).greaterThanOrEqual(0);
  expectTypeOf(data.arena.healthRegenerated).toEqualTypeOf<number>();
  expect(data.arena.goldenApplesEatan).toBeDefined();
  expect(data.arena.goldenApplesEatan).greaterThanOrEqual(0);
  expectTypeOf(data.arena.goldenApplesEatan).toEqualTypeOf<number>();
});
