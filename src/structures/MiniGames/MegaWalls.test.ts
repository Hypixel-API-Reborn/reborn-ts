import { expect, expectTypeOf, test } from 'vitest';
import MegaWalls, { MegaWallsKitStats, MegaWallsModeStats } from './MegaWalls';
test('MegaWalls', () => {
  const data = new MegaWalls({ stats: 'meow' });
  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(MegaWalls);
  expectTypeOf(data).toMatchTypeOf<MegaWalls>();

  expect(data.selectedClass).toBeDefined();
  expectTypeOf(data.selectedClass).toEqualTypeOf<string>();
  expect(data.coins).toBeDefined();
  expect(data.coins).greaterThanOrEqual(0);
  expectTypeOf(data.coins).toEqualTypeOf<number>();
  expect(data.kills).toBeDefined();
  expect(data.kills).greaterThanOrEqual(0);
  expectTypeOf(data.kills).toEqualTypeOf<number>();
  expect(data.assists).toBeDefined();
  expect(data.assists).greaterThanOrEqual(0);
  expectTypeOf(data.assists).toEqualTypeOf<number>();
  expect(data.deaths).toBeDefined();
  expect(data.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.deaths).toEqualTypeOf<number>();
  expect(data.KDRatio).toBeDefined();
  expect(data.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.KDRatio).toEqualTypeOf<number>();
  expect(data.wins).toBeDefined();
  expect(data.wins).greaterThanOrEqual(0);
  expectTypeOf(data.wins).toEqualTypeOf<number>();
  expect(data.losses).toBeDefined();
  expect(data.losses).greaterThanOrEqual(0);
  expectTypeOf(data.losses).toEqualTypeOf<number>();
  expect(data.WLRatio).toBeDefined();
  expect(data.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.WLRatio).toEqualTypeOf<number>();
  expect(data.finalKills).toBeDefined();
  expect(data.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.finalKills).toEqualTypeOf<number>();
  expect(data.finalAssists).toBeDefined();
  expect(data.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.finalAssists).toEqualTypeOf<number>();
  expect(data.finalDeaths).toBeDefined();
  expect(data.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.finalDeaths).toEqualTypeOf<number>();
  expect(data.finalKDRatio).toBeDefined();
  expect(data.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.finalKDRatio).toEqualTypeOf<number>();
  expect(data.playedGames).toBeDefined();
  expect(data.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.playedGames).toEqualTypeOf<number>();
  expect(data.witherDamage).toBeDefined();
  expect(data.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.witherDamage).toEqualTypeOf<number>();
  expect(data.defenderKills).toBeDefined();
  expect(data.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.defenderKills).toEqualTypeOf<number>();
  expect(data.walked).toBeDefined();
  expect(data.walked).greaterThanOrEqual(0);
  expectTypeOf(data.walked).toEqualTypeOf<number>();
  expect(data.blocksPlaced).toBeDefined();
  expect(data.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.blocksPlaced).toEqualTypeOf<number>();
  expect(data.blocksBroken).toBeDefined();
  expect(data.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.blocksBroken).toEqualTypeOf<number>();
  expect(data.meleeKills).toBeDefined();
  expect(data.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.meleeKills).toEqualTypeOf<number>();
  expect(data.damageDealt).toBeDefined();
  expect(data.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.damageDealt).toEqualTypeOf<number>();
  expect(data.faceOff).toBeDefined();
  expectTypeOf(data.faceOff).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.faceOff.kills).toBeDefined();
  expect(data.faceOff.kills).greaterThanOrEqual(0);
  expectTypeOf(data.faceOff.kills).toEqualTypeOf<number>();
  expect(data.faceOff.assists).toBeDefined();
  expect(data.faceOff.assists).greaterThanOrEqual(0);
  expectTypeOf(data.faceOff.assists).toEqualTypeOf<number>();
  expect(data.faceOff.deaths).toBeDefined();
  expect(data.faceOff.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.faceOff.deaths).toEqualTypeOf<number>();
  expect(data.faceOff.KDRatio).toBeDefined();
  expect(data.faceOff.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.faceOff.KDRatio).toEqualTypeOf<number>();
  expect(data.faceOff.wins).toBeDefined();
  expect(data.faceOff.wins).greaterThanOrEqual(0);
  expectTypeOf(data.faceOff.wins).toEqualTypeOf<number>();
  expect(data.faceOff.losses).toBeDefined();
  expect(data.faceOff.losses).greaterThanOrEqual(0);
  expectTypeOf(data.faceOff.losses).toEqualTypeOf<number>();
  expect(data.faceOff.WLRatio).toBeDefined();
  expect(data.faceOff.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.faceOff.WLRatio).toEqualTypeOf<number>();
  expect(data.faceOff.finalKills).toBeDefined();
  expect(data.faceOff.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.faceOff.finalKills).toEqualTypeOf<number>();
  expect(data.faceOff.finalAssists).toBeDefined();
  expect(data.faceOff.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.faceOff.finalAssists).toEqualTypeOf<number>();
  expect(data.faceOff.finalDeaths).toBeDefined();
  expect(data.faceOff.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.faceOff.finalDeaths).toEqualTypeOf<number>();
  expect(data.faceOff.finalKDRatio).toBeDefined();
  expect(data.faceOff.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.faceOff.finalKDRatio).toEqualTypeOf<number>();
  expect(data.faceOff.playedGames).toBeDefined();
  expect(data.faceOff.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.faceOff.playedGames).toEqualTypeOf<number>();
  expect(data.faceOff.witherDamage).toBeDefined();
  expect(data.faceOff.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.faceOff.witherDamage).toEqualTypeOf<number>();
  expect(data.faceOff.defenderKills).toBeDefined();
  expect(data.faceOff.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.faceOff.defenderKills).toEqualTypeOf<number>();
  expect(data.faceOff.walked).toBeDefined();
  expect(data.faceOff.walked).greaterThanOrEqual(0);
  expectTypeOf(data.faceOff.walked).toEqualTypeOf<number>();
  expect(data.faceOff.blocksPlaced).toBeDefined();
  expect(data.faceOff.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.faceOff.blocksPlaced).toEqualTypeOf<number>();
  expect(data.faceOff.blocksBroken).toBeDefined();
  expect(data.faceOff.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.faceOff.blocksBroken).toEqualTypeOf<number>();
  expect(data.faceOff.meleeKills).toBeDefined();
  expect(data.faceOff.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.faceOff.meleeKills).toEqualTypeOf<number>();
  expect(data.faceOff.damageDealt).toBeDefined();
  expect(data.faceOff.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.faceOff.damageDealt).toEqualTypeOf<number>();
  expect(data.casualBrawl).toBeDefined();
  expectTypeOf(data.casualBrawl).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.casualBrawl.kills).toBeDefined();
  expect(data.casualBrawl.kills).greaterThanOrEqual(0);
  expectTypeOf(data.casualBrawl.kills).toEqualTypeOf<number>();
  expect(data.casualBrawl.assists).toBeDefined();
  expect(data.casualBrawl.assists).greaterThanOrEqual(0);
  expectTypeOf(data.casualBrawl.assists).toEqualTypeOf<number>();
  expect(data.casualBrawl.deaths).toBeDefined();
  expect(data.casualBrawl.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.casualBrawl.deaths).toEqualTypeOf<number>();
  expect(data.casualBrawl.KDRatio).toBeDefined();
  expect(data.casualBrawl.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.casualBrawl.KDRatio).toEqualTypeOf<number>();
  expect(data.casualBrawl.wins).toBeDefined();
  expect(data.casualBrawl.wins).greaterThanOrEqual(0);
  expectTypeOf(data.casualBrawl.wins).toEqualTypeOf<number>();
  expect(data.casualBrawl.losses).toBeDefined();
  expect(data.casualBrawl.losses).greaterThanOrEqual(0);
  expectTypeOf(data.casualBrawl.losses).toEqualTypeOf<number>();
  expect(data.casualBrawl.WLRatio).toBeDefined();
  expect(data.casualBrawl.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.casualBrawl.WLRatio).toEqualTypeOf<number>();
  expect(data.casualBrawl.finalKills).toBeDefined();
  expect(data.casualBrawl.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.casualBrawl.finalKills).toEqualTypeOf<number>();
  expect(data.casualBrawl.finalAssists).toBeDefined();
  expect(data.casualBrawl.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.casualBrawl.finalAssists).toEqualTypeOf<number>();
  expect(data.casualBrawl.finalDeaths).toBeDefined();
  expect(data.casualBrawl.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.casualBrawl.finalDeaths).toEqualTypeOf<number>();
  expect(data.casualBrawl.finalKDRatio).toBeDefined();
  expect(data.casualBrawl.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.casualBrawl.finalKDRatio).toEqualTypeOf<number>();
  expect(data.casualBrawl.playedGames).toBeDefined();
  expect(data.casualBrawl.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.casualBrawl.playedGames).toEqualTypeOf<number>();
  expect(data.casualBrawl.witherDamage).toBeDefined();
  expect(data.casualBrawl.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.casualBrawl.witherDamage).toEqualTypeOf<number>();
  expect(data.casualBrawl.defenderKills).toBeDefined();
  expect(data.casualBrawl.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.casualBrawl.defenderKills).toEqualTypeOf<number>();
  expect(data.casualBrawl.walked).toBeDefined();
  expect(data.casualBrawl.walked).greaterThanOrEqual(0);
  expectTypeOf(data.casualBrawl.walked).toEqualTypeOf<number>();
  expect(data.casualBrawl.blocksPlaced).toBeDefined();
  expect(data.casualBrawl.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.casualBrawl.blocksPlaced).toEqualTypeOf<number>();
  expect(data.casualBrawl.blocksBroken).toBeDefined();
  expect(data.casualBrawl.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.casualBrawl.blocksBroken).toEqualTypeOf<number>();
  expect(data.casualBrawl.meleeKills).toBeDefined();
  expect(data.casualBrawl.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.casualBrawl.meleeKills).toEqualTypeOf<number>();
  expect(data.casualBrawl.damageDealt).toBeDefined();
  expect(data.casualBrawl.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.casualBrawl.damageDealt).toEqualTypeOf<number>();
  expect(data.cow).toBeDefined();
  expectTypeOf(data.cow).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.cow.kills).toBeDefined();
  expect(data.cow.kills).greaterThanOrEqual(0);
  expectTypeOf(data.cow.kills).toEqualTypeOf<number>();
  expect(data.cow.assists).toBeDefined();
  expect(data.cow.assists).greaterThanOrEqual(0);
  expectTypeOf(data.cow.assists).toEqualTypeOf<number>();
  expect(data.cow.deaths).toBeDefined();
  expect(data.cow.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.cow.deaths).toEqualTypeOf<number>();
  expect(data.cow.KDRatio).toBeDefined();
  expect(data.cow.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.cow.KDRatio).toEqualTypeOf<number>();
  expect(data.cow.wins).toBeDefined();
  expect(data.cow.wins).greaterThanOrEqual(0);
  expectTypeOf(data.cow.wins).toEqualTypeOf<number>();
  expect(data.cow.losses).toBeDefined();
  expect(data.cow.losses).greaterThanOrEqual(0);
  expectTypeOf(data.cow.losses).toEqualTypeOf<number>();
  expect(data.cow.WLRatio).toBeDefined();
  expect(data.cow.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.cow.WLRatio).toEqualTypeOf<number>();
  expect(data.cow.finalKills).toBeDefined();
  expect(data.cow.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.cow.finalKills).toEqualTypeOf<number>();
  expect(data.cow.finalAssists).toBeDefined();
  expect(data.cow.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.cow.finalAssists).toEqualTypeOf<number>();
  expect(data.cow.finalDeaths).toBeDefined();
  expect(data.cow.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.cow.finalDeaths).toEqualTypeOf<number>();
  expect(data.cow.finalKDRatio).toBeDefined();
  expect(data.cow.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.cow.finalKDRatio).toEqualTypeOf<number>();
  expect(data.cow.playedGames).toBeDefined();
  expect(data.cow.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.cow.playedGames).toEqualTypeOf<number>();
  expect(data.cow.witherDamage).toBeDefined();
  expect(data.cow.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.cow.witherDamage).toEqualTypeOf<number>();
  expect(data.cow.defenderKills).toBeDefined();
  expect(data.cow.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.cow.defenderKills).toEqualTypeOf<number>();
  expect(data.cow.walked).toBeDefined();
  expect(data.cow.walked).greaterThanOrEqual(0);
  expectTypeOf(data.cow.walked).toEqualTypeOf<number>();
  expect(data.cow.blocksPlaced).toBeDefined();
  expect(data.cow.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.cow.blocksPlaced).toEqualTypeOf<number>();
  expect(data.cow.blocksBroken).toBeDefined();
  expect(data.cow.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.cow.blocksBroken).toEqualTypeOf<number>();
  expect(data.cow.meleeKills).toBeDefined();
  expect(data.cow.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.cow.meleeKills).toEqualTypeOf<number>();
  expect(data.cow.damageDealt).toBeDefined();
  expect(data.cow.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.cow.damageDealt).toEqualTypeOf<number>();
  expect(data.cow.faceOff).toBeDefined();
  expectTypeOf(data.cow.faceOff).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.cow.faceOff.kills).toBeDefined();
  expect(data.cow.faceOff.kills).greaterThanOrEqual(0);
  expectTypeOf(data.cow.faceOff.kills).toEqualTypeOf<number>();
  expect(data.cow.faceOff.assists).toBeDefined();
  expect(data.cow.faceOff.assists).greaterThanOrEqual(0);
  expectTypeOf(data.cow.faceOff.assists).toEqualTypeOf<number>();
  expect(data.cow.faceOff.deaths).toBeDefined();
  expect(data.cow.faceOff.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.cow.faceOff.deaths).toEqualTypeOf<number>();
  expect(data.cow.faceOff.KDRatio).toBeDefined();
  expect(data.cow.faceOff.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.cow.faceOff.KDRatio).toEqualTypeOf<number>();
  expect(data.cow.faceOff.wins).toBeDefined();
  expect(data.cow.faceOff.wins).greaterThanOrEqual(0);
  expectTypeOf(data.cow.faceOff.wins).toEqualTypeOf<number>();
  expect(data.cow.faceOff.losses).toBeDefined();
  expect(data.cow.faceOff.losses).greaterThanOrEqual(0);
  expectTypeOf(data.cow.faceOff.losses).toEqualTypeOf<number>();
  expect(data.cow.faceOff.WLRatio).toBeDefined();
  expect(data.cow.faceOff.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.cow.faceOff.WLRatio).toEqualTypeOf<number>();
  expect(data.cow.faceOff.finalKills).toBeDefined();
  expect(data.cow.faceOff.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.cow.faceOff.finalKills).toEqualTypeOf<number>();
  expect(data.cow.faceOff.finalAssists).toBeDefined();
  expect(data.cow.faceOff.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.cow.faceOff.finalAssists).toEqualTypeOf<number>();
  expect(data.cow.faceOff.finalDeaths).toBeDefined();
  expect(data.cow.faceOff.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.cow.faceOff.finalDeaths).toEqualTypeOf<number>();
  expect(data.cow.faceOff.finalKDRatio).toBeDefined();
  expect(data.cow.faceOff.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.cow.faceOff.finalKDRatio).toEqualTypeOf<number>();
  expect(data.cow.faceOff.playedGames).toBeDefined();
  expect(data.cow.faceOff.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.cow.faceOff.playedGames).toEqualTypeOf<number>();
  expect(data.cow.faceOff.witherDamage).toBeDefined();
  expect(data.cow.faceOff.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.cow.faceOff.witherDamage).toEqualTypeOf<number>();
  expect(data.cow.faceOff.defenderKills).toBeDefined();
  expect(data.cow.faceOff.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.cow.faceOff.defenderKills).toEqualTypeOf<number>();
  expect(data.cow.faceOff.walked).toBeDefined();
  expect(data.cow.faceOff.walked).greaterThanOrEqual(0);
  expectTypeOf(data.cow.faceOff.walked).toEqualTypeOf<number>();
  expect(data.cow.faceOff.blocksPlaced).toBeDefined();
  expect(data.cow.faceOff.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.cow.faceOff.blocksPlaced).toEqualTypeOf<number>();
  expect(data.cow.faceOff.blocksBroken).toBeDefined();
  expect(data.cow.faceOff.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.cow.faceOff.blocksBroken).toEqualTypeOf<number>();
  expect(data.cow.faceOff.meleeKills).toBeDefined();
  expect(data.cow.faceOff.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.cow.faceOff.meleeKills).toEqualTypeOf<number>();
  expect(data.cow.faceOff.damageDealt).toBeDefined();
  expect(data.cow.faceOff.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.cow.faceOff.damageDealt).toEqualTypeOf<number>();
  expect(data.cow.casualBrawl).toBeDefined();
  expectTypeOf(data.cow.casualBrawl).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.cow.casualBrawl.kills).toBeDefined();
  expect(data.cow.casualBrawl.kills).greaterThanOrEqual(0);
  expectTypeOf(data.cow.casualBrawl.kills).toEqualTypeOf<number>();
  expect(data.cow.casualBrawl.assists).toBeDefined();
  expect(data.cow.casualBrawl.assists).greaterThanOrEqual(0);
  expectTypeOf(data.cow.casualBrawl.assists).toEqualTypeOf<number>();
  expect(data.cow.casualBrawl.deaths).toBeDefined();
  expect(data.cow.casualBrawl.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.cow.casualBrawl.deaths).toEqualTypeOf<number>();
  expect(data.cow.casualBrawl.KDRatio).toBeDefined();
  expect(data.cow.casualBrawl.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.cow.casualBrawl.KDRatio).toEqualTypeOf<number>();
  expect(data.cow.casualBrawl.wins).toBeDefined();
  expect(data.cow.casualBrawl.wins).greaterThanOrEqual(0);
  expectTypeOf(data.cow.casualBrawl.wins).toEqualTypeOf<number>();
  expect(data.cow.casualBrawl.losses).toBeDefined();
  expect(data.cow.casualBrawl.losses).greaterThanOrEqual(0);
  expectTypeOf(data.cow.casualBrawl.losses).toEqualTypeOf<number>();
  expect(data.cow.casualBrawl.WLRatio).toBeDefined();
  expect(data.cow.casualBrawl.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.cow.casualBrawl.WLRatio).toEqualTypeOf<number>();
  expect(data.cow.casualBrawl.finalKills).toBeDefined();
  expect(data.cow.casualBrawl.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.cow.casualBrawl.finalKills).toEqualTypeOf<number>();
  expect(data.cow.casualBrawl.finalAssists).toBeDefined();
  expect(data.cow.casualBrawl.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.cow.casualBrawl.finalAssists).toEqualTypeOf<number>();
  expect(data.cow.casualBrawl.finalDeaths).toBeDefined();
  expect(data.cow.casualBrawl.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.cow.casualBrawl.finalDeaths).toEqualTypeOf<number>();
  expect(data.cow.casualBrawl.finalKDRatio).toBeDefined();
  expect(data.cow.casualBrawl.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.cow.casualBrawl.finalKDRatio).toEqualTypeOf<number>();
  expect(data.cow.casualBrawl.playedGames).toBeDefined();
  expect(data.cow.casualBrawl.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.cow.casualBrawl.playedGames).toEqualTypeOf<number>();
  expect(data.cow.casualBrawl.witherDamage).toBeDefined();
  expect(data.cow.casualBrawl.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.cow.casualBrawl.witherDamage).toEqualTypeOf<number>();
  expect(data.cow.casualBrawl.defenderKills).toBeDefined();
  expect(data.cow.casualBrawl.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.cow.casualBrawl.defenderKills).toEqualTypeOf<number>();
  expect(data.cow.casualBrawl.walked).toBeDefined();
  expect(data.cow.casualBrawl.walked).greaterThanOrEqual(0);
  expectTypeOf(data.cow.casualBrawl.walked).toEqualTypeOf<number>();
  expect(data.cow.casualBrawl.blocksPlaced).toBeDefined();
  expect(data.cow.casualBrawl.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.cow.casualBrawl.blocksPlaced).toEqualTypeOf<number>();
  expect(data.cow.casualBrawl.blocksBroken).toBeDefined();
  expect(data.cow.casualBrawl.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.cow.casualBrawl.blocksBroken).toEqualTypeOf<number>();
  expect(data.cow.casualBrawl.meleeKills).toBeDefined();
  expect(data.cow.casualBrawl.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.cow.casualBrawl.meleeKills).toEqualTypeOf<number>();
  expect(data.cow.casualBrawl.damageDealt).toBeDefined();
  expect(data.cow.casualBrawl.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.cow.casualBrawl.damageDealt).toEqualTypeOf<number>();

  expect(data.hunter).toBeDefined();
  expectTypeOf(data.hunter).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.hunter.kills).toBeDefined();
  expect(data.hunter.kills).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.kills).toEqualTypeOf<number>();
  expect(data.hunter.assists).toBeDefined();
  expect(data.hunter.assists).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.assists).toEqualTypeOf<number>();
  expect(data.hunter.deaths).toBeDefined();
  expect(data.hunter.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.deaths).toEqualTypeOf<number>();
  expect(data.hunter.KDRatio).toBeDefined();
  expect(data.hunter.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.KDRatio).toEqualTypeOf<number>();
  expect(data.hunter.wins).toBeDefined();
  expect(data.hunter.wins).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.wins).toEqualTypeOf<number>();
  expect(data.hunter.losses).toBeDefined();
  expect(data.hunter.losses).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.losses).toEqualTypeOf<number>();
  expect(data.hunter.WLRatio).toBeDefined();
  expect(data.hunter.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.WLRatio).toEqualTypeOf<number>();
  expect(data.hunter.finalKills).toBeDefined();
  expect(data.hunter.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.finalKills).toEqualTypeOf<number>();
  expect(data.hunter.finalAssists).toBeDefined();
  expect(data.hunter.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.finalAssists).toEqualTypeOf<number>();
  expect(data.hunter.finalDeaths).toBeDefined();
  expect(data.hunter.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.finalDeaths).toEqualTypeOf<number>();
  expect(data.hunter.finalKDRatio).toBeDefined();
  expect(data.hunter.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.finalKDRatio).toEqualTypeOf<number>();
  expect(data.hunter.playedGames).toBeDefined();
  expect(data.hunter.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.playedGames).toEqualTypeOf<number>();
  expect(data.hunter.witherDamage).toBeDefined();
  expect(data.hunter.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.witherDamage).toEqualTypeOf<number>();
  expect(data.hunter.defenderKills).toBeDefined();
  expect(data.hunter.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.defenderKills).toEqualTypeOf<number>();
  expect(data.hunter.walked).toBeDefined();
  expect(data.hunter.walked).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.walked).toEqualTypeOf<number>();
  expect(data.hunter.blocksPlaced).toBeDefined();
  expect(data.hunter.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.blocksPlaced).toEqualTypeOf<number>();
  expect(data.hunter.blocksBroken).toBeDefined();
  expect(data.hunter.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.blocksBroken).toEqualTypeOf<number>();
  expect(data.hunter.meleeKills).toBeDefined();
  expect(data.hunter.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.meleeKills).toEqualTypeOf<number>();
  expect(data.hunter.damageDealt).toBeDefined();
  expect(data.hunter.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.damageDealt).toEqualTypeOf<number>();
  expect(data.hunter.faceOff).toBeDefined();
  expectTypeOf(data.hunter.faceOff).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.hunter.faceOff.kills).toBeDefined();
  expect(data.hunter.faceOff.kills).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.faceOff.kills).toEqualTypeOf<number>();
  expect(data.hunter.faceOff.assists).toBeDefined();
  expect(data.hunter.faceOff.assists).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.faceOff.assists).toEqualTypeOf<number>();
  expect(data.hunter.faceOff.deaths).toBeDefined();
  expect(data.hunter.faceOff.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.faceOff.deaths).toEqualTypeOf<number>();
  expect(data.hunter.faceOff.KDRatio).toBeDefined();
  expect(data.hunter.faceOff.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.faceOff.KDRatio).toEqualTypeOf<number>();
  expect(data.hunter.faceOff.wins).toBeDefined();
  expect(data.hunter.faceOff.wins).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.faceOff.wins).toEqualTypeOf<number>();
  expect(data.hunter.faceOff.losses).toBeDefined();
  expect(data.hunter.faceOff.losses).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.faceOff.losses).toEqualTypeOf<number>();
  expect(data.hunter.faceOff.WLRatio).toBeDefined();
  expect(data.hunter.faceOff.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.faceOff.WLRatio).toEqualTypeOf<number>();
  expect(data.hunter.faceOff.finalKills).toBeDefined();
  expect(data.hunter.faceOff.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.faceOff.finalKills).toEqualTypeOf<number>();
  expect(data.hunter.faceOff.finalAssists).toBeDefined();
  expect(data.hunter.faceOff.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.faceOff.finalAssists).toEqualTypeOf<number>();
  expect(data.hunter.faceOff.finalDeaths).toBeDefined();
  expect(data.hunter.faceOff.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.faceOff.finalDeaths).toEqualTypeOf<number>();
  expect(data.hunter.faceOff.finalKDRatio).toBeDefined();
  expect(data.hunter.faceOff.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.faceOff.finalKDRatio).toEqualTypeOf<number>();
  expect(data.hunter.faceOff.playedGames).toBeDefined();
  expect(data.hunter.faceOff.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.faceOff.playedGames).toEqualTypeOf<number>();
  expect(data.hunter.faceOff.witherDamage).toBeDefined();
  expect(data.hunter.faceOff.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.faceOff.witherDamage).toEqualTypeOf<number>();
  expect(data.hunter.faceOff.defenderKills).toBeDefined();
  expect(data.hunter.faceOff.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.faceOff.defenderKills).toEqualTypeOf<number>();
  expect(data.hunter.faceOff.walked).toBeDefined();
  expect(data.hunter.faceOff.walked).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.faceOff.walked).toEqualTypeOf<number>();
  expect(data.hunter.faceOff.blocksPlaced).toBeDefined();
  expect(data.hunter.faceOff.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.faceOff.blocksPlaced).toEqualTypeOf<number>();
  expect(data.hunter.faceOff.blocksBroken).toBeDefined();
  expect(data.hunter.faceOff.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.faceOff.blocksBroken).toEqualTypeOf<number>();
  expect(data.hunter.faceOff.meleeKills).toBeDefined();
  expect(data.hunter.faceOff.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.faceOff.meleeKills).toEqualTypeOf<number>();
  expect(data.hunter.faceOff.damageDealt).toBeDefined();
  expect(data.hunter.faceOff.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.faceOff.damageDealt).toEqualTypeOf<number>();
  expect(data.hunter.casualBrawl).toBeDefined();
  expectTypeOf(data.hunter.casualBrawl).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.hunter.casualBrawl.kills).toBeDefined();
  expect(data.hunter.casualBrawl.kills).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.casualBrawl.kills).toEqualTypeOf<number>();
  expect(data.hunter.casualBrawl.assists).toBeDefined();
  expect(data.hunter.casualBrawl.assists).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.casualBrawl.assists).toEqualTypeOf<number>();
  expect(data.hunter.casualBrawl.deaths).toBeDefined();
  expect(data.hunter.casualBrawl.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.casualBrawl.deaths).toEqualTypeOf<number>();
  expect(data.hunter.casualBrawl.KDRatio).toBeDefined();
  expect(data.hunter.casualBrawl.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.casualBrawl.KDRatio).toEqualTypeOf<number>();
  expect(data.hunter.casualBrawl.wins).toBeDefined();
  expect(data.hunter.casualBrawl.wins).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.casualBrawl.wins).toEqualTypeOf<number>();
  expect(data.hunter.casualBrawl.losses).toBeDefined();
  expect(data.hunter.casualBrawl.losses).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.casualBrawl.losses).toEqualTypeOf<number>();
  expect(data.hunter.casualBrawl.WLRatio).toBeDefined();
  expect(data.hunter.casualBrawl.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.casualBrawl.WLRatio).toEqualTypeOf<number>();
  expect(data.hunter.casualBrawl.finalKills).toBeDefined();
  expect(data.hunter.casualBrawl.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.casualBrawl.finalKills).toEqualTypeOf<number>();
  expect(data.hunter.casualBrawl.finalAssists).toBeDefined();
  expect(data.hunter.casualBrawl.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.casualBrawl.finalAssists).toEqualTypeOf<number>();
  expect(data.hunter.casualBrawl.finalDeaths).toBeDefined();
  expect(data.hunter.casualBrawl.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.casualBrawl.finalDeaths).toEqualTypeOf<number>();
  expect(data.hunter.casualBrawl.finalKDRatio).toBeDefined();
  expect(data.hunter.casualBrawl.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.casualBrawl.finalKDRatio).toEqualTypeOf<number>();
  expect(data.hunter.casualBrawl.playedGames).toBeDefined();
  expect(data.hunter.casualBrawl.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.casualBrawl.playedGames).toEqualTypeOf<number>();
  expect(data.hunter.casualBrawl.witherDamage).toBeDefined();
  expect(data.hunter.casualBrawl.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.casualBrawl.witherDamage).toEqualTypeOf<number>();
  expect(data.hunter.casualBrawl.defenderKills).toBeDefined();
  expect(data.hunter.casualBrawl.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.casualBrawl.defenderKills).toEqualTypeOf<number>();
  expect(data.hunter.casualBrawl.walked).toBeDefined();
  expect(data.hunter.casualBrawl.walked).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.casualBrawl.walked).toEqualTypeOf<number>();
  expect(data.hunter.casualBrawl.blocksPlaced).toBeDefined();
  expect(data.hunter.casualBrawl.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.casualBrawl.blocksPlaced).toEqualTypeOf<number>();
  expect(data.hunter.casualBrawl.blocksBroken).toBeDefined();
  expect(data.hunter.casualBrawl.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.casualBrawl.blocksBroken).toEqualTypeOf<number>();
  expect(data.hunter.casualBrawl.meleeKills).toBeDefined();
  expect(data.hunter.casualBrawl.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.casualBrawl.meleeKills).toEqualTypeOf<number>();
  expect(data.hunter.casualBrawl.damageDealt).toBeDefined();
  expect(data.hunter.casualBrawl.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.hunter.casualBrawl.damageDealt).toEqualTypeOf<number>();
  expect(data.shark).toBeDefined();
  expectTypeOf(data.shark).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.shark.kills).toBeDefined();
  expect(data.shark.kills).greaterThanOrEqual(0);
  expectTypeOf(data.shark.kills).toEqualTypeOf<number>();
  expect(data.shark.assists).toBeDefined();
  expect(data.shark.assists).greaterThanOrEqual(0);
  expectTypeOf(data.shark.assists).toEqualTypeOf<number>();
  expect(data.shark.deaths).toBeDefined();
  expect(data.shark.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.shark.deaths).toEqualTypeOf<number>();
  expect(data.shark.KDRatio).toBeDefined();
  expect(data.shark.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.shark.KDRatio).toEqualTypeOf<number>();
  expect(data.shark.wins).toBeDefined();
  expect(data.shark.wins).greaterThanOrEqual(0);
  expectTypeOf(data.shark.wins).toEqualTypeOf<number>();
  expect(data.shark.losses).toBeDefined();
  expect(data.shark.losses).greaterThanOrEqual(0);
  expectTypeOf(data.shark.losses).toEqualTypeOf<number>();
  expect(data.shark.WLRatio).toBeDefined();
  expect(data.shark.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.shark.WLRatio).toEqualTypeOf<number>();
  expect(data.shark.finalKills).toBeDefined();
  expect(data.shark.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.shark.finalKills).toEqualTypeOf<number>();
  expect(data.shark.finalAssists).toBeDefined();
  expect(data.shark.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.shark.finalAssists).toEqualTypeOf<number>();
  expect(data.shark.finalDeaths).toBeDefined();
  expect(data.shark.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.shark.finalDeaths).toEqualTypeOf<number>();
  expect(data.shark.finalKDRatio).toBeDefined();
  expect(data.shark.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.shark.finalKDRatio).toEqualTypeOf<number>();
  expect(data.shark.playedGames).toBeDefined();
  expect(data.shark.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.shark.playedGames).toEqualTypeOf<number>();
  expect(data.shark.witherDamage).toBeDefined();
  expect(data.shark.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.shark.witherDamage).toEqualTypeOf<number>();
  expect(data.shark.defenderKills).toBeDefined();
  expect(data.shark.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.shark.defenderKills).toEqualTypeOf<number>();
  expect(data.shark.walked).toBeDefined();
  expect(data.shark.walked).greaterThanOrEqual(0);
  expectTypeOf(data.shark.walked).toEqualTypeOf<number>();
  expect(data.shark.blocksPlaced).toBeDefined();
  expect(data.shark.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.shark.blocksPlaced).toEqualTypeOf<number>();
  expect(data.shark.blocksBroken).toBeDefined();
  expect(data.shark.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.shark.blocksBroken).toEqualTypeOf<number>();
  expect(data.shark.meleeKills).toBeDefined();
  expect(data.shark.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.shark.meleeKills).toEqualTypeOf<number>();
  expect(data.shark.damageDealt).toBeDefined();
  expect(data.shark.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.shark.damageDealt).toEqualTypeOf<number>();
  expect(data.shark.faceOff).toBeDefined();
  expectTypeOf(data.shark.faceOff).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.shark.faceOff.kills).toBeDefined();
  expect(data.shark.faceOff.kills).greaterThanOrEqual(0);
  expectTypeOf(data.shark.faceOff.kills).toEqualTypeOf<number>();
  expect(data.shark.faceOff.assists).toBeDefined();
  expect(data.shark.faceOff.assists).greaterThanOrEqual(0);
  expectTypeOf(data.shark.faceOff.assists).toEqualTypeOf<number>();
  expect(data.shark.faceOff.deaths).toBeDefined();
  expect(data.shark.faceOff.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.shark.faceOff.deaths).toEqualTypeOf<number>();
  expect(data.shark.faceOff.KDRatio).toBeDefined();
  expect(data.shark.faceOff.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.shark.faceOff.KDRatio).toEqualTypeOf<number>();
  expect(data.shark.faceOff.wins).toBeDefined();
  expect(data.shark.faceOff.wins).greaterThanOrEqual(0);
  expectTypeOf(data.shark.faceOff.wins).toEqualTypeOf<number>();
  expect(data.shark.faceOff.losses).toBeDefined();
  expect(data.shark.faceOff.losses).greaterThanOrEqual(0);
  expectTypeOf(data.shark.faceOff.losses).toEqualTypeOf<number>();
  expect(data.shark.faceOff.WLRatio).toBeDefined();
  expect(data.shark.faceOff.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.shark.faceOff.WLRatio).toEqualTypeOf<number>();
  expect(data.shark.faceOff.finalKills).toBeDefined();
  expect(data.shark.faceOff.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.shark.faceOff.finalKills).toEqualTypeOf<number>();
  expect(data.shark.faceOff.finalAssists).toBeDefined();
  expect(data.shark.faceOff.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.shark.faceOff.finalAssists).toEqualTypeOf<number>();
  expect(data.shark.faceOff.finalDeaths).toBeDefined();
  expect(data.shark.faceOff.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.shark.faceOff.finalDeaths).toEqualTypeOf<number>();
  expect(data.shark.faceOff.finalKDRatio).toBeDefined();
  expect(data.shark.faceOff.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.shark.faceOff.finalKDRatio).toEqualTypeOf<number>();
  expect(data.shark.faceOff.playedGames).toBeDefined();
  expect(data.shark.faceOff.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.shark.faceOff.playedGames).toEqualTypeOf<number>();
  expect(data.shark.faceOff.witherDamage).toBeDefined();
  expect(data.shark.faceOff.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.shark.faceOff.witherDamage).toEqualTypeOf<number>();
  expect(data.shark.faceOff.defenderKills).toBeDefined();
  expect(data.shark.faceOff.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.shark.faceOff.defenderKills).toEqualTypeOf<number>();
  expect(data.shark.faceOff.walked).toBeDefined();
  expect(data.shark.faceOff.walked).greaterThanOrEqual(0);
  expectTypeOf(data.shark.faceOff.walked).toEqualTypeOf<number>();
  expect(data.shark.faceOff.blocksPlaced).toBeDefined();
  expect(data.shark.faceOff.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.shark.faceOff.blocksPlaced).toEqualTypeOf<number>();
  expect(data.shark.faceOff.blocksBroken).toBeDefined();
  expect(data.shark.faceOff.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.shark.faceOff.blocksBroken).toEqualTypeOf<number>();
  expect(data.shark.faceOff.meleeKills).toBeDefined();
  expect(data.shark.faceOff.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.shark.faceOff.meleeKills).toEqualTypeOf<number>();
  expect(data.shark.faceOff.damageDealt).toBeDefined();
  expect(data.shark.faceOff.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.shark.faceOff.damageDealt).toEqualTypeOf<number>();
  expect(data.shark.casualBrawl).toBeDefined();
  expectTypeOf(data.shark.casualBrawl).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.shark.casualBrawl.kills).toBeDefined();
  expect(data.shark.casualBrawl.kills).greaterThanOrEqual(0);
  expectTypeOf(data.shark.casualBrawl.kills).toEqualTypeOf<number>();
  expect(data.shark.casualBrawl.assists).toBeDefined();
  expect(data.shark.casualBrawl.assists).greaterThanOrEqual(0);
  expectTypeOf(data.shark.casualBrawl.assists).toEqualTypeOf<number>();
  expect(data.shark.casualBrawl.deaths).toBeDefined();
  expect(data.shark.casualBrawl.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.shark.casualBrawl.deaths).toEqualTypeOf<number>();
  expect(data.shark.casualBrawl.KDRatio).toBeDefined();
  expect(data.shark.casualBrawl.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.shark.casualBrawl.KDRatio).toEqualTypeOf<number>();
  expect(data.shark.casualBrawl.wins).toBeDefined();
  expect(data.shark.casualBrawl.wins).greaterThanOrEqual(0);
  expectTypeOf(data.shark.casualBrawl.wins).toEqualTypeOf<number>();
  expect(data.shark.casualBrawl.losses).toBeDefined();
  expect(data.shark.casualBrawl.losses).greaterThanOrEqual(0);
  expectTypeOf(data.shark.casualBrawl.losses).toEqualTypeOf<number>();
  expect(data.shark.casualBrawl.WLRatio).toBeDefined();
  expect(data.shark.casualBrawl.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.shark.casualBrawl.WLRatio).toEqualTypeOf<number>();
  expect(data.shark.casualBrawl.finalKills).toBeDefined();
  expect(data.shark.casualBrawl.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.shark.casualBrawl.finalKills).toEqualTypeOf<number>();
  expect(data.shark.casualBrawl.finalAssists).toBeDefined();
  expect(data.shark.casualBrawl.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.shark.casualBrawl.finalAssists).toEqualTypeOf<number>();
  expect(data.shark.casualBrawl.finalDeaths).toBeDefined();
  expect(data.shark.casualBrawl.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.shark.casualBrawl.finalDeaths).toEqualTypeOf<number>();
  expect(data.shark.casualBrawl.finalKDRatio).toBeDefined();
  expect(data.shark.casualBrawl.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.shark.casualBrawl.finalKDRatio).toEqualTypeOf<number>();
  expect(data.shark.casualBrawl.playedGames).toBeDefined();
  expect(data.shark.casualBrawl.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.shark.casualBrawl.playedGames).toEqualTypeOf<number>();
  expect(data.shark.casualBrawl.witherDamage).toBeDefined();
  expect(data.shark.casualBrawl.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.shark.casualBrawl.witherDamage).toEqualTypeOf<number>();
  expect(data.shark.casualBrawl.defenderKills).toBeDefined();
  expect(data.shark.casualBrawl.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.shark.casualBrawl.defenderKills).toEqualTypeOf<number>();
  expect(data.shark.casualBrawl.walked).toBeDefined();
  expect(data.shark.casualBrawl.walked).greaterThanOrEqual(0);
  expectTypeOf(data.shark.casualBrawl.walked).toEqualTypeOf<number>();
  expect(data.shark.casualBrawl.blocksPlaced).toBeDefined();
  expect(data.shark.casualBrawl.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.shark.casualBrawl.blocksPlaced).toEqualTypeOf<number>();
  expect(data.shark.casualBrawl.blocksBroken).toBeDefined();
  expect(data.shark.casualBrawl.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.shark.casualBrawl.blocksBroken).toEqualTypeOf<number>();
  expect(data.shark.casualBrawl.meleeKills).toBeDefined();
  expect(data.shark.casualBrawl.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.shark.casualBrawl.meleeKills).toEqualTypeOf<number>();
  expect(data.shark.casualBrawl.damageDealt).toBeDefined();
  expect(data.shark.casualBrawl.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.shark.casualBrawl.damageDealt).toEqualTypeOf<number>();
  expect(data.arcanist).toBeDefined();
  expectTypeOf(data.arcanist).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.arcanist.kills).toBeDefined();
  expect(data.arcanist.kills).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.kills).toEqualTypeOf<number>();
  expect(data.arcanist.assists).toBeDefined();
  expect(data.arcanist.assists).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.assists).toEqualTypeOf<number>();
  expect(data.arcanist.deaths).toBeDefined();
  expect(data.arcanist.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.deaths).toEqualTypeOf<number>();
  expect(data.arcanist.KDRatio).toBeDefined();
  expect(data.arcanist.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.KDRatio).toEqualTypeOf<number>();
  expect(data.arcanist.wins).toBeDefined();
  expect(data.arcanist.wins).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.wins).toEqualTypeOf<number>();
  expect(data.arcanist.losses).toBeDefined();
  expect(data.arcanist.losses).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.losses).toEqualTypeOf<number>();
  expect(data.arcanist.WLRatio).toBeDefined();
  expect(data.arcanist.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.WLRatio).toEqualTypeOf<number>();
  expect(data.arcanist.finalKills).toBeDefined();
  expect(data.arcanist.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.finalKills).toEqualTypeOf<number>();
  expect(data.arcanist.finalAssists).toBeDefined();
  expect(data.arcanist.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.finalAssists).toEqualTypeOf<number>();
  expect(data.arcanist.finalDeaths).toBeDefined();
  expect(data.arcanist.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.finalDeaths).toEqualTypeOf<number>();
  expect(data.arcanist.finalKDRatio).toBeDefined();
  expect(data.arcanist.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.finalKDRatio).toEqualTypeOf<number>();
  expect(data.arcanist.playedGames).toBeDefined();
  expect(data.arcanist.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.playedGames).toEqualTypeOf<number>();
  expect(data.arcanist.witherDamage).toBeDefined();
  expect(data.arcanist.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.witherDamage).toEqualTypeOf<number>();
  expect(data.arcanist.defenderKills).toBeDefined();
  expect(data.arcanist.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.defenderKills).toEqualTypeOf<number>();
  expect(data.arcanist.walked).toBeDefined();
  expect(data.arcanist.walked).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.walked).toEqualTypeOf<number>();
  expect(data.arcanist.blocksPlaced).toBeDefined();
  expect(data.arcanist.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.blocksPlaced).toEqualTypeOf<number>();
  expect(data.arcanist.blocksBroken).toBeDefined();
  expect(data.arcanist.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.blocksBroken).toEqualTypeOf<number>();
  expect(data.arcanist.meleeKills).toBeDefined();
  expect(data.arcanist.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.meleeKills).toEqualTypeOf<number>();
  expect(data.arcanist.damageDealt).toBeDefined();
  expect(data.arcanist.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.damageDealt).toEqualTypeOf<number>();
  expect(data.arcanist.faceOff).toBeDefined();
  expectTypeOf(data.arcanist.faceOff).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.arcanist.faceOff.kills).toBeDefined();
  expect(data.arcanist.faceOff.kills).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.faceOff.kills).toEqualTypeOf<number>();
  expect(data.arcanist.faceOff.assists).toBeDefined();
  expect(data.arcanist.faceOff.assists).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.faceOff.assists).toEqualTypeOf<number>();
  expect(data.arcanist.faceOff.deaths).toBeDefined();
  expect(data.arcanist.faceOff.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.faceOff.deaths).toEqualTypeOf<number>();
  expect(data.arcanist.faceOff.KDRatio).toBeDefined();
  expect(data.arcanist.faceOff.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.faceOff.KDRatio).toEqualTypeOf<number>();
  expect(data.arcanist.faceOff.wins).toBeDefined();
  expect(data.arcanist.faceOff.wins).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.faceOff.wins).toEqualTypeOf<number>();
  expect(data.arcanist.faceOff.losses).toBeDefined();
  expect(data.arcanist.faceOff.losses).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.faceOff.losses).toEqualTypeOf<number>();
  expect(data.arcanist.faceOff.WLRatio).toBeDefined();
  expect(data.arcanist.faceOff.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.faceOff.WLRatio).toEqualTypeOf<number>();
  expect(data.arcanist.faceOff.finalKills).toBeDefined();
  expect(data.arcanist.faceOff.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.faceOff.finalKills).toEqualTypeOf<number>();
  expect(data.arcanist.faceOff.finalAssists).toBeDefined();
  expect(data.arcanist.faceOff.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.faceOff.finalAssists).toEqualTypeOf<number>();
  expect(data.arcanist.faceOff.finalDeaths).toBeDefined();
  expect(data.arcanist.faceOff.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.faceOff.finalDeaths).toEqualTypeOf<number>();
  expect(data.arcanist.faceOff.finalKDRatio).toBeDefined();
  expect(data.arcanist.faceOff.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.faceOff.finalKDRatio).toEqualTypeOf<number>();
  expect(data.arcanist.faceOff.playedGames).toBeDefined();
  expect(data.arcanist.faceOff.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.faceOff.playedGames).toEqualTypeOf<number>();
  expect(data.arcanist.faceOff.witherDamage).toBeDefined();
  expect(data.arcanist.faceOff.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.faceOff.witherDamage).toEqualTypeOf<number>();
  expect(data.arcanist.faceOff.defenderKills).toBeDefined();
  expect(data.arcanist.faceOff.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.faceOff.defenderKills).toEqualTypeOf<number>();
  expect(data.arcanist.faceOff.walked).toBeDefined();
  expect(data.arcanist.faceOff.walked).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.faceOff.walked).toEqualTypeOf<number>();
  expect(data.arcanist.faceOff.blocksPlaced).toBeDefined();
  expect(data.arcanist.faceOff.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.faceOff.blocksPlaced).toEqualTypeOf<number>();
  expect(data.arcanist.faceOff.blocksBroken).toBeDefined();
  expect(data.arcanist.faceOff.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.faceOff.blocksBroken).toEqualTypeOf<number>();
  expect(data.arcanist.faceOff.meleeKills).toBeDefined();
  expect(data.arcanist.faceOff.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.faceOff.meleeKills).toEqualTypeOf<number>();
  expect(data.arcanist.faceOff.damageDealt).toBeDefined();
  expect(data.arcanist.faceOff.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.faceOff.damageDealt).toEqualTypeOf<number>();
  expect(data.arcanist.casualBrawl).toBeDefined();
  expectTypeOf(data.arcanist.casualBrawl).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.arcanist.casualBrawl.kills).toBeDefined();
  expect(data.arcanist.casualBrawl.kills).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.casualBrawl.kills).toEqualTypeOf<number>();
  expect(data.arcanist.casualBrawl.assists).toBeDefined();
  expect(data.arcanist.casualBrawl.assists).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.casualBrawl.assists).toEqualTypeOf<number>();
  expect(data.arcanist.casualBrawl.deaths).toBeDefined();
  expect(data.arcanist.casualBrawl.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.casualBrawl.deaths).toEqualTypeOf<number>();
  expect(data.arcanist.casualBrawl.KDRatio).toBeDefined();
  expect(data.arcanist.casualBrawl.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.casualBrawl.KDRatio).toEqualTypeOf<number>();
  expect(data.arcanist.casualBrawl.wins).toBeDefined();
  expect(data.arcanist.casualBrawl.wins).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.casualBrawl.wins).toEqualTypeOf<number>();
  expect(data.arcanist.casualBrawl.losses).toBeDefined();
  expect(data.arcanist.casualBrawl.losses).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.casualBrawl.losses).toEqualTypeOf<number>();
  expect(data.arcanist.casualBrawl.WLRatio).toBeDefined();
  expect(data.arcanist.casualBrawl.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.casualBrawl.WLRatio).toEqualTypeOf<number>();
  expect(data.arcanist.casualBrawl.finalKills).toBeDefined();
  expect(data.arcanist.casualBrawl.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.casualBrawl.finalKills).toEqualTypeOf<number>();
  expect(data.arcanist.casualBrawl.finalAssists).toBeDefined();
  expect(data.arcanist.casualBrawl.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.casualBrawl.finalAssists).toEqualTypeOf<number>();
  expect(data.arcanist.casualBrawl.finalDeaths).toBeDefined();
  expect(data.arcanist.casualBrawl.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.casualBrawl.finalDeaths).toEqualTypeOf<number>();
  expect(data.arcanist.casualBrawl.finalKDRatio).toBeDefined();
  expect(data.arcanist.casualBrawl.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.casualBrawl.finalKDRatio).toEqualTypeOf<number>();
  expect(data.arcanist.casualBrawl.playedGames).toBeDefined();
  expect(data.arcanist.casualBrawl.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.casualBrawl.playedGames).toEqualTypeOf<number>();
  expect(data.arcanist.casualBrawl.witherDamage).toBeDefined();
  expect(data.arcanist.casualBrawl.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.casualBrawl.witherDamage).toEqualTypeOf<number>();
  expect(data.arcanist.casualBrawl.defenderKills).toBeDefined();
  expect(data.arcanist.casualBrawl.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.casualBrawl.defenderKills).toEqualTypeOf<number>();
  expect(data.arcanist.casualBrawl.walked).toBeDefined();
  expect(data.arcanist.casualBrawl.walked).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.casualBrawl.walked).toEqualTypeOf<number>();
  expect(data.arcanist.casualBrawl.blocksPlaced).toBeDefined();
  expect(data.arcanist.casualBrawl.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.casualBrawl.blocksPlaced).toEqualTypeOf<number>();
  expect(data.arcanist.casualBrawl.blocksBroken).toBeDefined();
  expect(data.arcanist.casualBrawl.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.casualBrawl.blocksBroken).toEqualTypeOf<number>();
  expect(data.arcanist.casualBrawl.meleeKills).toBeDefined();
  expect(data.arcanist.casualBrawl.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.casualBrawl.meleeKills).toEqualTypeOf<number>();
  expect(data.arcanist.casualBrawl.damageDealt).toBeDefined();
  expect(data.arcanist.casualBrawl.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.arcanist.casualBrawl.damageDealt).toEqualTypeOf<number>();
  expect(data.deadlord).toBeDefined();
  expectTypeOf(data.deadlord).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.deadlord.kills).toBeDefined();
  expect(data.deadlord.kills).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.kills).toEqualTypeOf<number>();
  expect(data.deadlord.assists).toBeDefined();
  expect(data.deadlord.assists).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.assists).toEqualTypeOf<number>();
  expect(data.deadlord.deaths).toBeDefined();
  expect(data.deadlord.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.deaths).toEqualTypeOf<number>();
  expect(data.deadlord.KDRatio).toBeDefined();
  expect(data.deadlord.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.KDRatio).toEqualTypeOf<number>();
  expect(data.deadlord.wins).toBeDefined();
  expect(data.deadlord.wins).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.wins).toEqualTypeOf<number>();
  expect(data.deadlord.losses).toBeDefined();
  expect(data.deadlord.losses).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.losses).toEqualTypeOf<number>();
  expect(data.deadlord.WLRatio).toBeDefined();
  expect(data.deadlord.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.WLRatio).toEqualTypeOf<number>();
  expect(data.deadlord.finalKills).toBeDefined();
  expect(data.deadlord.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.finalKills).toEqualTypeOf<number>();
  expect(data.deadlord.finalAssists).toBeDefined();
  expect(data.deadlord.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.finalAssists).toEqualTypeOf<number>();
  expect(data.deadlord.finalDeaths).toBeDefined();
  expect(data.deadlord.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.finalDeaths).toEqualTypeOf<number>();
  expect(data.deadlord.finalKDRatio).toBeDefined();
  expect(data.deadlord.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.finalKDRatio).toEqualTypeOf<number>();
  expect(data.deadlord.playedGames).toBeDefined();
  expect(data.deadlord.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.playedGames).toEqualTypeOf<number>();
  expect(data.deadlord.witherDamage).toBeDefined();
  expect(data.deadlord.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.witherDamage).toEqualTypeOf<number>();
  expect(data.deadlord.defenderKills).toBeDefined();
  expect(data.deadlord.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.defenderKills).toEqualTypeOf<number>();
  expect(data.deadlord.walked).toBeDefined();
  expect(data.deadlord.walked).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.walked).toEqualTypeOf<number>();
  expect(data.deadlord.blocksPlaced).toBeDefined();
  expect(data.deadlord.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.blocksPlaced).toEqualTypeOf<number>();
  expect(data.deadlord.blocksBroken).toBeDefined();
  expect(data.deadlord.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.blocksBroken).toEqualTypeOf<number>();
  expect(data.deadlord.meleeKills).toBeDefined();
  expect(data.deadlord.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.meleeKills).toEqualTypeOf<number>();
  expect(data.deadlord.damageDealt).toBeDefined();
  expect(data.deadlord.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.damageDealt).toEqualTypeOf<number>();
  expect(data.deadlord.faceOff).toBeDefined();
  expectTypeOf(data.deadlord.faceOff).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.deadlord.faceOff.kills).toBeDefined();
  expect(data.deadlord.faceOff.kills).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.faceOff.kills).toEqualTypeOf<number>();
  expect(data.deadlord.faceOff.assists).toBeDefined();
  expect(data.deadlord.faceOff.assists).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.faceOff.assists).toEqualTypeOf<number>();
  expect(data.deadlord.faceOff.deaths).toBeDefined();
  expect(data.deadlord.faceOff.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.faceOff.deaths).toEqualTypeOf<number>();
  expect(data.deadlord.faceOff.KDRatio).toBeDefined();
  expect(data.deadlord.faceOff.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.faceOff.KDRatio).toEqualTypeOf<number>();
  expect(data.deadlord.faceOff.wins).toBeDefined();
  expect(data.deadlord.faceOff.wins).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.faceOff.wins).toEqualTypeOf<number>();
  expect(data.deadlord.faceOff.losses).toBeDefined();
  expect(data.deadlord.faceOff.losses).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.faceOff.losses).toEqualTypeOf<number>();
  expect(data.deadlord.faceOff.WLRatio).toBeDefined();
  expect(data.deadlord.faceOff.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.faceOff.WLRatio).toEqualTypeOf<number>();
  expect(data.deadlord.faceOff.finalKills).toBeDefined();
  expect(data.deadlord.faceOff.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.faceOff.finalKills).toEqualTypeOf<number>();
  expect(data.deadlord.faceOff.finalAssists).toBeDefined();
  expect(data.deadlord.faceOff.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.faceOff.finalAssists).toEqualTypeOf<number>();
  expect(data.deadlord.faceOff.finalDeaths).toBeDefined();
  expect(data.deadlord.faceOff.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.faceOff.finalDeaths).toEqualTypeOf<number>();
  expect(data.deadlord.faceOff.finalKDRatio).toBeDefined();
  expect(data.deadlord.faceOff.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.faceOff.finalKDRatio).toEqualTypeOf<number>();
  expect(data.deadlord.faceOff.playedGames).toBeDefined();
  expect(data.deadlord.faceOff.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.faceOff.playedGames).toEqualTypeOf<number>();
  expect(data.deadlord.faceOff.witherDamage).toBeDefined();
  expect(data.deadlord.faceOff.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.faceOff.witherDamage).toEqualTypeOf<number>();
  expect(data.deadlord.faceOff.defenderKills).toBeDefined();
  expect(data.deadlord.faceOff.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.faceOff.defenderKills).toEqualTypeOf<number>();
  expect(data.deadlord.faceOff.walked).toBeDefined();
  expect(data.deadlord.faceOff.walked).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.faceOff.walked).toEqualTypeOf<number>();
  expect(data.deadlord.faceOff.blocksPlaced).toBeDefined();
  expect(data.deadlord.faceOff.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.faceOff.blocksPlaced).toEqualTypeOf<number>();
  expect(data.deadlord.faceOff.blocksBroken).toBeDefined();
  expect(data.deadlord.faceOff.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.faceOff.blocksBroken).toEqualTypeOf<number>();
  expect(data.deadlord.faceOff.meleeKills).toBeDefined();
  expect(data.deadlord.faceOff.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.faceOff.meleeKills).toEqualTypeOf<number>();
  expect(data.deadlord.faceOff.damageDealt).toBeDefined();
  expect(data.deadlord.faceOff.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.faceOff.damageDealt).toEqualTypeOf<number>();
  expect(data.deadlord.casualBrawl).toBeDefined();
  expectTypeOf(data.deadlord.casualBrawl).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.deadlord.casualBrawl.kills).toBeDefined();
  expect(data.deadlord.casualBrawl.kills).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.casualBrawl.kills).toEqualTypeOf<number>();
  expect(data.deadlord.casualBrawl.assists).toBeDefined();
  expect(data.deadlord.casualBrawl.assists).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.casualBrawl.assists).toEqualTypeOf<number>();
  expect(data.deadlord.casualBrawl.deaths).toBeDefined();
  expect(data.deadlord.casualBrawl.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.casualBrawl.deaths).toEqualTypeOf<number>();
  expect(data.deadlord.casualBrawl.KDRatio).toBeDefined();
  expect(data.deadlord.casualBrawl.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.casualBrawl.KDRatio).toEqualTypeOf<number>();
  expect(data.deadlord.casualBrawl.wins).toBeDefined();
  expect(data.deadlord.casualBrawl.wins).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.casualBrawl.wins).toEqualTypeOf<number>();
  expect(data.deadlord.casualBrawl.losses).toBeDefined();
  expect(data.deadlord.casualBrawl.losses).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.casualBrawl.losses).toEqualTypeOf<number>();
  expect(data.deadlord.casualBrawl.WLRatio).toBeDefined();
  expect(data.deadlord.casualBrawl.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.casualBrawl.WLRatio).toEqualTypeOf<number>();
  expect(data.deadlord.casualBrawl.finalKills).toBeDefined();
  expect(data.deadlord.casualBrawl.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.casualBrawl.finalKills).toEqualTypeOf<number>();
  expect(data.deadlord.casualBrawl.finalAssists).toBeDefined();
  expect(data.deadlord.casualBrawl.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.casualBrawl.finalAssists).toEqualTypeOf<number>();
  expect(data.deadlord.casualBrawl.finalDeaths).toBeDefined();
  expect(data.deadlord.casualBrawl.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.casualBrawl.finalDeaths).toEqualTypeOf<number>();
  expect(data.deadlord.casualBrawl.finalKDRatio).toBeDefined();
  expect(data.deadlord.casualBrawl.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.casualBrawl.finalKDRatio).toEqualTypeOf<number>();
  expect(data.deadlord.casualBrawl.playedGames).toBeDefined();
  expect(data.deadlord.casualBrawl.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.casualBrawl.playedGames).toEqualTypeOf<number>();
  expect(data.deadlord.casualBrawl.witherDamage).toBeDefined();
  expect(data.deadlord.casualBrawl.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.casualBrawl.witherDamage).toEqualTypeOf<number>();
  expect(data.deadlord.casualBrawl.defenderKills).toBeDefined();
  expect(data.deadlord.casualBrawl.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.casualBrawl.defenderKills).toEqualTypeOf<number>();
  expect(data.deadlord.casualBrawl.walked).toBeDefined();
  expect(data.deadlord.casualBrawl.walked).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.casualBrawl.walked).toEqualTypeOf<number>();
  expect(data.deadlord.casualBrawl.blocksPlaced).toBeDefined();
  expect(data.deadlord.casualBrawl.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.casualBrawl.blocksPlaced).toEqualTypeOf<number>();
  expect(data.deadlord.casualBrawl.blocksBroken).toBeDefined();
  expect(data.deadlord.casualBrawl.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.casualBrawl.blocksBroken).toEqualTypeOf<number>();
  expect(data.deadlord.casualBrawl.meleeKills).toBeDefined();
  expect(data.deadlord.casualBrawl.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.casualBrawl.meleeKills).toEqualTypeOf<number>();
  expect(data.deadlord.casualBrawl.damageDealt).toBeDefined();
  expect(data.deadlord.casualBrawl.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.deadlord.casualBrawl.damageDealt).toEqualTypeOf<number>();
  expect(data.golem).toBeDefined();
  expectTypeOf(data.golem).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.golem.kills).toBeDefined();
  expect(data.golem.kills).greaterThanOrEqual(0);
  expectTypeOf(data.golem.kills).toEqualTypeOf<number>();
  expect(data.golem.assists).toBeDefined();
  expect(data.golem.assists).greaterThanOrEqual(0);
  expectTypeOf(data.golem.assists).toEqualTypeOf<number>();
  expect(data.golem.deaths).toBeDefined();
  expect(data.golem.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.golem.deaths).toEqualTypeOf<number>();
  expect(data.golem.KDRatio).toBeDefined();
  expect(data.golem.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.golem.KDRatio).toEqualTypeOf<number>();
  expect(data.golem.wins).toBeDefined();
  expect(data.golem.wins).greaterThanOrEqual(0);
  expectTypeOf(data.golem.wins).toEqualTypeOf<number>();
  expect(data.golem.losses).toBeDefined();
  expect(data.golem.losses).greaterThanOrEqual(0);
  expectTypeOf(data.golem.losses).toEqualTypeOf<number>();
  expect(data.golem.WLRatio).toBeDefined();
  expect(data.golem.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.golem.WLRatio).toEqualTypeOf<number>();
  expect(data.golem.finalKills).toBeDefined();
  expect(data.golem.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.golem.finalKills).toEqualTypeOf<number>();
  expect(data.golem.finalAssists).toBeDefined();
  expect(data.golem.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.golem.finalAssists).toEqualTypeOf<number>();
  expect(data.golem.finalDeaths).toBeDefined();
  expect(data.golem.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.golem.finalDeaths).toEqualTypeOf<number>();
  expect(data.golem.finalKDRatio).toBeDefined();
  expect(data.golem.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.golem.finalKDRatio).toEqualTypeOf<number>();
  expect(data.golem.playedGames).toBeDefined();
  expect(data.golem.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.golem.playedGames).toEqualTypeOf<number>();
  expect(data.golem.witherDamage).toBeDefined();
  expect(data.golem.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.golem.witherDamage).toEqualTypeOf<number>();
  expect(data.golem.defenderKills).toBeDefined();
  expect(data.golem.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.golem.defenderKills).toEqualTypeOf<number>();
  expect(data.golem.walked).toBeDefined();
  expect(data.golem.walked).greaterThanOrEqual(0);
  expectTypeOf(data.golem.walked).toEqualTypeOf<number>();
  expect(data.golem.blocksPlaced).toBeDefined();
  expect(data.golem.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.golem.blocksPlaced).toEqualTypeOf<number>();
  expect(data.golem.blocksBroken).toBeDefined();
  expect(data.golem.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.golem.blocksBroken).toEqualTypeOf<number>();
  expect(data.golem.meleeKills).toBeDefined();
  expect(data.golem.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.golem.meleeKills).toEqualTypeOf<number>();
  expect(data.golem.damageDealt).toBeDefined();
  expect(data.golem.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.golem.damageDealt).toEqualTypeOf<number>();
  expect(data.golem.faceOff).toBeDefined();
  expectTypeOf(data.golem.faceOff).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.golem.faceOff.kills).toBeDefined();
  expect(data.golem.faceOff.kills).greaterThanOrEqual(0);
  expectTypeOf(data.golem.faceOff.kills).toEqualTypeOf<number>();
  expect(data.golem.faceOff.assists).toBeDefined();
  expect(data.golem.faceOff.assists).greaterThanOrEqual(0);
  expectTypeOf(data.golem.faceOff.assists).toEqualTypeOf<number>();
  expect(data.golem.faceOff.deaths).toBeDefined();
  expect(data.golem.faceOff.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.golem.faceOff.deaths).toEqualTypeOf<number>();
  expect(data.golem.faceOff.KDRatio).toBeDefined();
  expect(data.golem.faceOff.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.golem.faceOff.KDRatio).toEqualTypeOf<number>();
  expect(data.golem.faceOff.wins).toBeDefined();
  expect(data.golem.faceOff.wins).greaterThanOrEqual(0);
  expectTypeOf(data.golem.faceOff.wins).toEqualTypeOf<number>();
  expect(data.golem.faceOff.losses).toBeDefined();
  expect(data.golem.faceOff.losses).greaterThanOrEqual(0);
  expectTypeOf(data.golem.faceOff.losses).toEqualTypeOf<number>();
  expect(data.golem.faceOff.WLRatio).toBeDefined();
  expect(data.golem.faceOff.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.golem.faceOff.WLRatio).toEqualTypeOf<number>();
  expect(data.golem.faceOff.finalKills).toBeDefined();
  expect(data.golem.faceOff.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.golem.faceOff.finalKills).toEqualTypeOf<number>();
  expect(data.golem.faceOff.finalAssists).toBeDefined();
  expect(data.golem.faceOff.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.golem.faceOff.finalAssists).toEqualTypeOf<number>();
  expect(data.golem.faceOff.finalDeaths).toBeDefined();
  expect(data.golem.faceOff.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.golem.faceOff.finalDeaths).toEqualTypeOf<number>();
  expect(data.golem.faceOff.finalKDRatio).toBeDefined();
  expect(data.golem.faceOff.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.golem.faceOff.finalKDRatio).toEqualTypeOf<number>();
  expect(data.golem.faceOff.playedGames).toBeDefined();
  expect(data.golem.faceOff.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.golem.faceOff.playedGames).toEqualTypeOf<number>();
  expect(data.golem.faceOff.witherDamage).toBeDefined();
  expect(data.golem.faceOff.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.golem.faceOff.witherDamage).toEqualTypeOf<number>();
  expect(data.golem.faceOff.defenderKills).toBeDefined();
  expect(data.golem.faceOff.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.golem.faceOff.defenderKills).toEqualTypeOf<number>();
  expect(data.golem.faceOff.walked).toBeDefined();
  expect(data.golem.faceOff.walked).greaterThanOrEqual(0);
  expectTypeOf(data.golem.faceOff.walked).toEqualTypeOf<number>();
  expect(data.golem.faceOff.blocksPlaced).toBeDefined();
  expect(data.golem.faceOff.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.golem.faceOff.blocksPlaced).toEqualTypeOf<number>();
  expect(data.golem.faceOff.blocksBroken).toBeDefined();
  expect(data.golem.faceOff.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.golem.faceOff.blocksBroken).toEqualTypeOf<number>();
  expect(data.golem.faceOff.meleeKills).toBeDefined();
  expect(data.golem.faceOff.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.golem.faceOff.meleeKills).toEqualTypeOf<number>();
  expect(data.golem.faceOff.damageDealt).toBeDefined();
  expect(data.golem.faceOff.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.golem.faceOff.damageDealt).toEqualTypeOf<number>();
  expect(data.golem.casualBrawl).toBeDefined();
  expectTypeOf(data.golem.casualBrawl).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.golem.casualBrawl.kills).toBeDefined();
  expect(data.golem.casualBrawl.kills).greaterThanOrEqual(0);
  expectTypeOf(data.golem.casualBrawl.kills).toEqualTypeOf<number>();
  expect(data.golem.casualBrawl.assists).toBeDefined();
  expect(data.golem.casualBrawl.assists).greaterThanOrEqual(0);
  expectTypeOf(data.golem.casualBrawl.assists).toEqualTypeOf<number>();
  expect(data.golem.casualBrawl.deaths).toBeDefined();
  expect(data.golem.casualBrawl.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.golem.casualBrawl.deaths).toEqualTypeOf<number>();
  expect(data.golem.casualBrawl.KDRatio).toBeDefined();
  expect(data.golem.casualBrawl.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.golem.casualBrawl.KDRatio).toEqualTypeOf<number>();
  expect(data.golem.casualBrawl.wins).toBeDefined();
  expect(data.golem.casualBrawl.wins).greaterThanOrEqual(0);
  expectTypeOf(data.golem.casualBrawl.wins).toEqualTypeOf<number>();
  expect(data.golem.casualBrawl.losses).toBeDefined();
  expect(data.golem.casualBrawl.losses).greaterThanOrEqual(0);
  expectTypeOf(data.golem.casualBrawl.losses).toEqualTypeOf<number>();
  expect(data.golem.casualBrawl.WLRatio).toBeDefined();
  expect(data.golem.casualBrawl.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.golem.casualBrawl.WLRatio).toEqualTypeOf<number>();
  expect(data.golem.casualBrawl.finalKills).toBeDefined();
  expect(data.golem.casualBrawl.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.golem.casualBrawl.finalKills).toEqualTypeOf<number>();
  expect(data.golem.casualBrawl.finalAssists).toBeDefined();
  expect(data.golem.casualBrawl.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.golem.casualBrawl.finalAssists).toEqualTypeOf<number>();
  expect(data.golem.casualBrawl.finalDeaths).toBeDefined();
  expect(data.golem.casualBrawl.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.golem.casualBrawl.finalDeaths).toEqualTypeOf<number>();
  expect(data.golem.casualBrawl.finalKDRatio).toBeDefined();
  expect(data.golem.casualBrawl.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.golem.casualBrawl.finalKDRatio).toEqualTypeOf<number>();
  expect(data.golem.casualBrawl.playedGames).toBeDefined();
  expect(data.golem.casualBrawl.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.golem.casualBrawl.playedGames).toEqualTypeOf<number>();
  expect(data.golem.casualBrawl.witherDamage).toBeDefined();
  expect(data.golem.casualBrawl.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.golem.casualBrawl.witherDamage).toEqualTypeOf<number>();
  expect(data.golem.casualBrawl.defenderKills).toBeDefined();
  expect(data.golem.casualBrawl.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.golem.casualBrawl.defenderKills).toEqualTypeOf<number>();
  expect(data.golem.casualBrawl.walked).toBeDefined();
  expect(data.golem.casualBrawl.walked).greaterThanOrEqual(0);
  expectTypeOf(data.golem.casualBrawl.walked).toEqualTypeOf<number>();
  expect(data.golem.casualBrawl.blocksPlaced).toBeDefined();
  expect(data.golem.casualBrawl.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.golem.casualBrawl.blocksPlaced).toEqualTypeOf<number>();
  expect(data.golem.casualBrawl.blocksBroken).toBeDefined();
  expect(data.golem.casualBrawl.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.golem.casualBrawl.blocksBroken).toEqualTypeOf<number>();
  expect(data.golem.casualBrawl.meleeKills).toBeDefined();
  expect(data.golem.casualBrawl.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.golem.casualBrawl.meleeKills).toEqualTypeOf<number>();
  expect(data.golem.casualBrawl.damageDealt).toBeDefined();
  expect(data.golem.casualBrawl.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.golem.casualBrawl.damageDealt).toEqualTypeOf<number>();
  expect(data.herobrine).toBeDefined();
  expectTypeOf(data.herobrine).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.herobrine.kills).toBeDefined();
  expect(data.herobrine.kills).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.kills).toEqualTypeOf<number>();
  expect(data.herobrine.assists).toBeDefined();
  expect(data.herobrine.assists).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.assists).toEqualTypeOf<number>();
  expect(data.herobrine.deaths).toBeDefined();
  expect(data.herobrine.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.deaths).toEqualTypeOf<number>();
  expect(data.herobrine.KDRatio).toBeDefined();
  expect(data.herobrine.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.KDRatio).toEqualTypeOf<number>();
  expect(data.herobrine.wins).toBeDefined();
  expect(data.herobrine.wins).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.wins).toEqualTypeOf<number>();
  expect(data.herobrine.losses).toBeDefined();
  expect(data.herobrine.losses).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.losses).toEqualTypeOf<number>();
  expect(data.herobrine.WLRatio).toBeDefined();
  expect(data.herobrine.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.WLRatio).toEqualTypeOf<number>();
  expect(data.herobrine.finalKills).toBeDefined();
  expect(data.herobrine.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.finalKills).toEqualTypeOf<number>();
  expect(data.herobrine.finalAssists).toBeDefined();
  expect(data.herobrine.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.finalAssists).toEqualTypeOf<number>();
  expect(data.herobrine.finalDeaths).toBeDefined();
  expect(data.herobrine.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.finalDeaths).toEqualTypeOf<number>();
  expect(data.herobrine.finalKDRatio).toBeDefined();
  expect(data.herobrine.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.finalKDRatio).toEqualTypeOf<number>();
  expect(data.herobrine.playedGames).toBeDefined();
  expect(data.herobrine.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.playedGames).toEqualTypeOf<number>();
  expect(data.herobrine.witherDamage).toBeDefined();
  expect(data.herobrine.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.witherDamage).toEqualTypeOf<number>();
  expect(data.herobrine.defenderKills).toBeDefined();
  expect(data.herobrine.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.defenderKills).toEqualTypeOf<number>();
  expect(data.herobrine.walked).toBeDefined();
  expect(data.herobrine.walked).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.walked).toEqualTypeOf<number>();
  expect(data.herobrine.blocksPlaced).toBeDefined();
  expect(data.herobrine.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.blocksPlaced).toEqualTypeOf<number>();
  expect(data.herobrine.blocksBroken).toBeDefined();
  expect(data.herobrine.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.blocksBroken).toEqualTypeOf<number>();
  expect(data.herobrine.meleeKills).toBeDefined();
  expect(data.herobrine.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.meleeKills).toEqualTypeOf<number>();
  expect(data.herobrine.damageDealt).toBeDefined();
  expect(data.herobrine.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.damageDealt).toEqualTypeOf<number>();
  expect(data.herobrine.faceOff).toBeDefined();
  expectTypeOf(data.herobrine.faceOff).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.herobrine.faceOff.kills).toBeDefined();
  expect(data.herobrine.faceOff.kills).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.faceOff.kills).toEqualTypeOf<number>();
  expect(data.herobrine.faceOff.assists).toBeDefined();
  expect(data.herobrine.faceOff.assists).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.faceOff.assists).toEqualTypeOf<number>();
  expect(data.herobrine.faceOff.deaths).toBeDefined();
  expect(data.herobrine.faceOff.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.faceOff.deaths).toEqualTypeOf<number>();
  expect(data.herobrine.faceOff.KDRatio).toBeDefined();
  expect(data.herobrine.faceOff.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.faceOff.KDRatio).toEqualTypeOf<number>();
  expect(data.herobrine.faceOff.wins).toBeDefined();
  expect(data.herobrine.faceOff.wins).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.faceOff.wins).toEqualTypeOf<number>();
  expect(data.herobrine.faceOff.losses).toBeDefined();
  expect(data.herobrine.faceOff.losses).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.faceOff.losses).toEqualTypeOf<number>();
  expect(data.herobrine.faceOff.WLRatio).toBeDefined();
  expect(data.herobrine.faceOff.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.faceOff.WLRatio).toEqualTypeOf<number>();
  expect(data.herobrine.faceOff.finalKills).toBeDefined();
  expect(data.herobrine.faceOff.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.faceOff.finalKills).toEqualTypeOf<number>();
  expect(data.herobrine.faceOff.finalAssists).toBeDefined();
  expect(data.herobrine.faceOff.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.faceOff.finalAssists).toEqualTypeOf<number>();
  expect(data.herobrine.faceOff.finalDeaths).toBeDefined();
  expect(data.herobrine.faceOff.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.faceOff.finalDeaths).toEqualTypeOf<number>();
  expect(data.herobrine.faceOff.finalKDRatio).toBeDefined();
  expect(data.herobrine.faceOff.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.faceOff.finalKDRatio).toEqualTypeOf<number>();
  expect(data.herobrine.faceOff.playedGames).toBeDefined();
  expect(data.herobrine.faceOff.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.faceOff.playedGames).toEqualTypeOf<number>();
  expect(data.herobrine.faceOff.witherDamage).toBeDefined();
  expect(data.herobrine.faceOff.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.faceOff.witherDamage).toEqualTypeOf<number>();
  expect(data.herobrine.faceOff.defenderKills).toBeDefined();
  expect(data.herobrine.faceOff.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.faceOff.defenderKills).toEqualTypeOf<number>();
  expect(data.herobrine.faceOff.walked).toBeDefined();
  expect(data.herobrine.faceOff.walked).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.faceOff.walked).toEqualTypeOf<number>();
  expect(data.herobrine.faceOff.blocksPlaced).toBeDefined();
  expect(data.herobrine.faceOff.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.faceOff.blocksPlaced).toEqualTypeOf<number>();
  expect(data.herobrine.faceOff.blocksBroken).toBeDefined();
  expect(data.herobrine.faceOff.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.faceOff.blocksBroken).toEqualTypeOf<number>();
  expect(data.herobrine.faceOff.meleeKills).toBeDefined();
  expect(data.herobrine.faceOff.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.faceOff.meleeKills).toEqualTypeOf<number>();
  expect(data.herobrine.faceOff.damageDealt).toBeDefined();
  expect(data.herobrine.faceOff.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.faceOff.damageDealt).toEqualTypeOf<number>();
  expect(data.herobrine.casualBrawl).toBeDefined();
  expectTypeOf(data.herobrine.casualBrawl).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.herobrine.casualBrawl.kills).toBeDefined();
  expect(data.herobrine.casualBrawl.kills).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.casualBrawl.kills).toEqualTypeOf<number>();
  expect(data.herobrine.casualBrawl.assists).toBeDefined();
  expect(data.herobrine.casualBrawl.assists).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.casualBrawl.assists).toEqualTypeOf<number>();
  expect(data.herobrine.casualBrawl.deaths).toBeDefined();
  expect(data.herobrine.casualBrawl.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.casualBrawl.deaths).toEqualTypeOf<number>();
  expect(data.herobrine.casualBrawl.KDRatio).toBeDefined();
  expect(data.herobrine.casualBrawl.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.casualBrawl.KDRatio).toEqualTypeOf<number>();
  expect(data.herobrine.casualBrawl.wins).toBeDefined();
  expect(data.herobrine.casualBrawl.wins).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.casualBrawl.wins).toEqualTypeOf<number>();
  expect(data.herobrine.casualBrawl.losses).toBeDefined();
  expect(data.herobrine.casualBrawl.losses).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.casualBrawl.losses).toEqualTypeOf<number>();
  expect(data.herobrine.casualBrawl.WLRatio).toBeDefined();
  expect(data.herobrine.casualBrawl.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.casualBrawl.WLRatio).toEqualTypeOf<number>();
  expect(data.herobrine.casualBrawl.finalKills).toBeDefined();
  expect(data.herobrine.casualBrawl.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.casualBrawl.finalKills).toEqualTypeOf<number>();
  expect(data.herobrine.casualBrawl.finalAssists).toBeDefined();
  expect(data.herobrine.casualBrawl.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.casualBrawl.finalAssists).toEqualTypeOf<number>();
  expect(data.herobrine.casualBrawl.finalDeaths).toBeDefined();
  expect(data.herobrine.casualBrawl.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.casualBrawl.finalDeaths).toEqualTypeOf<number>();
  expect(data.herobrine.casualBrawl.finalKDRatio).toBeDefined();
  expect(data.herobrine.casualBrawl.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.casualBrawl.finalKDRatio).toEqualTypeOf<number>();
  expect(data.herobrine.casualBrawl.playedGames).toBeDefined();
  expect(data.herobrine.casualBrawl.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.casualBrawl.playedGames).toEqualTypeOf<number>();
  expect(data.herobrine.casualBrawl.witherDamage).toBeDefined();
  expect(data.herobrine.casualBrawl.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.casualBrawl.witherDamage).toEqualTypeOf<number>();
  expect(data.herobrine.casualBrawl.defenderKills).toBeDefined();
  expect(data.herobrine.casualBrawl.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.casualBrawl.defenderKills).toEqualTypeOf<number>();
  expect(data.herobrine.casualBrawl.walked).toBeDefined();
  expect(data.herobrine.casualBrawl.walked).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.casualBrawl.walked).toEqualTypeOf<number>();
  expect(data.herobrine.casualBrawl.blocksPlaced).toBeDefined();
  expect(data.herobrine.casualBrawl.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.casualBrawl.blocksPlaced).toEqualTypeOf<number>();
  expect(data.herobrine.casualBrawl.blocksBroken).toBeDefined();
  expect(data.herobrine.casualBrawl.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.casualBrawl.blocksBroken).toEqualTypeOf<number>();
  expect(data.herobrine.casualBrawl.meleeKills).toBeDefined();
  expect(data.herobrine.casualBrawl.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.casualBrawl.meleeKills).toEqualTypeOf<number>();
  expect(data.herobrine.casualBrawl.damageDealt).toBeDefined();
  expect(data.herobrine.casualBrawl.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.herobrine.casualBrawl.damageDealt).toEqualTypeOf<number>();
  expect(data.pigman).toBeDefined();
  expectTypeOf(data.pigman).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.pigman.kills).toBeDefined();
  expect(data.pigman.kills).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.kills).toEqualTypeOf<number>();
  expect(data.pigman.assists).toBeDefined();
  expect(data.pigman.assists).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.assists).toEqualTypeOf<number>();
  expect(data.pigman.deaths).toBeDefined();
  expect(data.pigman.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.deaths).toEqualTypeOf<number>();
  expect(data.pigman.KDRatio).toBeDefined();
  expect(data.pigman.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.KDRatio).toEqualTypeOf<number>();
  expect(data.pigman.wins).toBeDefined();
  expect(data.pigman.wins).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.wins).toEqualTypeOf<number>();
  expect(data.pigman.losses).toBeDefined();
  expect(data.pigman.losses).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.losses).toEqualTypeOf<number>();
  expect(data.pigman.WLRatio).toBeDefined();
  expect(data.pigman.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.WLRatio).toEqualTypeOf<number>();
  expect(data.pigman.finalKills).toBeDefined();
  expect(data.pigman.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.finalKills).toEqualTypeOf<number>();
  expect(data.pigman.finalAssists).toBeDefined();
  expect(data.pigman.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.finalAssists).toEqualTypeOf<number>();
  expect(data.pigman.finalDeaths).toBeDefined();
  expect(data.pigman.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.finalDeaths).toEqualTypeOf<number>();
  expect(data.pigman.finalKDRatio).toBeDefined();
  expect(data.pigman.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.finalKDRatio).toEqualTypeOf<number>();
  expect(data.pigman.playedGames).toBeDefined();
  expect(data.pigman.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.playedGames).toEqualTypeOf<number>();
  expect(data.pigman.witherDamage).toBeDefined();
  expect(data.pigman.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.witherDamage).toEqualTypeOf<number>();
  expect(data.pigman.defenderKills).toBeDefined();
  expect(data.pigman.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.defenderKills).toEqualTypeOf<number>();
  expect(data.pigman.walked).toBeDefined();
  expect(data.pigman.walked).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.walked).toEqualTypeOf<number>();
  expect(data.pigman.blocksPlaced).toBeDefined();
  expect(data.pigman.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.blocksPlaced).toEqualTypeOf<number>();
  expect(data.pigman.blocksBroken).toBeDefined();
  expect(data.pigman.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.blocksBroken).toEqualTypeOf<number>();
  expect(data.pigman.meleeKills).toBeDefined();
  expect(data.pigman.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.meleeKills).toEqualTypeOf<number>();
  expect(data.pigman.damageDealt).toBeDefined();
  expect(data.pigman.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.damageDealt).toEqualTypeOf<number>();
  expect(data.pigman.faceOff).toBeDefined();
  expectTypeOf(data.pigman.faceOff).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.pigman.faceOff.kills).toBeDefined();
  expect(data.pigman.faceOff.kills).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.faceOff.kills).toEqualTypeOf<number>();
  expect(data.pigman.faceOff.assists).toBeDefined();
  expect(data.pigman.faceOff.assists).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.faceOff.assists).toEqualTypeOf<number>();
  expect(data.pigman.faceOff.deaths).toBeDefined();
  expect(data.pigman.faceOff.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.faceOff.deaths).toEqualTypeOf<number>();
  expect(data.pigman.faceOff.KDRatio).toBeDefined();
  expect(data.pigman.faceOff.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.faceOff.KDRatio).toEqualTypeOf<number>();
  expect(data.pigman.faceOff.wins).toBeDefined();
  expect(data.pigman.faceOff.wins).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.faceOff.wins).toEqualTypeOf<number>();
  expect(data.pigman.faceOff.losses).toBeDefined();
  expect(data.pigman.faceOff.losses).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.faceOff.losses).toEqualTypeOf<number>();
  expect(data.pigman.faceOff.WLRatio).toBeDefined();
  expect(data.pigman.faceOff.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.faceOff.WLRatio).toEqualTypeOf<number>();
  expect(data.pigman.faceOff.finalKills).toBeDefined();
  expect(data.pigman.faceOff.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.faceOff.finalKills).toEqualTypeOf<number>();
  expect(data.pigman.faceOff.finalAssists).toBeDefined();
  expect(data.pigman.faceOff.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.faceOff.finalAssists).toEqualTypeOf<number>();
  expect(data.pigman.faceOff.finalDeaths).toBeDefined();
  expect(data.pigman.faceOff.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.faceOff.finalDeaths).toEqualTypeOf<number>();
  expect(data.pigman.faceOff.finalKDRatio).toBeDefined();
  expect(data.pigman.faceOff.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.faceOff.finalKDRatio).toEqualTypeOf<number>();
  expect(data.pigman.faceOff.playedGames).toBeDefined();
  expect(data.pigman.faceOff.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.faceOff.playedGames).toEqualTypeOf<number>();
  expect(data.pigman.faceOff.witherDamage).toBeDefined();
  expect(data.pigman.faceOff.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.faceOff.witherDamage).toEqualTypeOf<number>();
  expect(data.pigman.faceOff.defenderKills).toBeDefined();
  expect(data.pigman.faceOff.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.faceOff.defenderKills).toEqualTypeOf<number>();
  expect(data.pigman.faceOff.walked).toBeDefined();
  expect(data.pigman.faceOff.walked).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.faceOff.walked).toEqualTypeOf<number>();
  expect(data.pigman.faceOff.blocksPlaced).toBeDefined();
  expect(data.pigman.faceOff.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.faceOff.blocksPlaced).toEqualTypeOf<number>();
  expect(data.pigman.faceOff.blocksBroken).toBeDefined();
  expect(data.pigman.faceOff.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.faceOff.blocksBroken).toEqualTypeOf<number>();
  expect(data.pigman.faceOff.meleeKills).toBeDefined();
  expect(data.pigman.faceOff.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.faceOff.meleeKills).toEqualTypeOf<number>();
  expect(data.pigman.faceOff.damageDealt).toBeDefined();
  expect(data.pigman.faceOff.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.faceOff.damageDealt).toEqualTypeOf<number>();
  expect(data.pigman.casualBrawl).toBeDefined();
  expectTypeOf(data.pigman.casualBrawl).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.pigman.casualBrawl.kills).toBeDefined();
  expect(data.pigman.casualBrawl.kills).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.casualBrawl.kills).toEqualTypeOf<number>();
  expect(data.pigman.casualBrawl.assists).toBeDefined();
  expect(data.pigman.casualBrawl.assists).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.casualBrawl.assists).toEqualTypeOf<number>();
  expect(data.pigman.casualBrawl.deaths).toBeDefined();
  expect(data.pigman.casualBrawl.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.casualBrawl.deaths).toEqualTypeOf<number>();
  expect(data.pigman.casualBrawl.KDRatio).toBeDefined();
  expect(data.pigman.casualBrawl.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.casualBrawl.KDRatio).toEqualTypeOf<number>();
  expect(data.pigman.casualBrawl.wins).toBeDefined();
  expect(data.pigman.casualBrawl.wins).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.casualBrawl.wins).toEqualTypeOf<number>();
  expect(data.pigman.casualBrawl.losses).toBeDefined();
  expect(data.pigman.casualBrawl.losses).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.casualBrawl.losses).toEqualTypeOf<number>();
  expect(data.pigman.casualBrawl.WLRatio).toBeDefined();
  expect(data.pigman.casualBrawl.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.casualBrawl.WLRatio).toEqualTypeOf<number>();
  expect(data.pigman.casualBrawl.finalKills).toBeDefined();
  expect(data.pigman.casualBrawl.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.casualBrawl.finalKills).toEqualTypeOf<number>();
  expect(data.pigman.casualBrawl.finalAssists).toBeDefined();
  expect(data.pigman.casualBrawl.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.casualBrawl.finalAssists).toEqualTypeOf<number>();
  expect(data.pigman.casualBrawl.finalDeaths).toBeDefined();
  expect(data.pigman.casualBrawl.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.casualBrawl.finalDeaths).toEqualTypeOf<number>();
  expect(data.pigman.casualBrawl.finalKDRatio).toBeDefined();
  expect(data.pigman.casualBrawl.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.casualBrawl.finalKDRatio).toEqualTypeOf<number>();
  expect(data.pigman.casualBrawl.playedGames).toBeDefined();
  expect(data.pigman.casualBrawl.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.casualBrawl.playedGames).toEqualTypeOf<number>();
  expect(data.pigman.casualBrawl.witherDamage).toBeDefined();
  expect(data.pigman.casualBrawl.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.casualBrawl.witherDamage).toEqualTypeOf<number>();
  expect(data.pigman.casualBrawl.defenderKills).toBeDefined();
  expect(data.pigman.casualBrawl.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.casualBrawl.defenderKills).toEqualTypeOf<number>();
  expect(data.pigman.casualBrawl.walked).toBeDefined();
  expect(data.pigman.casualBrawl.walked).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.casualBrawl.walked).toEqualTypeOf<number>();
  expect(data.pigman.casualBrawl.blocksPlaced).toBeDefined();
  expect(data.pigman.casualBrawl.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.casualBrawl.blocksPlaced).toEqualTypeOf<number>();
  expect(data.pigman.casualBrawl.blocksBroken).toBeDefined();
  expect(data.pigman.casualBrawl.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.casualBrawl.blocksBroken).toEqualTypeOf<number>();
  expect(data.pigman.casualBrawl.meleeKills).toBeDefined();
  expect(data.pigman.casualBrawl.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.casualBrawl.meleeKills).toEqualTypeOf<number>();
  expect(data.pigman.casualBrawl.damageDealt).toBeDefined();
  expect(data.pigman.casualBrawl.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.pigman.casualBrawl.damageDealt).toEqualTypeOf<number>();
  expect(data.zombie).toBeDefined();
  expectTypeOf(data.zombie).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.zombie.kills).toBeDefined();
  expect(data.zombie.kills).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.kills).toEqualTypeOf<number>();
  expect(data.zombie.assists).toBeDefined();
  expect(data.zombie.assists).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.assists).toEqualTypeOf<number>();
  expect(data.zombie.deaths).toBeDefined();
  expect(data.zombie.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.deaths).toEqualTypeOf<number>();
  expect(data.zombie.KDRatio).toBeDefined();
  expect(data.zombie.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.KDRatio).toEqualTypeOf<number>();
  expect(data.zombie.wins).toBeDefined();
  expect(data.zombie.wins).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.wins).toEqualTypeOf<number>();
  expect(data.zombie.losses).toBeDefined();
  expect(data.zombie.losses).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.losses).toEqualTypeOf<number>();
  expect(data.zombie.WLRatio).toBeDefined();
  expect(data.zombie.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.WLRatio).toEqualTypeOf<number>();
  expect(data.zombie.finalKills).toBeDefined();
  expect(data.zombie.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.finalKills).toEqualTypeOf<number>();
  expect(data.zombie.finalAssists).toBeDefined();
  expect(data.zombie.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.finalAssists).toEqualTypeOf<number>();
  expect(data.zombie.finalDeaths).toBeDefined();
  expect(data.zombie.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.finalDeaths).toEqualTypeOf<number>();
  expect(data.zombie.finalKDRatio).toBeDefined();
  expect(data.zombie.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.finalKDRatio).toEqualTypeOf<number>();
  expect(data.zombie.playedGames).toBeDefined();
  expect(data.zombie.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.playedGames).toEqualTypeOf<number>();
  expect(data.zombie.witherDamage).toBeDefined();
  expect(data.zombie.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.witherDamage).toEqualTypeOf<number>();
  expect(data.zombie.defenderKills).toBeDefined();
  expect(data.zombie.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.defenderKills).toEqualTypeOf<number>();
  expect(data.zombie.walked).toBeDefined();
  expect(data.zombie.walked).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.walked).toEqualTypeOf<number>();
  expect(data.zombie.blocksPlaced).toBeDefined();
  expect(data.zombie.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.blocksPlaced).toEqualTypeOf<number>();
  expect(data.zombie.blocksBroken).toBeDefined();
  expect(data.zombie.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.blocksBroken).toEqualTypeOf<number>();
  expect(data.zombie.meleeKills).toBeDefined();
  expect(data.zombie.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.meleeKills).toEqualTypeOf<number>();
  expect(data.zombie.damageDealt).toBeDefined();
  expect(data.zombie.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.damageDealt).toEqualTypeOf<number>();
  expect(data.zombie.faceOff).toBeDefined();
  expectTypeOf(data.zombie.faceOff).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.zombie.faceOff.kills).toBeDefined();
  expect(data.zombie.faceOff.kills).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.faceOff.kills).toEqualTypeOf<number>();
  expect(data.zombie.faceOff.assists).toBeDefined();
  expect(data.zombie.faceOff.assists).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.faceOff.assists).toEqualTypeOf<number>();
  expect(data.zombie.faceOff.deaths).toBeDefined();
  expect(data.zombie.faceOff.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.faceOff.deaths).toEqualTypeOf<number>();
  expect(data.zombie.faceOff.KDRatio).toBeDefined();
  expect(data.zombie.faceOff.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.faceOff.KDRatio).toEqualTypeOf<number>();
  expect(data.zombie.faceOff.wins).toBeDefined();
  expect(data.zombie.faceOff.wins).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.faceOff.wins).toEqualTypeOf<number>();
  expect(data.zombie.faceOff.losses).toBeDefined();
  expect(data.zombie.faceOff.losses).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.faceOff.losses).toEqualTypeOf<number>();
  expect(data.zombie.faceOff.WLRatio).toBeDefined();
  expect(data.zombie.faceOff.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.faceOff.WLRatio).toEqualTypeOf<number>();
  expect(data.zombie.faceOff.finalKills).toBeDefined();
  expect(data.zombie.faceOff.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.faceOff.finalKills).toEqualTypeOf<number>();
  expect(data.zombie.faceOff.finalAssists).toBeDefined();
  expect(data.zombie.faceOff.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.faceOff.finalAssists).toEqualTypeOf<number>();
  expect(data.zombie.faceOff.finalDeaths).toBeDefined();
  expect(data.zombie.faceOff.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.faceOff.finalDeaths).toEqualTypeOf<number>();
  expect(data.zombie.faceOff.finalKDRatio).toBeDefined();
  expect(data.zombie.faceOff.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.faceOff.finalKDRatio).toEqualTypeOf<number>();
  expect(data.zombie.faceOff.playedGames).toBeDefined();
  expect(data.zombie.faceOff.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.faceOff.playedGames).toEqualTypeOf<number>();
  expect(data.zombie.faceOff.witherDamage).toBeDefined();
  expect(data.zombie.faceOff.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.faceOff.witherDamage).toEqualTypeOf<number>();
  expect(data.zombie.faceOff.defenderKills).toBeDefined();
  expect(data.zombie.faceOff.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.faceOff.defenderKills).toEqualTypeOf<number>();
  expect(data.zombie.faceOff.walked).toBeDefined();
  expect(data.zombie.faceOff.walked).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.faceOff.walked).toEqualTypeOf<number>();
  expect(data.zombie.faceOff.blocksPlaced).toBeDefined();
  expect(data.zombie.faceOff.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.faceOff.blocksPlaced).toEqualTypeOf<number>();
  expect(data.zombie.faceOff.blocksBroken).toBeDefined();
  expect(data.zombie.faceOff.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.faceOff.blocksBroken).toEqualTypeOf<number>();
  expect(data.zombie.faceOff.meleeKills).toBeDefined();
  expect(data.zombie.faceOff.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.faceOff.meleeKills).toEqualTypeOf<number>();
  expect(data.zombie.faceOff.damageDealt).toBeDefined();
  expect(data.zombie.faceOff.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.faceOff.damageDealt).toEqualTypeOf<number>();
  expect(data.zombie.casualBrawl).toBeDefined();
  expectTypeOf(data.zombie.casualBrawl).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.zombie.casualBrawl.kills).toBeDefined();
  expect(data.zombie.casualBrawl.kills).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.casualBrawl.kills).toEqualTypeOf<number>();
  expect(data.zombie.casualBrawl.assists).toBeDefined();
  expect(data.zombie.casualBrawl.assists).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.casualBrawl.assists).toEqualTypeOf<number>();
  expect(data.zombie.casualBrawl.deaths).toBeDefined();
  expect(data.zombie.casualBrawl.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.casualBrawl.deaths).toEqualTypeOf<number>();
  expect(data.zombie.casualBrawl.KDRatio).toBeDefined();
  expect(data.zombie.casualBrawl.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.casualBrawl.KDRatio).toEqualTypeOf<number>();
  expect(data.zombie.casualBrawl.wins).toBeDefined();
  expect(data.zombie.casualBrawl.wins).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.casualBrawl.wins).toEqualTypeOf<number>();
  expect(data.zombie.casualBrawl.losses).toBeDefined();
  expect(data.zombie.casualBrawl.losses).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.casualBrawl.losses).toEqualTypeOf<number>();
  expect(data.zombie.casualBrawl.WLRatio).toBeDefined();
  expect(data.zombie.casualBrawl.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.casualBrawl.WLRatio).toEqualTypeOf<number>();
  expect(data.zombie.casualBrawl.finalKills).toBeDefined();
  expect(data.zombie.casualBrawl.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.casualBrawl.finalKills).toEqualTypeOf<number>();
  expect(data.zombie.casualBrawl.finalAssists).toBeDefined();
  expect(data.zombie.casualBrawl.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.casualBrawl.finalAssists).toEqualTypeOf<number>();
  expect(data.zombie.casualBrawl.finalDeaths).toBeDefined();
  expect(data.zombie.casualBrawl.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.casualBrawl.finalDeaths).toEqualTypeOf<number>();
  expect(data.zombie.casualBrawl.finalKDRatio).toBeDefined();
  expect(data.zombie.casualBrawl.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.casualBrawl.finalKDRatio).toEqualTypeOf<number>();
  expect(data.zombie.casualBrawl.playedGames).toBeDefined();
  expect(data.zombie.casualBrawl.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.casualBrawl.playedGames).toEqualTypeOf<number>();
  expect(data.zombie.casualBrawl.witherDamage).toBeDefined();
  expect(data.zombie.casualBrawl.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.casualBrawl.witherDamage).toEqualTypeOf<number>();
  expect(data.zombie.casualBrawl.defenderKills).toBeDefined();
  expect(data.zombie.casualBrawl.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.casualBrawl.defenderKills).toEqualTypeOf<number>();
  expect(data.zombie.casualBrawl.walked).toBeDefined();
  expect(data.zombie.casualBrawl.walked).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.casualBrawl.walked).toEqualTypeOf<number>();
  expect(data.zombie.casualBrawl.blocksPlaced).toBeDefined();
  expect(data.zombie.casualBrawl.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.casualBrawl.blocksPlaced).toEqualTypeOf<number>();
  expect(data.zombie.casualBrawl.blocksBroken).toBeDefined();
  expect(data.zombie.casualBrawl.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.casualBrawl.blocksBroken).toEqualTypeOf<number>();
  expect(data.zombie.casualBrawl.meleeKills).toBeDefined();
  expect(data.zombie.casualBrawl.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.casualBrawl.meleeKills).toEqualTypeOf<number>();
  expect(data.zombie.casualBrawl.damageDealt).toBeDefined();
  expect(data.zombie.casualBrawl.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.zombie.casualBrawl.damageDealt).toEqualTypeOf<number>();
  expect(data.blaze).toBeDefined();
  expectTypeOf(data.blaze).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.blaze.kills).toBeDefined();
  expect(data.blaze.kills).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.kills).toEqualTypeOf<number>();
  expect(data.blaze.assists).toBeDefined();
  expect(data.blaze.assists).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.assists).toEqualTypeOf<number>();
  expect(data.blaze.deaths).toBeDefined();
  expect(data.blaze.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.deaths).toEqualTypeOf<number>();
  expect(data.blaze.KDRatio).toBeDefined();
  expect(data.blaze.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.KDRatio).toEqualTypeOf<number>();
  expect(data.blaze.wins).toBeDefined();
  expect(data.blaze.wins).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.wins).toEqualTypeOf<number>();
  expect(data.blaze.losses).toBeDefined();
  expect(data.blaze.losses).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.losses).toEqualTypeOf<number>();
  expect(data.blaze.WLRatio).toBeDefined();
  expect(data.blaze.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.WLRatio).toEqualTypeOf<number>();
  expect(data.blaze.finalKills).toBeDefined();
  expect(data.blaze.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.finalKills).toEqualTypeOf<number>();
  expect(data.blaze.finalAssists).toBeDefined();
  expect(data.blaze.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.finalAssists).toEqualTypeOf<number>();
  expect(data.blaze.finalDeaths).toBeDefined();
  expect(data.blaze.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.finalDeaths).toEqualTypeOf<number>();
  expect(data.blaze.finalKDRatio).toBeDefined();
  expect(data.blaze.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.finalKDRatio).toEqualTypeOf<number>();
  expect(data.blaze.playedGames).toBeDefined();
  expect(data.blaze.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.playedGames).toEqualTypeOf<number>();
  expect(data.blaze.witherDamage).toBeDefined();
  expect(data.blaze.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.witherDamage).toEqualTypeOf<number>();
  expect(data.blaze.defenderKills).toBeDefined();
  expect(data.blaze.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.defenderKills).toEqualTypeOf<number>();
  expect(data.blaze.walked).toBeDefined();
  expect(data.blaze.walked).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.walked).toEqualTypeOf<number>();
  expect(data.blaze.blocksPlaced).toBeDefined();
  expect(data.blaze.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.blocksPlaced).toEqualTypeOf<number>();
  expect(data.blaze.blocksBroken).toBeDefined();
  expect(data.blaze.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.blocksBroken).toEqualTypeOf<number>();
  expect(data.blaze.meleeKills).toBeDefined();
  expect(data.blaze.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.meleeKills).toEqualTypeOf<number>();
  expect(data.blaze.damageDealt).toBeDefined();
  expect(data.blaze.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.damageDealt).toEqualTypeOf<number>();
  expect(data.blaze.faceOff).toBeDefined();
  expectTypeOf(data.blaze.faceOff).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.blaze.faceOff.kills).toBeDefined();
  expect(data.blaze.faceOff.kills).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.faceOff.kills).toEqualTypeOf<number>();
  expect(data.blaze.faceOff.assists).toBeDefined();
  expect(data.blaze.faceOff.assists).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.faceOff.assists).toEqualTypeOf<number>();
  expect(data.blaze.faceOff.deaths).toBeDefined();
  expect(data.blaze.faceOff.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.faceOff.deaths).toEqualTypeOf<number>();
  expect(data.blaze.faceOff.KDRatio).toBeDefined();
  expect(data.blaze.faceOff.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.faceOff.KDRatio).toEqualTypeOf<number>();
  expect(data.blaze.faceOff.wins).toBeDefined();
  expect(data.blaze.faceOff.wins).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.faceOff.wins).toEqualTypeOf<number>();
  expect(data.blaze.faceOff.losses).toBeDefined();
  expect(data.blaze.faceOff.losses).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.faceOff.losses).toEqualTypeOf<number>();
  expect(data.blaze.faceOff.WLRatio).toBeDefined();
  expect(data.blaze.faceOff.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.faceOff.WLRatio).toEqualTypeOf<number>();
  expect(data.blaze.faceOff.finalKills).toBeDefined();
  expect(data.blaze.faceOff.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.faceOff.finalKills).toEqualTypeOf<number>();
  expect(data.blaze.faceOff.finalAssists).toBeDefined();
  expect(data.blaze.faceOff.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.faceOff.finalAssists).toEqualTypeOf<number>();
  expect(data.blaze.faceOff.finalDeaths).toBeDefined();
  expect(data.blaze.faceOff.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.faceOff.finalDeaths).toEqualTypeOf<number>();
  expect(data.blaze.faceOff.finalKDRatio).toBeDefined();
  expect(data.blaze.faceOff.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.faceOff.finalKDRatio).toEqualTypeOf<number>();
  expect(data.blaze.faceOff.playedGames).toBeDefined();
  expect(data.blaze.faceOff.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.faceOff.playedGames).toEqualTypeOf<number>();
  expect(data.blaze.faceOff.witherDamage).toBeDefined();
  expect(data.blaze.faceOff.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.faceOff.witherDamage).toEqualTypeOf<number>();
  expect(data.blaze.faceOff.defenderKills).toBeDefined();
  expect(data.blaze.faceOff.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.faceOff.defenderKills).toEqualTypeOf<number>();
  expect(data.blaze.faceOff.walked).toBeDefined();
  expect(data.blaze.faceOff.walked).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.faceOff.walked).toEqualTypeOf<number>();
  expect(data.blaze.faceOff.blocksPlaced).toBeDefined();
  expect(data.blaze.faceOff.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.faceOff.blocksPlaced).toEqualTypeOf<number>();
  expect(data.blaze.faceOff.blocksBroken).toBeDefined();
  expect(data.blaze.faceOff.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.faceOff.blocksBroken).toEqualTypeOf<number>();
  expect(data.blaze.faceOff.meleeKills).toBeDefined();
  expect(data.blaze.faceOff.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.faceOff.meleeKills).toEqualTypeOf<number>();
  expect(data.blaze.faceOff.damageDealt).toBeDefined();
  expect(data.blaze.faceOff.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.faceOff.damageDealt).toEqualTypeOf<number>();
  expect(data.blaze.casualBrawl).toBeDefined();
  expectTypeOf(data.blaze.casualBrawl).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.blaze.casualBrawl.kills).toBeDefined();
  expect(data.blaze.casualBrawl.kills).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.casualBrawl.kills).toEqualTypeOf<number>();
  expect(data.blaze.casualBrawl.assists).toBeDefined();
  expect(data.blaze.casualBrawl.assists).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.casualBrawl.assists).toEqualTypeOf<number>();
  expect(data.blaze.casualBrawl.deaths).toBeDefined();
  expect(data.blaze.casualBrawl.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.casualBrawl.deaths).toEqualTypeOf<number>();
  expect(data.blaze.casualBrawl.KDRatio).toBeDefined();
  expect(data.blaze.casualBrawl.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.casualBrawl.KDRatio).toEqualTypeOf<number>();
  expect(data.blaze.casualBrawl.wins).toBeDefined();
  expect(data.blaze.casualBrawl.wins).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.casualBrawl.wins).toEqualTypeOf<number>();
  expect(data.blaze.casualBrawl.losses).toBeDefined();
  expect(data.blaze.casualBrawl.losses).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.casualBrawl.losses).toEqualTypeOf<number>();
  expect(data.blaze.casualBrawl.WLRatio).toBeDefined();
  expect(data.blaze.casualBrawl.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.casualBrawl.WLRatio).toEqualTypeOf<number>();
  expect(data.blaze.casualBrawl.finalKills).toBeDefined();
  expect(data.blaze.casualBrawl.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.casualBrawl.finalKills).toEqualTypeOf<number>();
  expect(data.blaze.casualBrawl.finalAssists).toBeDefined();
  expect(data.blaze.casualBrawl.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.casualBrawl.finalAssists).toEqualTypeOf<number>();
  expect(data.blaze.casualBrawl.finalDeaths).toBeDefined();
  expect(data.blaze.casualBrawl.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.casualBrawl.finalDeaths).toEqualTypeOf<number>();
  expect(data.blaze.casualBrawl.finalKDRatio).toBeDefined();
  expect(data.blaze.casualBrawl.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.casualBrawl.finalKDRatio).toEqualTypeOf<number>();
  expect(data.blaze.casualBrawl.playedGames).toBeDefined();
  expect(data.blaze.casualBrawl.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.casualBrawl.playedGames).toEqualTypeOf<number>();
  expect(data.blaze.casualBrawl.witherDamage).toBeDefined();
  expect(data.blaze.casualBrawl.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.casualBrawl.witherDamage).toEqualTypeOf<number>();
  expect(data.blaze.casualBrawl.defenderKills).toBeDefined();
  expect(data.blaze.casualBrawl.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.casualBrawl.defenderKills).toEqualTypeOf<number>();
  expect(data.blaze.casualBrawl.walked).toBeDefined();
  expect(data.blaze.casualBrawl.walked).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.casualBrawl.walked).toEqualTypeOf<number>();
  expect(data.blaze.casualBrawl.blocksPlaced).toBeDefined();
  expect(data.blaze.casualBrawl.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.casualBrawl.blocksPlaced).toEqualTypeOf<number>();
  expect(data.blaze.casualBrawl.blocksBroken).toBeDefined();
  expect(data.blaze.casualBrawl.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.casualBrawl.blocksBroken).toEqualTypeOf<number>();
  expect(data.blaze.casualBrawl.meleeKills).toBeDefined();
  expect(data.blaze.casualBrawl.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.casualBrawl.meleeKills).toEqualTypeOf<number>();
  expect(data.blaze.casualBrawl.damageDealt).toBeDefined();
  expect(data.blaze.casualBrawl.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.blaze.casualBrawl.damageDealt).toEqualTypeOf<number>();
  expect(data.enderman).toBeDefined();
  expectTypeOf(data.enderman).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.enderman.kills).toBeDefined();
  expect(data.enderman.kills).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.kills).toEqualTypeOf<number>();
  expect(data.enderman.assists).toBeDefined();
  expect(data.enderman.assists).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.assists).toEqualTypeOf<number>();
  expect(data.enderman.deaths).toBeDefined();
  expect(data.enderman.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.deaths).toEqualTypeOf<number>();
  expect(data.enderman.KDRatio).toBeDefined();
  expect(data.enderman.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.KDRatio).toEqualTypeOf<number>();
  expect(data.enderman.wins).toBeDefined();
  expect(data.enderman.wins).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.wins).toEqualTypeOf<number>();
  expect(data.enderman.losses).toBeDefined();
  expect(data.enderman.losses).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.losses).toEqualTypeOf<number>();
  expect(data.enderman.WLRatio).toBeDefined();
  expect(data.enderman.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.WLRatio).toEqualTypeOf<number>();
  expect(data.enderman.finalKills).toBeDefined();
  expect(data.enderman.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.finalKills).toEqualTypeOf<number>();
  expect(data.enderman.finalAssists).toBeDefined();
  expect(data.enderman.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.finalAssists).toEqualTypeOf<number>();
  expect(data.enderman.finalDeaths).toBeDefined();
  expect(data.enderman.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.finalDeaths).toEqualTypeOf<number>();
  expect(data.enderman.finalKDRatio).toBeDefined();
  expect(data.enderman.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.finalKDRatio).toEqualTypeOf<number>();
  expect(data.enderman.playedGames).toBeDefined();
  expect(data.enderman.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.playedGames).toEqualTypeOf<number>();
  expect(data.enderman.witherDamage).toBeDefined();
  expect(data.enderman.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.witherDamage).toEqualTypeOf<number>();
  expect(data.enderman.defenderKills).toBeDefined();
  expect(data.enderman.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.defenderKills).toEqualTypeOf<number>();
  expect(data.enderman.walked).toBeDefined();
  expect(data.enderman.walked).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.walked).toEqualTypeOf<number>();
  expect(data.enderman.blocksPlaced).toBeDefined();
  expect(data.enderman.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.blocksPlaced).toEqualTypeOf<number>();
  expect(data.enderman.blocksBroken).toBeDefined();
  expect(data.enderman.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.blocksBroken).toEqualTypeOf<number>();
  expect(data.enderman.meleeKills).toBeDefined();
  expect(data.enderman.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.meleeKills).toEqualTypeOf<number>();
  expect(data.enderman.damageDealt).toBeDefined();
  expect(data.enderman.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.damageDealt).toEqualTypeOf<number>();
  expect(data.enderman.faceOff).toBeDefined();
  expectTypeOf(data.enderman.faceOff).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.enderman.faceOff.kills).toBeDefined();
  expect(data.enderman.faceOff.kills).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.faceOff.kills).toEqualTypeOf<number>();
  expect(data.enderman.faceOff.assists).toBeDefined();
  expect(data.enderman.faceOff.assists).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.faceOff.assists).toEqualTypeOf<number>();
  expect(data.enderman.faceOff.deaths).toBeDefined();
  expect(data.enderman.faceOff.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.faceOff.deaths).toEqualTypeOf<number>();
  expect(data.enderman.faceOff.KDRatio).toBeDefined();
  expect(data.enderman.faceOff.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.faceOff.KDRatio).toEqualTypeOf<number>();
  expect(data.enderman.faceOff.wins).toBeDefined();
  expect(data.enderman.faceOff.wins).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.faceOff.wins).toEqualTypeOf<number>();
  expect(data.enderman.faceOff.losses).toBeDefined();
  expect(data.enderman.faceOff.losses).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.faceOff.losses).toEqualTypeOf<number>();
  expect(data.enderman.faceOff.WLRatio).toBeDefined();
  expect(data.enderman.faceOff.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.faceOff.WLRatio).toEqualTypeOf<number>();
  expect(data.enderman.faceOff.finalKills).toBeDefined();
  expect(data.enderman.faceOff.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.faceOff.finalKills).toEqualTypeOf<number>();
  expect(data.enderman.faceOff.finalAssists).toBeDefined();
  expect(data.enderman.faceOff.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.faceOff.finalAssists).toEqualTypeOf<number>();
  expect(data.enderman.faceOff.finalDeaths).toBeDefined();
  expect(data.enderman.faceOff.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.faceOff.finalDeaths).toEqualTypeOf<number>();
  expect(data.enderman.faceOff.finalKDRatio).toBeDefined();
  expect(data.enderman.faceOff.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.faceOff.finalKDRatio).toEqualTypeOf<number>();
  expect(data.enderman.faceOff.playedGames).toBeDefined();
  expect(data.enderman.faceOff.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.faceOff.playedGames).toEqualTypeOf<number>();
  expect(data.enderman.faceOff.witherDamage).toBeDefined();
  expect(data.enderman.faceOff.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.faceOff.witherDamage).toEqualTypeOf<number>();
  expect(data.enderman.faceOff.defenderKills).toBeDefined();
  expect(data.enderman.faceOff.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.faceOff.defenderKills).toEqualTypeOf<number>();
  expect(data.enderman.faceOff.walked).toBeDefined();
  expect(data.enderman.faceOff.walked).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.faceOff.walked).toEqualTypeOf<number>();
  expect(data.enderman.faceOff.blocksPlaced).toBeDefined();
  expect(data.enderman.faceOff.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.faceOff.blocksPlaced).toEqualTypeOf<number>();
  expect(data.enderman.faceOff.blocksBroken).toBeDefined();
  expect(data.enderman.faceOff.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.faceOff.blocksBroken).toEqualTypeOf<number>();
  expect(data.enderman.faceOff.meleeKills).toBeDefined();
  expect(data.enderman.faceOff.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.faceOff.meleeKills).toEqualTypeOf<number>();
  expect(data.enderman.faceOff.damageDealt).toBeDefined();
  expect(data.enderman.faceOff.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.faceOff.damageDealt).toEqualTypeOf<number>();
  expect(data.enderman.casualBrawl).toBeDefined();
  expectTypeOf(data.enderman.casualBrawl).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.enderman.casualBrawl.kills).toBeDefined();
  expect(data.enderman.casualBrawl.kills).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.casualBrawl.kills).toEqualTypeOf<number>();
  expect(data.enderman.casualBrawl.assists).toBeDefined();
  expect(data.enderman.casualBrawl.assists).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.casualBrawl.assists).toEqualTypeOf<number>();
  expect(data.enderman.casualBrawl.deaths).toBeDefined();
  expect(data.enderman.casualBrawl.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.casualBrawl.deaths).toEqualTypeOf<number>();
  expect(data.enderman.casualBrawl.KDRatio).toBeDefined();
  expect(data.enderman.casualBrawl.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.casualBrawl.KDRatio).toEqualTypeOf<number>();
  expect(data.enderman.casualBrawl.wins).toBeDefined();
  expect(data.enderman.casualBrawl.wins).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.casualBrawl.wins).toEqualTypeOf<number>();
  expect(data.enderman.casualBrawl.losses).toBeDefined();
  expect(data.enderman.casualBrawl.losses).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.casualBrawl.losses).toEqualTypeOf<number>();
  expect(data.enderman.casualBrawl.WLRatio).toBeDefined();
  expect(data.enderman.casualBrawl.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.casualBrawl.WLRatio).toEqualTypeOf<number>();
  expect(data.enderman.casualBrawl.finalKills).toBeDefined();
  expect(data.enderman.casualBrawl.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.casualBrawl.finalKills).toEqualTypeOf<number>();
  expect(data.enderman.casualBrawl.finalAssists).toBeDefined();
  expect(data.enderman.casualBrawl.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.casualBrawl.finalAssists).toEqualTypeOf<number>();
  expect(data.enderman.casualBrawl.finalDeaths).toBeDefined();
  expect(data.enderman.casualBrawl.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.casualBrawl.finalDeaths).toEqualTypeOf<number>();
  expect(data.enderman.casualBrawl.finalKDRatio).toBeDefined();
  expect(data.enderman.casualBrawl.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.casualBrawl.finalKDRatio).toEqualTypeOf<number>();
  expect(data.enderman.casualBrawl.playedGames).toBeDefined();
  expect(data.enderman.casualBrawl.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.casualBrawl.playedGames).toEqualTypeOf<number>();
  expect(data.enderman.casualBrawl.witherDamage).toBeDefined();
  expect(data.enderman.casualBrawl.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.casualBrawl.witherDamage).toEqualTypeOf<number>();
  expect(data.enderman.casualBrawl.defenderKills).toBeDefined();
  expect(data.enderman.casualBrawl.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.casualBrawl.defenderKills).toEqualTypeOf<number>();
  expect(data.enderman.casualBrawl.walked).toBeDefined();
  expect(data.enderman.casualBrawl.walked).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.casualBrawl.walked).toEqualTypeOf<number>();
  expect(data.enderman.casualBrawl.blocksPlaced).toBeDefined();
  expect(data.enderman.casualBrawl.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.casualBrawl.blocksPlaced).toEqualTypeOf<number>();
  expect(data.enderman.casualBrawl.blocksBroken).toBeDefined();
  expect(data.enderman.casualBrawl.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.casualBrawl.blocksBroken).toEqualTypeOf<number>();
  expect(data.enderman.casualBrawl.meleeKills).toBeDefined();
  expect(data.enderman.casualBrawl.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.casualBrawl.meleeKills).toEqualTypeOf<number>();
  expect(data.enderman.casualBrawl.damageDealt).toBeDefined();
  expect(data.enderman.casualBrawl.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.enderman.casualBrawl.damageDealt).toEqualTypeOf<number>();
  expect(data.shaman).toBeDefined();
  expectTypeOf(data.shaman).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.shaman.kills).toBeDefined();
  expect(data.shaman.kills).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.kills).toEqualTypeOf<number>();
  expect(data.shaman.assists).toBeDefined();
  expect(data.shaman.assists).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.assists).toEqualTypeOf<number>();
  expect(data.shaman.deaths).toBeDefined();
  expect(data.shaman.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.deaths).toEqualTypeOf<number>();
  expect(data.shaman.KDRatio).toBeDefined();
  expect(data.shaman.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.KDRatio).toEqualTypeOf<number>();
  expect(data.shaman.wins).toBeDefined();
  expect(data.shaman.wins).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.wins).toEqualTypeOf<number>();
  expect(data.shaman.losses).toBeDefined();
  expect(data.shaman.losses).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.losses).toEqualTypeOf<number>();
  expect(data.shaman.WLRatio).toBeDefined();
  expect(data.shaman.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.WLRatio).toEqualTypeOf<number>();
  expect(data.shaman.finalKills).toBeDefined();
  expect(data.shaman.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.finalKills).toEqualTypeOf<number>();
  expect(data.shaman.finalAssists).toBeDefined();
  expect(data.shaman.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.finalAssists).toEqualTypeOf<number>();
  expect(data.shaman.finalDeaths).toBeDefined();
  expect(data.shaman.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.finalDeaths).toEqualTypeOf<number>();
  expect(data.shaman.finalKDRatio).toBeDefined();
  expect(data.shaman.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.finalKDRatio).toEqualTypeOf<number>();
  expect(data.shaman.playedGames).toBeDefined();
  expect(data.shaman.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.playedGames).toEqualTypeOf<number>();
  expect(data.shaman.witherDamage).toBeDefined();
  expect(data.shaman.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.witherDamage).toEqualTypeOf<number>();
  expect(data.shaman.defenderKills).toBeDefined();
  expect(data.shaman.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.defenderKills).toEqualTypeOf<number>();
  expect(data.shaman.walked).toBeDefined();
  expect(data.shaman.walked).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.walked).toEqualTypeOf<number>();
  expect(data.shaman.blocksPlaced).toBeDefined();
  expect(data.shaman.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.blocksPlaced).toEqualTypeOf<number>();
  expect(data.shaman.blocksBroken).toBeDefined();
  expect(data.shaman.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.blocksBroken).toEqualTypeOf<number>();
  expect(data.shaman.meleeKills).toBeDefined();
  expect(data.shaman.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.meleeKills).toEqualTypeOf<number>();
  expect(data.shaman.damageDealt).toBeDefined();
  expect(data.shaman.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.damageDealt).toEqualTypeOf<number>();
  expect(data.shaman.faceOff).toBeDefined();
  expectTypeOf(data.shaman.faceOff).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.shaman.faceOff.kills).toBeDefined();
  expect(data.shaman.faceOff.kills).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.faceOff.kills).toEqualTypeOf<number>();
  expect(data.shaman.faceOff.assists).toBeDefined();
  expect(data.shaman.faceOff.assists).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.faceOff.assists).toEqualTypeOf<number>();
  expect(data.shaman.faceOff.deaths).toBeDefined();
  expect(data.shaman.faceOff.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.faceOff.deaths).toEqualTypeOf<number>();
  expect(data.shaman.faceOff.KDRatio).toBeDefined();
  expect(data.shaman.faceOff.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.faceOff.KDRatio).toEqualTypeOf<number>();
  expect(data.shaman.faceOff.wins).toBeDefined();
  expect(data.shaman.faceOff.wins).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.faceOff.wins).toEqualTypeOf<number>();
  expect(data.shaman.faceOff.losses).toBeDefined();
  expect(data.shaman.faceOff.losses).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.faceOff.losses).toEqualTypeOf<number>();
  expect(data.shaman.faceOff.WLRatio).toBeDefined();
  expect(data.shaman.faceOff.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.faceOff.WLRatio).toEqualTypeOf<number>();
  expect(data.shaman.faceOff.finalKills).toBeDefined();
  expect(data.shaman.faceOff.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.faceOff.finalKills).toEqualTypeOf<number>();
  expect(data.shaman.faceOff.finalAssists).toBeDefined();
  expect(data.shaman.faceOff.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.faceOff.finalAssists).toEqualTypeOf<number>();
  expect(data.shaman.faceOff.finalDeaths).toBeDefined();
  expect(data.shaman.faceOff.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.faceOff.finalDeaths).toEqualTypeOf<number>();
  expect(data.shaman.faceOff.finalKDRatio).toBeDefined();
  expect(data.shaman.faceOff.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.faceOff.finalKDRatio).toEqualTypeOf<number>();
  expect(data.shaman.faceOff.playedGames).toBeDefined();
  expect(data.shaman.faceOff.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.faceOff.playedGames).toEqualTypeOf<number>();
  expect(data.shaman.faceOff.witherDamage).toBeDefined();
  expect(data.shaman.faceOff.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.faceOff.witherDamage).toEqualTypeOf<number>();
  expect(data.shaman.faceOff.defenderKills).toBeDefined();
  expect(data.shaman.faceOff.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.faceOff.defenderKills).toEqualTypeOf<number>();
  expect(data.shaman.faceOff.walked).toBeDefined();
  expect(data.shaman.faceOff.walked).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.faceOff.walked).toEqualTypeOf<number>();
  expect(data.shaman.faceOff.blocksPlaced).toBeDefined();
  expect(data.shaman.faceOff.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.faceOff.blocksPlaced).toEqualTypeOf<number>();
  expect(data.shaman.faceOff.blocksBroken).toBeDefined();
  expect(data.shaman.faceOff.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.faceOff.blocksBroken).toEqualTypeOf<number>();
  expect(data.shaman.faceOff.meleeKills).toBeDefined();
  expect(data.shaman.faceOff.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.faceOff.meleeKills).toEqualTypeOf<number>();
  expect(data.shaman.faceOff.damageDealt).toBeDefined();
  expect(data.shaman.faceOff.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.faceOff.damageDealt).toEqualTypeOf<number>();
  expect(data.shaman.casualBrawl).toBeDefined();
  expectTypeOf(data.shaman.casualBrawl).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.shaman.casualBrawl.kills).toBeDefined();
  expect(data.shaman.casualBrawl.kills).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.casualBrawl.kills).toEqualTypeOf<number>();
  expect(data.shaman.casualBrawl.assists).toBeDefined();
  expect(data.shaman.casualBrawl.assists).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.casualBrawl.assists).toEqualTypeOf<number>();
  expect(data.shaman.casualBrawl.deaths).toBeDefined();
  expect(data.shaman.casualBrawl.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.casualBrawl.deaths).toEqualTypeOf<number>();
  expect(data.shaman.casualBrawl.KDRatio).toBeDefined();
  expect(data.shaman.casualBrawl.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.casualBrawl.KDRatio).toEqualTypeOf<number>();
  expect(data.shaman.casualBrawl.wins).toBeDefined();
  expect(data.shaman.casualBrawl.wins).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.casualBrawl.wins).toEqualTypeOf<number>();
  expect(data.shaman.casualBrawl.losses).toBeDefined();
  expect(data.shaman.casualBrawl.losses).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.casualBrawl.losses).toEqualTypeOf<number>();
  expect(data.shaman.casualBrawl.WLRatio).toBeDefined();
  expect(data.shaman.casualBrawl.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.casualBrawl.WLRatio).toEqualTypeOf<number>();
  expect(data.shaman.casualBrawl.finalKills).toBeDefined();
  expect(data.shaman.casualBrawl.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.casualBrawl.finalKills).toEqualTypeOf<number>();
  expect(data.shaman.casualBrawl.finalAssists).toBeDefined();
  expect(data.shaman.casualBrawl.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.casualBrawl.finalAssists).toEqualTypeOf<number>();
  expect(data.shaman.casualBrawl.finalDeaths).toBeDefined();
  expect(data.shaman.casualBrawl.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.casualBrawl.finalDeaths).toEqualTypeOf<number>();
  expect(data.shaman.casualBrawl.finalKDRatio).toBeDefined();
  expect(data.shaman.casualBrawl.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.casualBrawl.finalKDRatio).toEqualTypeOf<number>();
  expect(data.shaman.casualBrawl.playedGames).toBeDefined();
  expect(data.shaman.casualBrawl.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.casualBrawl.playedGames).toEqualTypeOf<number>();
  expect(data.shaman.casualBrawl.witherDamage).toBeDefined();
  expect(data.shaman.casualBrawl.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.casualBrawl.witherDamage).toEqualTypeOf<number>();
  expect(data.shaman.casualBrawl.defenderKills).toBeDefined();
  expect(data.shaman.casualBrawl.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.casualBrawl.defenderKills).toEqualTypeOf<number>();
  expect(data.shaman.casualBrawl.walked).toBeDefined();
  expect(data.shaman.casualBrawl.walked).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.casualBrawl.walked).toEqualTypeOf<number>();
  expect(data.shaman.casualBrawl.blocksPlaced).toBeDefined();
  expect(data.shaman.casualBrawl.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.casualBrawl.blocksPlaced).toEqualTypeOf<number>();
  expect(data.shaman.casualBrawl.blocksBroken).toBeDefined();
  expect(data.shaman.casualBrawl.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.casualBrawl.blocksBroken).toEqualTypeOf<number>();
  expect(data.shaman.casualBrawl.meleeKills).toBeDefined();
  expect(data.shaman.casualBrawl.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.casualBrawl.meleeKills).toEqualTypeOf<number>();
  expect(data.shaman.casualBrawl.damageDealt).toBeDefined();
  expect(data.shaman.casualBrawl.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.shaman.casualBrawl.damageDealt).toEqualTypeOf<number>();
  expect(data.squid).toBeDefined();
  expectTypeOf(data.squid).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.squid.kills).toBeDefined();
  expect(data.squid.kills).greaterThanOrEqual(0);
  expectTypeOf(data.squid.kills).toEqualTypeOf<number>();
  expect(data.squid.assists).toBeDefined();
  expect(data.squid.assists).greaterThanOrEqual(0);
  expectTypeOf(data.squid.assists).toEqualTypeOf<number>();
  expect(data.squid.deaths).toBeDefined();
  expect(data.squid.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.squid.deaths).toEqualTypeOf<number>();
  expect(data.squid.KDRatio).toBeDefined();
  expect(data.squid.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.squid.KDRatio).toEqualTypeOf<number>();
  expect(data.squid.wins).toBeDefined();
  expect(data.squid.wins).greaterThanOrEqual(0);
  expectTypeOf(data.squid.wins).toEqualTypeOf<number>();
  expect(data.squid.losses).toBeDefined();
  expect(data.squid.losses).greaterThanOrEqual(0);
  expectTypeOf(data.squid.losses).toEqualTypeOf<number>();
  expect(data.squid.WLRatio).toBeDefined();
  expect(data.squid.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.squid.WLRatio).toEqualTypeOf<number>();
  expect(data.squid.finalKills).toBeDefined();
  expect(data.squid.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.squid.finalKills).toEqualTypeOf<number>();
  expect(data.squid.finalAssists).toBeDefined();
  expect(data.squid.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.squid.finalAssists).toEqualTypeOf<number>();
  expect(data.squid.finalDeaths).toBeDefined();
  expect(data.squid.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.squid.finalDeaths).toEqualTypeOf<number>();
  expect(data.squid.finalKDRatio).toBeDefined();
  expect(data.squid.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.squid.finalKDRatio).toEqualTypeOf<number>();
  expect(data.squid.playedGames).toBeDefined();
  expect(data.squid.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.squid.playedGames).toEqualTypeOf<number>();
  expect(data.squid.witherDamage).toBeDefined();
  expect(data.squid.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.squid.witherDamage).toEqualTypeOf<number>();
  expect(data.squid.defenderKills).toBeDefined();
  expect(data.squid.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.squid.defenderKills).toEqualTypeOf<number>();
  expect(data.squid.walked).toBeDefined();
  expect(data.squid.walked).greaterThanOrEqual(0);
  expectTypeOf(data.squid.walked).toEqualTypeOf<number>();
  expect(data.squid.blocksPlaced).toBeDefined();
  expect(data.squid.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.squid.blocksPlaced).toEqualTypeOf<number>();
  expect(data.squid.blocksBroken).toBeDefined();
  expect(data.squid.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.squid.blocksBroken).toEqualTypeOf<number>();
  expect(data.squid.meleeKills).toBeDefined();
  expect(data.squid.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.squid.meleeKills).toEqualTypeOf<number>();
  expect(data.squid.damageDealt).toBeDefined();
  expect(data.squid.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.squid.damageDealt).toEqualTypeOf<number>();
  expect(data.squid.faceOff).toBeDefined();
  expectTypeOf(data.squid.faceOff).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.squid.faceOff.kills).toBeDefined();
  expect(data.squid.faceOff.kills).greaterThanOrEqual(0);
  expectTypeOf(data.squid.faceOff.kills).toEqualTypeOf<number>();
  expect(data.squid.faceOff.assists).toBeDefined();
  expect(data.squid.faceOff.assists).greaterThanOrEqual(0);
  expectTypeOf(data.squid.faceOff.assists).toEqualTypeOf<number>();
  expect(data.squid.faceOff.deaths).toBeDefined();
  expect(data.squid.faceOff.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.squid.faceOff.deaths).toEqualTypeOf<number>();
  expect(data.squid.faceOff.KDRatio).toBeDefined();
  expect(data.squid.faceOff.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.squid.faceOff.KDRatio).toEqualTypeOf<number>();
  expect(data.squid.faceOff.wins).toBeDefined();
  expect(data.squid.faceOff.wins).greaterThanOrEqual(0);
  expectTypeOf(data.squid.faceOff.wins).toEqualTypeOf<number>();
  expect(data.squid.faceOff.losses).toBeDefined();
  expect(data.squid.faceOff.losses).greaterThanOrEqual(0);
  expectTypeOf(data.squid.faceOff.losses).toEqualTypeOf<number>();
  expect(data.squid.faceOff.WLRatio).toBeDefined();
  expect(data.squid.faceOff.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.squid.faceOff.WLRatio).toEqualTypeOf<number>();
  expect(data.squid.faceOff.finalKills).toBeDefined();
  expect(data.squid.faceOff.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.squid.faceOff.finalKills).toEqualTypeOf<number>();
  expect(data.squid.faceOff.finalAssists).toBeDefined();
  expect(data.squid.faceOff.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.squid.faceOff.finalAssists).toEqualTypeOf<number>();
  expect(data.squid.faceOff.finalDeaths).toBeDefined();
  expect(data.squid.faceOff.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.squid.faceOff.finalDeaths).toEqualTypeOf<number>();
  expect(data.squid.faceOff.finalKDRatio).toBeDefined();
  expect(data.squid.faceOff.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.squid.faceOff.finalKDRatio).toEqualTypeOf<number>();
  expect(data.squid.faceOff.playedGames).toBeDefined();
  expect(data.squid.faceOff.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.squid.faceOff.playedGames).toEqualTypeOf<number>();
  expect(data.squid.faceOff.witherDamage).toBeDefined();
  expect(data.squid.faceOff.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.squid.faceOff.witherDamage).toEqualTypeOf<number>();
  expect(data.squid.faceOff.defenderKills).toBeDefined();
  expect(data.squid.faceOff.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.squid.faceOff.defenderKills).toEqualTypeOf<number>();
  expect(data.squid.faceOff.walked).toBeDefined();
  expect(data.squid.faceOff.walked).greaterThanOrEqual(0);
  expectTypeOf(data.squid.faceOff.walked).toEqualTypeOf<number>();
  expect(data.squid.faceOff.blocksPlaced).toBeDefined();
  expect(data.squid.faceOff.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.squid.faceOff.blocksPlaced).toEqualTypeOf<number>();
  expect(data.squid.faceOff.blocksBroken).toBeDefined();
  expect(data.squid.faceOff.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.squid.faceOff.blocksBroken).toEqualTypeOf<number>();
  expect(data.squid.faceOff.meleeKills).toBeDefined();
  expect(data.squid.faceOff.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.squid.faceOff.meleeKills).toEqualTypeOf<number>();
  expect(data.squid.faceOff.damageDealt).toBeDefined();
  expect(data.squid.faceOff.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.squid.faceOff.damageDealt).toEqualTypeOf<number>();
  expect(data.squid.casualBrawl).toBeDefined();
  expectTypeOf(data.squid.casualBrawl).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.squid.casualBrawl.kills).toBeDefined();
  expect(data.squid.casualBrawl.kills).greaterThanOrEqual(0);
  expectTypeOf(data.squid.casualBrawl.kills).toEqualTypeOf<number>();
  expect(data.squid.casualBrawl.assists).toBeDefined();
  expect(data.squid.casualBrawl.assists).greaterThanOrEqual(0);
  expectTypeOf(data.squid.casualBrawl.assists).toEqualTypeOf<number>();
  expect(data.squid.casualBrawl.deaths).toBeDefined();
  expect(data.squid.casualBrawl.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.squid.casualBrawl.deaths).toEqualTypeOf<number>();
  expect(data.squid.casualBrawl.KDRatio).toBeDefined();
  expect(data.squid.casualBrawl.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.squid.casualBrawl.KDRatio).toEqualTypeOf<number>();
  expect(data.squid.casualBrawl.wins).toBeDefined();
  expect(data.squid.casualBrawl.wins).greaterThanOrEqual(0);
  expectTypeOf(data.squid.casualBrawl.wins).toEqualTypeOf<number>();
  expect(data.squid.casualBrawl.losses).toBeDefined();
  expect(data.squid.casualBrawl.losses).greaterThanOrEqual(0);
  expectTypeOf(data.squid.casualBrawl.losses).toEqualTypeOf<number>();
  expect(data.squid.casualBrawl.WLRatio).toBeDefined();
  expect(data.squid.casualBrawl.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.squid.casualBrawl.WLRatio).toEqualTypeOf<number>();
  expect(data.squid.casualBrawl.finalKills).toBeDefined();
  expect(data.squid.casualBrawl.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.squid.casualBrawl.finalKills).toEqualTypeOf<number>();
  expect(data.squid.casualBrawl.finalAssists).toBeDefined();
  expect(data.squid.casualBrawl.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.squid.casualBrawl.finalAssists).toEqualTypeOf<number>();
  expect(data.squid.casualBrawl.finalDeaths).toBeDefined();
  expect(data.squid.casualBrawl.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.squid.casualBrawl.finalDeaths).toEqualTypeOf<number>();
  expect(data.squid.casualBrawl.finalKDRatio).toBeDefined();
  expect(data.squid.casualBrawl.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.squid.casualBrawl.finalKDRatio).toEqualTypeOf<number>();
  expect(data.squid.casualBrawl.playedGames).toBeDefined();
  expect(data.squid.casualBrawl.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.squid.casualBrawl.playedGames).toEqualTypeOf<number>();
  expect(data.squid.casualBrawl.witherDamage).toBeDefined();
  expect(data.squid.casualBrawl.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.squid.casualBrawl.witherDamage).toEqualTypeOf<number>();
  expect(data.squid.casualBrawl.defenderKills).toBeDefined();
  expect(data.squid.casualBrawl.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.squid.casualBrawl.defenderKills).toEqualTypeOf<number>();
  expect(data.squid.casualBrawl.walked).toBeDefined();
  expect(data.squid.casualBrawl.walked).greaterThanOrEqual(0);
  expectTypeOf(data.squid.casualBrawl.walked).toEqualTypeOf<number>();
  expect(data.squid.casualBrawl.blocksPlaced).toBeDefined();
  expect(data.squid.casualBrawl.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.squid.casualBrawl.blocksPlaced).toEqualTypeOf<number>();
  expect(data.squid.casualBrawl.blocksBroken).toBeDefined();
  expect(data.squid.casualBrawl.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.squid.casualBrawl.blocksBroken).toEqualTypeOf<number>();
  expect(data.squid.casualBrawl.meleeKills).toBeDefined();
  expect(data.squid.casualBrawl.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.squid.casualBrawl.meleeKills).toEqualTypeOf<number>();
  expect(data.squid.casualBrawl.damageDealt).toBeDefined();
  expect(data.squid.casualBrawl.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.squid.casualBrawl.damageDealt).toEqualTypeOf<number>();
  expect(data.creeper).toBeDefined();
  expectTypeOf(data.creeper).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.creeper.kills).toBeDefined();
  expect(data.creeper.kills).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.kills).toEqualTypeOf<number>();
  expect(data.creeper.assists).toBeDefined();
  expect(data.creeper.assists).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.assists).toEqualTypeOf<number>();
  expect(data.creeper.deaths).toBeDefined();
  expect(data.creeper.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.deaths).toEqualTypeOf<number>();
  expect(data.creeper.KDRatio).toBeDefined();
  expect(data.creeper.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.KDRatio).toEqualTypeOf<number>();
  expect(data.creeper.wins).toBeDefined();
  expect(data.creeper.wins).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.wins).toEqualTypeOf<number>();
  expect(data.creeper.losses).toBeDefined();
  expect(data.creeper.losses).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.losses).toEqualTypeOf<number>();
  expect(data.creeper.WLRatio).toBeDefined();
  expect(data.creeper.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.WLRatio).toEqualTypeOf<number>();
  expect(data.creeper.finalKills).toBeDefined();
  expect(data.creeper.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.finalKills).toEqualTypeOf<number>();
  expect(data.creeper.finalAssists).toBeDefined();
  expect(data.creeper.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.finalAssists).toEqualTypeOf<number>();
  expect(data.creeper.finalDeaths).toBeDefined();
  expect(data.creeper.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.finalDeaths).toEqualTypeOf<number>();
  expect(data.creeper.finalKDRatio).toBeDefined();
  expect(data.creeper.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.finalKDRatio).toEqualTypeOf<number>();
  expect(data.creeper.playedGames).toBeDefined();
  expect(data.creeper.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.playedGames).toEqualTypeOf<number>();
  expect(data.creeper.witherDamage).toBeDefined();
  expect(data.creeper.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.witherDamage).toEqualTypeOf<number>();
  expect(data.creeper.defenderKills).toBeDefined();
  expect(data.creeper.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.defenderKills).toEqualTypeOf<number>();
  expect(data.creeper.walked).toBeDefined();
  expect(data.creeper.walked).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.walked).toEqualTypeOf<number>();
  expect(data.creeper.blocksPlaced).toBeDefined();
  expect(data.creeper.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.blocksPlaced).toEqualTypeOf<number>();
  expect(data.creeper.blocksBroken).toBeDefined();
  expect(data.creeper.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.blocksBroken).toEqualTypeOf<number>();
  expect(data.creeper.meleeKills).toBeDefined();
  expect(data.creeper.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.meleeKills).toEqualTypeOf<number>();
  expect(data.creeper.damageDealt).toBeDefined();
  expect(data.creeper.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.damageDealt).toEqualTypeOf<number>();
  expect(data.creeper.faceOff).toBeDefined();
  expectTypeOf(data.creeper.faceOff).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.creeper.faceOff.kills).toBeDefined();
  expect(data.creeper.faceOff.kills).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.faceOff.kills).toEqualTypeOf<number>();
  expect(data.creeper.faceOff.assists).toBeDefined();
  expect(data.creeper.faceOff.assists).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.faceOff.assists).toEqualTypeOf<number>();
  expect(data.creeper.faceOff.deaths).toBeDefined();
  expect(data.creeper.faceOff.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.faceOff.deaths).toEqualTypeOf<number>();
  expect(data.creeper.faceOff.KDRatio).toBeDefined();
  expect(data.creeper.faceOff.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.faceOff.KDRatio).toEqualTypeOf<number>();
  expect(data.creeper.faceOff.wins).toBeDefined();
  expect(data.creeper.faceOff.wins).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.faceOff.wins).toEqualTypeOf<number>();
  expect(data.creeper.faceOff.losses).toBeDefined();
  expect(data.creeper.faceOff.losses).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.faceOff.losses).toEqualTypeOf<number>();
  expect(data.creeper.faceOff.WLRatio).toBeDefined();
  expect(data.creeper.faceOff.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.faceOff.WLRatio).toEqualTypeOf<number>();
  expect(data.creeper.faceOff.finalKills).toBeDefined();
  expect(data.creeper.faceOff.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.faceOff.finalKills).toEqualTypeOf<number>();
  expect(data.creeper.faceOff.finalAssists).toBeDefined();
  expect(data.creeper.faceOff.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.faceOff.finalAssists).toEqualTypeOf<number>();
  expect(data.creeper.faceOff.finalDeaths).toBeDefined();
  expect(data.creeper.faceOff.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.faceOff.finalDeaths).toEqualTypeOf<number>();
  expect(data.creeper.faceOff.finalKDRatio).toBeDefined();
  expect(data.creeper.faceOff.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.faceOff.finalKDRatio).toEqualTypeOf<number>();
  expect(data.creeper.faceOff.playedGames).toBeDefined();
  expect(data.creeper.faceOff.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.faceOff.playedGames).toEqualTypeOf<number>();
  expect(data.creeper.faceOff.witherDamage).toBeDefined();
  expect(data.creeper.faceOff.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.faceOff.witherDamage).toEqualTypeOf<number>();
  expect(data.creeper.faceOff.defenderKills).toBeDefined();
  expect(data.creeper.faceOff.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.faceOff.defenderKills).toEqualTypeOf<number>();
  expect(data.creeper.faceOff.walked).toBeDefined();
  expect(data.creeper.faceOff.walked).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.faceOff.walked).toEqualTypeOf<number>();
  expect(data.creeper.faceOff.blocksPlaced).toBeDefined();
  expect(data.creeper.faceOff.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.faceOff.blocksPlaced).toEqualTypeOf<number>();
  expect(data.creeper.faceOff.blocksBroken).toBeDefined();
  expect(data.creeper.faceOff.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.faceOff.blocksBroken).toEqualTypeOf<number>();
  expect(data.creeper.faceOff.meleeKills).toBeDefined();
  expect(data.creeper.faceOff.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.faceOff.meleeKills).toEqualTypeOf<number>();
  expect(data.creeper.faceOff.damageDealt).toBeDefined();
  expect(data.creeper.faceOff.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.faceOff.damageDealt).toEqualTypeOf<number>();
  expect(data.creeper.casualBrawl).toBeDefined();
  expectTypeOf(data.creeper.casualBrawl).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.creeper.casualBrawl.kills).toBeDefined();
  expect(data.creeper.casualBrawl.kills).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.casualBrawl.kills).toEqualTypeOf<number>();
  expect(data.creeper.casualBrawl.assists).toBeDefined();
  expect(data.creeper.casualBrawl.assists).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.casualBrawl.assists).toEqualTypeOf<number>();
  expect(data.creeper.casualBrawl.deaths).toBeDefined();
  expect(data.creeper.casualBrawl.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.casualBrawl.deaths).toEqualTypeOf<number>();
  expect(data.creeper.casualBrawl.KDRatio).toBeDefined();
  expect(data.creeper.casualBrawl.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.casualBrawl.KDRatio).toEqualTypeOf<number>();
  expect(data.creeper.casualBrawl.wins).toBeDefined();
  expect(data.creeper.casualBrawl.wins).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.casualBrawl.wins).toEqualTypeOf<number>();
  expect(data.creeper.casualBrawl.losses).toBeDefined();
  expect(data.creeper.casualBrawl.losses).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.casualBrawl.losses).toEqualTypeOf<number>();
  expect(data.creeper.casualBrawl.WLRatio).toBeDefined();
  expect(data.creeper.casualBrawl.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.casualBrawl.WLRatio).toEqualTypeOf<number>();
  expect(data.creeper.casualBrawl.finalKills).toBeDefined();
  expect(data.creeper.casualBrawl.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.casualBrawl.finalKills).toEqualTypeOf<number>();
  expect(data.creeper.casualBrawl.finalAssists).toBeDefined();
  expect(data.creeper.casualBrawl.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.casualBrawl.finalAssists).toEqualTypeOf<number>();
  expect(data.creeper.casualBrawl.finalDeaths).toBeDefined();
  expect(data.creeper.casualBrawl.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.casualBrawl.finalDeaths).toEqualTypeOf<number>();
  expect(data.creeper.casualBrawl.finalKDRatio).toBeDefined();
  expect(data.creeper.casualBrawl.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.casualBrawl.finalKDRatio).toEqualTypeOf<number>();
  expect(data.creeper.casualBrawl.playedGames).toBeDefined();
  expect(data.creeper.casualBrawl.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.casualBrawl.playedGames).toEqualTypeOf<number>();
  expect(data.creeper.casualBrawl.witherDamage).toBeDefined();
  expect(data.creeper.casualBrawl.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.casualBrawl.witherDamage).toEqualTypeOf<number>();
  expect(data.creeper.casualBrawl.defenderKills).toBeDefined();
  expect(data.creeper.casualBrawl.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.casualBrawl.defenderKills).toEqualTypeOf<number>();
  expect(data.creeper.casualBrawl.walked).toBeDefined();
  expect(data.creeper.casualBrawl.walked).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.casualBrawl.walked).toEqualTypeOf<number>();
  expect(data.creeper.casualBrawl.blocksPlaced).toBeDefined();
  expect(data.creeper.casualBrawl.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.casualBrawl.blocksPlaced).toEqualTypeOf<number>();
  expect(data.creeper.casualBrawl.blocksBroken).toBeDefined();
  expect(data.creeper.casualBrawl.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.casualBrawl.blocksBroken).toEqualTypeOf<number>();
  expect(data.creeper.casualBrawl.meleeKills).toBeDefined();
  expect(data.creeper.casualBrawl.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.casualBrawl.meleeKills).toEqualTypeOf<number>();
  expect(data.creeper.casualBrawl.damageDealt).toBeDefined();
  expect(data.creeper.casualBrawl.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.creeper.casualBrawl.damageDealt).toEqualTypeOf<number>();
  expect(data.pirate).toBeDefined();
  expectTypeOf(data.pirate).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.pirate.kills).toBeDefined();
  expect(data.pirate.kills).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.kills).toEqualTypeOf<number>();
  expect(data.pirate.assists).toBeDefined();
  expect(data.pirate.assists).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.assists).toEqualTypeOf<number>();
  expect(data.pirate.deaths).toBeDefined();
  expect(data.pirate.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.deaths).toEqualTypeOf<number>();
  expect(data.pirate.KDRatio).toBeDefined();
  expect(data.pirate.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.KDRatio).toEqualTypeOf<number>();
  expect(data.pirate.wins).toBeDefined();
  expect(data.pirate.wins).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.wins).toEqualTypeOf<number>();
  expect(data.pirate.losses).toBeDefined();
  expect(data.pirate.losses).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.losses).toEqualTypeOf<number>();
  expect(data.pirate.WLRatio).toBeDefined();
  expect(data.pirate.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.WLRatio).toEqualTypeOf<number>();
  expect(data.pirate.finalKills).toBeDefined();
  expect(data.pirate.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.finalKills).toEqualTypeOf<number>();
  expect(data.pirate.finalAssists).toBeDefined();
  expect(data.pirate.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.finalAssists).toEqualTypeOf<number>();
  expect(data.pirate.finalDeaths).toBeDefined();
  expect(data.pirate.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.finalDeaths).toEqualTypeOf<number>();
  expect(data.pirate.finalKDRatio).toBeDefined();
  expect(data.pirate.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.finalKDRatio).toEqualTypeOf<number>();
  expect(data.pirate.playedGames).toBeDefined();
  expect(data.pirate.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.playedGames).toEqualTypeOf<number>();
  expect(data.pirate.witherDamage).toBeDefined();
  expect(data.pirate.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.witherDamage).toEqualTypeOf<number>();
  expect(data.pirate.defenderKills).toBeDefined();
  expect(data.pirate.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.defenderKills).toEqualTypeOf<number>();
  expect(data.pirate.walked).toBeDefined();
  expect(data.pirate.walked).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.walked).toEqualTypeOf<number>();
  expect(data.pirate.blocksPlaced).toBeDefined();
  expect(data.pirate.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.blocksPlaced).toEqualTypeOf<number>();
  expect(data.pirate.blocksBroken).toBeDefined();
  expect(data.pirate.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.blocksBroken).toEqualTypeOf<number>();
  expect(data.pirate.meleeKills).toBeDefined();
  expect(data.pirate.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.meleeKills).toEqualTypeOf<number>();
  expect(data.pirate.damageDealt).toBeDefined();
  expect(data.pirate.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.damageDealt).toEqualTypeOf<number>();
  expect(data.pirate.faceOff).toBeDefined();
  expectTypeOf(data.pirate.faceOff).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.pirate.faceOff.kills).toBeDefined();
  expect(data.pirate.faceOff.kills).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.faceOff.kills).toEqualTypeOf<number>();
  expect(data.pirate.faceOff.assists).toBeDefined();
  expect(data.pirate.faceOff.assists).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.faceOff.assists).toEqualTypeOf<number>();
  expect(data.pirate.faceOff.deaths).toBeDefined();
  expect(data.pirate.faceOff.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.faceOff.deaths).toEqualTypeOf<number>();
  expect(data.pirate.faceOff.KDRatio).toBeDefined();
  expect(data.pirate.faceOff.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.faceOff.KDRatio).toEqualTypeOf<number>();
  expect(data.pirate.faceOff.wins).toBeDefined();
  expect(data.pirate.faceOff.wins).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.faceOff.wins).toEqualTypeOf<number>();
  expect(data.pirate.faceOff.losses).toBeDefined();
  expect(data.pirate.faceOff.losses).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.faceOff.losses).toEqualTypeOf<number>();
  expect(data.pirate.faceOff.WLRatio).toBeDefined();
  expect(data.pirate.faceOff.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.faceOff.WLRatio).toEqualTypeOf<number>();
  expect(data.pirate.faceOff.finalKills).toBeDefined();
  expect(data.pirate.faceOff.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.faceOff.finalKills).toEqualTypeOf<number>();
  expect(data.pirate.faceOff.finalAssists).toBeDefined();
  expect(data.pirate.faceOff.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.faceOff.finalAssists).toEqualTypeOf<number>();
  expect(data.pirate.faceOff.finalDeaths).toBeDefined();
  expect(data.pirate.faceOff.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.faceOff.finalDeaths).toEqualTypeOf<number>();
  expect(data.pirate.faceOff.finalKDRatio).toBeDefined();
  expect(data.pirate.faceOff.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.faceOff.finalKDRatio).toEqualTypeOf<number>();
  expect(data.pirate.faceOff.playedGames).toBeDefined();
  expect(data.pirate.faceOff.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.faceOff.playedGames).toEqualTypeOf<number>();
  expect(data.pirate.faceOff.witherDamage).toBeDefined();
  expect(data.pirate.faceOff.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.faceOff.witherDamage).toEqualTypeOf<number>();
  expect(data.pirate.faceOff.defenderKills).toBeDefined();
  expect(data.pirate.faceOff.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.faceOff.defenderKills).toEqualTypeOf<number>();
  expect(data.pirate.faceOff.walked).toBeDefined();
  expect(data.pirate.faceOff.walked).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.faceOff.walked).toEqualTypeOf<number>();
  expect(data.pirate.faceOff.blocksPlaced).toBeDefined();
  expect(data.pirate.faceOff.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.faceOff.blocksPlaced).toEqualTypeOf<number>();
  expect(data.pirate.faceOff.blocksBroken).toBeDefined();
  expect(data.pirate.faceOff.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.faceOff.blocksBroken).toEqualTypeOf<number>();
  expect(data.pirate.faceOff.meleeKills).toBeDefined();
  expect(data.pirate.faceOff.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.faceOff.meleeKills).toEqualTypeOf<number>();
  expect(data.pirate.faceOff.damageDealt).toBeDefined();
  expect(data.pirate.faceOff.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.faceOff.damageDealt).toEqualTypeOf<number>();
  expect(data.pirate.casualBrawl).toBeDefined();
  expectTypeOf(data.pirate.casualBrawl).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.pirate.casualBrawl.kills).toBeDefined();
  expect(data.pirate.casualBrawl.kills).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.casualBrawl.kills).toEqualTypeOf<number>();
  expect(data.pirate.casualBrawl.assists).toBeDefined();
  expect(data.pirate.casualBrawl.assists).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.casualBrawl.assists).toEqualTypeOf<number>();
  expect(data.pirate.casualBrawl.deaths).toBeDefined();
  expect(data.pirate.casualBrawl.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.casualBrawl.deaths).toEqualTypeOf<number>();
  expect(data.pirate.casualBrawl.KDRatio).toBeDefined();
  expect(data.pirate.casualBrawl.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.casualBrawl.KDRatio).toEqualTypeOf<number>();
  expect(data.pirate.casualBrawl.wins).toBeDefined();
  expect(data.pirate.casualBrawl.wins).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.casualBrawl.wins).toEqualTypeOf<number>();
  expect(data.pirate.casualBrawl.losses).toBeDefined();
  expect(data.pirate.casualBrawl.losses).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.casualBrawl.losses).toEqualTypeOf<number>();
  expect(data.pirate.casualBrawl.WLRatio).toBeDefined();
  expect(data.pirate.casualBrawl.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.casualBrawl.WLRatio).toEqualTypeOf<number>();
  expect(data.pirate.casualBrawl.finalKills).toBeDefined();
  expect(data.pirate.casualBrawl.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.casualBrawl.finalKills).toEqualTypeOf<number>();
  expect(data.pirate.casualBrawl.finalAssists).toBeDefined();
  expect(data.pirate.casualBrawl.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.casualBrawl.finalAssists).toEqualTypeOf<number>();
  expect(data.pirate.casualBrawl.finalDeaths).toBeDefined();
  expect(data.pirate.casualBrawl.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.casualBrawl.finalDeaths).toEqualTypeOf<number>();
  expect(data.pirate.casualBrawl.finalKDRatio).toBeDefined();
  expect(data.pirate.casualBrawl.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.casualBrawl.finalKDRatio).toEqualTypeOf<number>();
  expect(data.pirate.casualBrawl.playedGames).toBeDefined();
  expect(data.pirate.casualBrawl.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.casualBrawl.playedGames).toEqualTypeOf<number>();
  expect(data.pirate.casualBrawl.witherDamage).toBeDefined();
  expect(data.pirate.casualBrawl.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.casualBrawl.witherDamage).toEqualTypeOf<number>();
  expect(data.pirate.casualBrawl.defenderKills).toBeDefined();
  expect(data.pirate.casualBrawl.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.casualBrawl.defenderKills).toEqualTypeOf<number>();
  expect(data.pirate.casualBrawl.walked).toBeDefined();
  expect(data.pirate.casualBrawl.walked).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.casualBrawl.walked).toEqualTypeOf<number>();
  expect(data.pirate.casualBrawl.blocksPlaced).toBeDefined();
  expect(data.pirate.casualBrawl.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.casualBrawl.blocksPlaced).toEqualTypeOf<number>();
  expect(data.pirate.casualBrawl.blocksBroken).toBeDefined();
  expect(data.pirate.casualBrawl.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.casualBrawl.blocksBroken).toEqualTypeOf<number>();
  expect(data.pirate.casualBrawl.meleeKills).toBeDefined();
  expect(data.pirate.casualBrawl.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.casualBrawl.meleeKills).toEqualTypeOf<number>();
  expect(data.pirate.casualBrawl.damageDealt).toBeDefined();
  expect(data.pirate.casualBrawl.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.pirate.casualBrawl.damageDealt).toEqualTypeOf<number>();
  expect(data.sheep).toBeDefined();
  expectTypeOf(data.sheep).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.sheep.kills).toBeDefined();
  expect(data.sheep.kills).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.kills).toEqualTypeOf<number>();
  expect(data.sheep.assists).toBeDefined();
  expect(data.sheep.assists).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.assists).toEqualTypeOf<number>();
  expect(data.sheep.deaths).toBeDefined();
  expect(data.sheep.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.deaths).toEqualTypeOf<number>();
  expect(data.sheep.KDRatio).toBeDefined();
  expect(data.sheep.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.KDRatio).toEqualTypeOf<number>();
  expect(data.sheep.wins).toBeDefined();
  expect(data.sheep.wins).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.wins).toEqualTypeOf<number>();
  expect(data.sheep.losses).toBeDefined();
  expect(data.sheep.losses).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.losses).toEqualTypeOf<number>();
  expect(data.sheep.WLRatio).toBeDefined();
  expect(data.sheep.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.WLRatio).toEqualTypeOf<number>();
  expect(data.sheep.finalKills).toBeDefined();
  expect(data.sheep.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.finalKills).toEqualTypeOf<number>();
  expect(data.sheep.finalAssists).toBeDefined();
  expect(data.sheep.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.finalAssists).toEqualTypeOf<number>();
  expect(data.sheep.finalDeaths).toBeDefined();
  expect(data.sheep.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.finalDeaths).toEqualTypeOf<number>();
  expect(data.sheep.finalKDRatio).toBeDefined();
  expect(data.sheep.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.finalKDRatio).toEqualTypeOf<number>();
  expect(data.sheep.playedGames).toBeDefined();
  expect(data.sheep.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.playedGames).toEqualTypeOf<number>();
  expect(data.sheep.witherDamage).toBeDefined();
  expect(data.sheep.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.witherDamage).toEqualTypeOf<number>();
  expect(data.sheep.defenderKills).toBeDefined();
  expect(data.sheep.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.defenderKills).toEqualTypeOf<number>();
  expect(data.sheep.walked).toBeDefined();
  expect(data.sheep.walked).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.walked).toEqualTypeOf<number>();
  expect(data.sheep.blocksPlaced).toBeDefined();
  expect(data.sheep.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.blocksPlaced).toEqualTypeOf<number>();
  expect(data.sheep.blocksBroken).toBeDefined();
  expect(data.sheep.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.blocksBroken).toEqualTypeOf<number>();
  expect(data.sheep.meleeKills).toBeDefined();
  expect(data.sheep.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.meleeKills).toEqualTypeOf<number>();
  expect(data.sheep.damageDealt).toBeDefined();
  expect(data.sheep.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.damageDealt).toEqualTypeOf<number>();
  expect(data.sheep.faceOff).toBeDefined();
  expectTypeOf(data.sheep.faceOff).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.sheep.faceOff.kills).toBeDefined();
  expect(data.sheep.faceOff.kills).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.faceOff.kills).toEqualTypeOf<number>();
  expect(data.sheep.faceOff.assists).toBeDefined();
  expect(data.sheep.faceOff.assists).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.faceOff.assists).toEqualTypeOf<number>();
  expect(data.sheep.faceOff.deaths).toBeDefined();
  expect(data.sheep.faceOff.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.faceOff.deaths).toEqualTypeOf<number>();
  expect(data.sheep.faceOff.KDRatio).toBeDefined();
  expect(data.sheep.faceOff.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.faceOff.KDRatio).toEqualTypeOf<number>();
  expect(data.sheep.faceOff.wins).toBeDefined();
  expect(data.sheep.faceOff.wins).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.faceOff.wins).toEqualTypeOf<number>();
  expect(data.sheep.faceOff.losses).toBeDefined();
  expect(data.sheep.faceOff.losses).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.faceOff.losses).toEqualTypeOf<number>();
  expect(data.sheep.faceOff.WLRatio).toBeDefined();
  expect(data.sheep.faceOff.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.faceOff.WLRatio).toEqualTypeOf<number>();
  expect(data.sheep.faceOff.finalKills).toBeDefined();
  expect(data.sheep.faceOff.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.faceOff.finalKills).toEqualTypeOf<number>();
  expect(data.sheep.faceOff.finalAssists).toBeDefined();
  expect(data.sheep.faceOff.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.faceOff.finalAssists).toEqualTypeOf<number>();
  expect(data.sheep.faceOff.finalDeaths).toBeDefined();
  expect(data.sheep.faceOff.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.faceOff.finalDeaths).toEqualTypeOf<number>();
  expect(data.sheep.faceOff.finalKDRatio).toBeDefined();
  expect(data.sheep.faceOff.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.faceOff.finalKDRatio).toEqualTypeOf<number>();
  expect(data.sheep.faceOff.playedGames).toBeDefined();
  expect(data.sheep.faceOff.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.faceOff.playedGames).toEqualTypeOf<number>();
  expect(data.sheep.faceOff.witherDamage).toBeDefined();
  expect(data.sheep.faceOff.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.faceOff.witherDamage).toEqualTypeOf<number>();
  expect(data.sheep.faceOff.defenderKills).toBeDefined();
  expect(data.sheep.faceOff.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.faceOff.defenderKills).toEqualTypeOf<number>();
  expect(data.sheep.faceOff.walked).toBeDefined();
  expect(data.sheep.faceOff.walked).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.faceOff.walked).toEqualTypeOf<number>();
  expect(data.sheep.faceOff.blocksPlaced).toBeDefined();
  expect(data.sheep.faceOff.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.faceOff.blocksPlaced).toEqualTypeOf<number>();
  expect(data.sheep.faceOff.blocksBroken).toBeDefined();
  expect(data.sheep.faceOff.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.faceOff.blocksBroken).toEqualTypeOf<number>();
  expect(data.sheep.faceOff.meleeKills).toBeDefined();
  expect(data.sheep.faceOff.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.faceOff.meleeKills).toEqualTypeOf<number>();
  expect(data.sheep.faceOff.damageDealt).toBeDefined();
  expect(data.sheep.faceOff.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.faceOff.damageDealt).toEqualTypeOf<number>();
  expect(data.sheep.casualBrawl).toBeDefined();
  expectTypeOf(data.sheep.casualBrawl).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.sheep.casualBrawl.kills).toBeDefined();
  expect(data.sheep.casualBrawl.kills).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.casualBrawl.kills).toEqualTypeOf<number>();
  expect(data.sheep.casualBrawl.assists).toBeDefined();
  expect(data.sheep.casualBrawl.assists).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.casualBrawl.assists).toEqualTypeOf<number>();
  expect(data.sheep.casualBrawl.deaths).toBeDefined();
  expect(data.sheep.casualBrawl.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.casualBrawl.deaths).toEqualTypeOf<number>();
  expect(data.sheep.casualBrawl.KDRatio).toBeDefined();
  expect(data.sheep.casualBrawl.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.casualBrawl.KDRatio).toEqualTypeOf<number>();
  expect(data.sheep.casualBrawl.wins).toBeDefined();
  expect(data.sheep.casualBrawl.wins).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.casualBrawl.wins).toEqualTypeOf<number>();
  expect(data.sheep.casualBrawl.losses).toBeDefined();
  expect(data.sheep.casualBrawl.losses).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.casualBrawl.losses).toEqualTypeOf<number>();
  expect(data.sheep.casualBrawl.WLRatio).toBeDefined();
  expect(data.sheep.casualBrawl.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.casualBrawl.WLRatio).toEqualTypeOf<number>();
  expect(data.sheep.casualBrawl.finalKills).toBeDefined();
  expect(data.sheep.casualBrawl.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.casualBrawl.finalKills).toEqualTypeOf<number>();
  expect(data.sheep.casualBrawl.finalAssists).toBeDefined();
  expect(data.sheep.casualBrawl.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.casualBrawl.finalAssists).toEqualTypeOf<number>();
  expect(data.sheep.casualBrawl.finalDeaths).toBeDefined();
  expect(data.sheep.casualBrawl.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.casualBrawl.finalDeaths).toEqualTypeOf<number>();
  expect(data.sheep.casualBrawl.finalKDRatio).toBeDefined();
  expect(data.sheep.casualBrawl.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.casualBrawl.finalKDRatio).toEqualTypeOf<number>();
  expect(data.sheep.casualBrawl.playedGames).toBeDefined();
  expect(data.sheep.casualBrawl.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.casualBrawl.playedGames).toEqualTypeOf<number>();
  expect(data.sheep.casualBrawl.witherDamage).toBeDefined();
  expect(data.sheep.casualBrawl.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.casualBrawl.witherDamage).toEqualTypeOf<number>();
  expect(data.sheep.casualBrawl.defenderKills).toBeDefined();
  expect(data.sheep.casualBrawl.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.casualBrawl.defenderKills).toEqualTypeOf<number>();
  expect(data.sheep.casualBrawl.walked).toBeDefined();
  expect(data.sheep.casualBrawl.walked).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.casualBrawl.walked).toEqualTypeOf<number>();
  expect(data.sheep.casualBrawl.blocksPlaced).toBeDefined();
  expect(data.sheep.casualBrawl.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.casualBrawl.blocksPlaced).toEqualTypeOf<number>();
  expect(data.sheep.casualBrawl.blocksBroken).toBeDefined();
  expect(data.sheep.casualBrawl.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.casualBrawl.blocksBroken).toEqualTypeOf<number>();
  expect(data.sheep.casualBrawl.meleeKills).toBeDefined();
  expect(data.sheep.casualBrawl.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.casualBrawl.meleeKills).toEqualTypeOf<number>();
  expect(data.sheep.casualBrawl.damageDealt).toBeDefined();
  expect(data.sheep.casualBrawl.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.sheep.casualBrawl.damageDealt).toEqualTypeOf<number>();
  expect(data.skeleton).toBeDefined();
  expectTypeOf(data.skeleton).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.skeleton.kills).toBeDefined();
  expect(data.skeleton.kills).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.kills).toEqualTypeOf<number>();
  expect(data.skeleton.assists).toBeDefined();
  expect(data.skeleton.assists).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.assists).toEqualTypeOf<number>();
  expect(data.skeleton.deaths).toBeDefined();
  expect(data.skeleton.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.deaths).toEqualTypeOf<number>();
  expect(data.skeleton.KDRatio).toBeDefined();
  expect(data.skeleton.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.KDRatio).toEqualTypeOf<number>();
  expect(data.skeleton.wins).toBeDefined();
  expect(data.skeleton.wins).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.wins).toEqualTypeOf<number>();
  expect(data.skeleton.losses).toBeDefined();
  expect(data.skeleton.losses).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.losses).toEqualTypeOf<number>();
  expect(data.skeleton.WLRatio).toBeDefined();
  expect(data.skeleton.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.WLRatio).toEqualTypeOf<number>();
  expect(data.skeleton.finalKills).toBeDefined();
  expect(data.skeleton.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.finalKills).toEqualTypeOf<number>();
  expect(data.skeleton.finalAssists).toBeDefined();
  expect(data.skeleton.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.finalAssists).toEqualTypeOf<number>();
  expect(data.skeleton.finalDeaths).toBeDefined();
  expect(data.skeleton.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.finalDeaths).toEqualTypeOf<number>();
  expect(data.skeleton.finalKDRatio).toBeDefined();
  expect(data.skeleton.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.finalKDRatio).toEqualTypeOf<number>();
  expect(data.skeleton.playedGames).toBeDefined();
  expect(data.skeleton.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.playedGames).toEqualTypeOf<number>();
  expect(data.skeleton.witherDamage).toBeDefined();
  expect(data.skeleton.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.witherDamage).toEqualTypeOf<number>();
  expect(data.skeleton.defenderKills).toBeDefined();
  expect(data.skeleton.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.defenderKills).toEqualTypeOf<number>();
  expect(data.skeleton.walked).toBeDefined();
  expect(data.skeleton.walked).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.walked).toEqualTypeOf<number>();
  expect(data.skeleton.blocksPlaced).toBeDefined();
  expect(data.skeleton.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.blocksPlaced).toEqualTypeOf<number>();
  expect(data.skeleton.blocksBroken).toBeDefined();
  expect(data.skeleton.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.blocksBroken).toEqualTypeOf<number>();
  expect(data.skeleton.meleeKills).toBeDefined();
  expect(data.skeleton.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.meleeKills).toEqualTypeOf<number>();
  expect(data.skeleton.damageDealt).toBeDefined();
  expect(data.skeleton.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.damageDealt).toEqualTypeOf<number>();
  expect(data.skeleton.faceOff).toBeDefined();
  expectTypeOf(data.skeleton.faceOff).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.skeleton.faceOff.kills).toBeDefined();
  expect(data.skeleton.faceOff.kills).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.faceOff.kills).toEqualTypeOf<number>();
  expect(data.skeleton.faceOff.assists).toBeDefined();
  expect(data.skeleton.faceOff.assists).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.faceOff.assists).toEqualTypeOf<number>();
  expect(data.skeleton.faceOff.deaths).toBeDefined();
  expect(data.skeleton.faceOff.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.faceOff.deaths).toEqualTypeOf<number>();
  expect(data.skeleton.faceOff.KDRatio).toBeDefined();
  expect(data.skeleton.faceOff.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.faceOff.KDRatio).toEqualTypeOf<number>();
  expect(data.skeleton.faceOff.wins).toBeDefined();
  expect(data.skeleton.faceOff.wins).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.faceOff.wins).toEqualTypeOf<number>();
  expect(data.skeleton.faceOff.losses).toBeDefined();
  expect(data.skeleton.faceOff.losses).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.faceOff.losses).toEqualTypeOf<number>();
  expect(data.skeleton.faceOff.WLRatio).toBeDefined();
  expect(data.skeleton.faceOff.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.faceOff.WLRatio).toEqualTypeOf<number>();
  expect(data.skeleton.faceOff.finalKills).toBeDefined();
  expect(data.skeleton.faceOff.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.faceOff.finalKills).toEqualTypeOf<number>();
  expect(data.skeleton.faceOff.finalAssists).toBeDefined();
  expect(data.skeleton.faceOff.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.faceOff.finalAssists).toEqualTypeOf<number>();
  expect(data.skeleton.faceOff.finalDeaths).toBeDefined();
  expect(data.skeleton.faceOff.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.faceOff.finalDeaths).toEqualTypeOf<number>();
  expect(data.skeleton.faceOff.finalKDRatio).toBeDefined();
  expect(data.skeleton.faceOff.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.faceOff.finalKDRatio).toEqualTypeOf<number>();
  expect(data.skeleton.faceOff.playedGames).toBeDefined();
  expect(data.skeleton.faceOff.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.faceOff.playedGames).toEqualTypeOf<number>();
  expect(data.skeleton.faceOff.witherDamage).toBeDefined();
  expect(data.skeleton.faceOff.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.faceOff.witherDamage).toEqualTypeOf<number>();
  expect(data.skeleton.faceOff.defenderKills).toBeDefined();
  expect(data.skeleton.faceOff.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.faceOff.defenderKills).toEqualTypeOf<number>();
  expect(data.skeleton.faceOff.walked).toBeDefined();
  expect(data.skeleton.faceOff.walked).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.faceOff.walked).toEqualTypeOf<number>();
  expect(data.skeleton.faceOff.blocksPlaced).toBeDefined();
  expect(data.skeleton.faceOff.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.faceOff.blocksPlaced).toEqualTypeOf<number>();
  expect(data.skeleton.faceOff.blocksBroken).toBeDefined();
  expect(data.skeleton.faceOff.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.faceOff.blocksBroken).toEqualTypeOf<number>();
  expect(data.skeleton.faceOff.meleeKills).toBeDefined();
  expect(data.skeleton.faceOff.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.faceOff.meleeKills).toEqualTypeOf<number>();
  expect(data.skeleton.faceOff.damageDealt).toBeDefined();
  expect(data.skeleton.faceOff.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.faceOff.damageDealt).toEqualTypeOf<number>();
  expect(data.skeleton.casualBrawl).toBeDefined();
  expectTypeOf(data.skeleton.casualBrawl).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.skeleton.casualBrawl.kills).toBeDefined();
  expect(data.skeleton.casualBrawl.kills).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.casualBrawl.kills).toEqualTypeOf<number>();
  expect(data.skeleton.casualBrawl.assists).toBeDefined();
  expect(data.skeleton.casualBrawl.assists).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.casualBrawl.assists).toEqualTypeOf<number>();
  expect(data.skeleton.casualBrawl.deaths).toBeDefined();
  expect(data.skeleton.casualBrawl.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.casualBrawl.deaths).toEqualTypeOf<number>();
  expect(data.skeleton.casualBrawl.KDRatio).toBeDefined();
  expect(data.skeleton.casualBrawl.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.casualBrawl.KDRatio).toEqualTypeOf<number>();
  expect(data.skeleton.casualBrawl.wins).toBeDefined();
  expect(data.skeleton.casualBrawl.wins).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.casualBrawl.wins).toEqualTypeOf<number>();
  expect(data.skeleton.casualBrawl.losses).toBeDefined();
  expect(data.skeleton.casualBrawl.losses).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.casualBrawl.losses).toEqualTypeOf<number>();
  expect(data.skeleton.casualBrawl.WLRatio).toBeDefined();
  expect(data.skeleton.casualBrawl.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.casualBrawl.WLRatio).toEqualTypeOf<number>();
  expect(data.skeleton.casualBrawl.finalKills).toBeDefined();
  expect(data.skeleton.casualBrawl.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.casualBrawl.finalKills).toEqualTypeOf<number>();
  expect(data.skeleton.casualBrawl.finalAssists).toBeDefined();
  expect(data.skeleton.casualBrawl.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.casualBrawl.finalAssists).toEqualTypeOf<number>();
  expect(data.skeleton.casualBrawl.finalDeaths).toBeDefined();
  expect(data.skeleton.casualBrawl.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.casualBrawl.finalDeaths).toEqualTypeOf<number>();
  expect(data.skeleton.casualBrawl.finalKDRatio).toBeDefined();
  expect(data.skeleton.casualBrawl.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.casualBrawl.finalKDRatio).toEqualTypeOf<number>();
  expect(data.skeleton.casualBrawl.playedGames).toBeDefined();
  expect(data.skeleton.casualBrawl.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.casualBrawl.playedGames).toEqualTypeOf<number>();
  expect(data.skeleton.casualBrawl.witherDamage).toBeDefined();
  expect(data.skeleton.casualBrawl.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.casualBrawl.witherDamage).toEqualTypeOf<number>();
  expect(data.skeleton.casualBrawl.defenderKills).toBeDefined();
  expect(data.skeleton.casualBrawl.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.casualBrawl.defenderKills).toEqualTypeOf<number>();
  expect(data.skeleton.casualBrawl.walked).toBeDefined();
  expect(data.skeleton.casualBrawl.walked).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.casualBrawl.walked).toEqualTypeOf<number>();
  expect(data.skeleton.casualBrawl.blocksPlaced).toBeDefined();
  expect(data.skeleton.casualBrawl.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.casualBrawl.blocksPlaced).toEqualTypeOf<number>();
  expect(data.skeleton.casualBrawl.blocksBroken).toBeDefined();
  expect(data.skeleton.casualBrawl.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.casualBrawl.blocksBroken).toEqualTypeOf<number>();
  expect(data.skeleton.casualBrawl.meleeKills).toBeDefined();
  expect(data.skeleton.casualBrawl.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.casualBrawl.meleeKills).toEqualTypeOf<number>();
  expect(data.skeleton.casualBrawl.damageDealt).toBeDefined();
  expect(data.skeleton.casualBrawl.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.skeleton.casualBrawl.damageDealt).toEqualTypeOf<number>();
  expect(data.spider).toBeDefined();
  expectTypeOf(data.spider).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.spider.kills).toBeDefined();
  expect(data.spider.kills).greaterThanOrEqual(0);
  expectTypeOf(data.spider.kills).toEqualTypeOf<number>();
  expect(data.spider.assists).toBeDefined();
  expect(data.spider.assists).greaterThanOrEqual(0);
  expectTypeOf(data.spider.assists).toEqualTypeOf<number>();
  expect(data.spider.deaths).toBeDefined();
  expect(data.spider.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.spider.deaths).toEqualTypeOf<number>();
  expect(data.spider.KDRatio).toBeDefined();
  expect(data.spider.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.spider.KDRatio).toEqualTypeOf<number>();
  expect(data.spider.wins).toBeDefined();
  expect(data.spider.wins).greaterThanOrEqual(0);
  expectTypeOf(data.spider.wins).toEqualTypeOf<number>();
  expect(data.spider.losses).toBeDefined();
  expect(data.spider.losses).greaterThanOrEqual(0);
  expectTypeOf(data.spider.losses).toEqualTypeOf<number>();
  expect(data.spider.WLRatio).toBeDefined();
  expect(data.spider.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.spider.WLRatio).toEqualTypeOf<number>();
  expect(data.spider.finalKills).toBeDefined();
  expect(data.spider.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.spider.finalKills).toEqualTypeOf<number>();
  expect(data.spider.finalAssists).toBeDefined();
  expect(data.spider.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.spider.finalAssists).toEqualTypeOf<number>();
  expect(data.spider.finalDeaths).toBeDefined();
  expect(data.spider.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.spider.finalDeaths).toEqualTypeOf<number>();
  expect(data.spider.finalKDRatio).toBeDefined();
  expect(data.spider.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.spider.finalKDRatio).toEqualTypeOf<number>();
  expect(data.spider.playedGames).toBeDefined();
  expect(data.spider.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.spider.playedGames).toEqualTypeOf<number>();
  expect(data.spider.witherDamage).toBeDefined();
  expect(data.spider.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.spider.witherDamage).toEqualTypeOf<number>();
  expect(data.spider.defenderKills).toBeDefined();
  expect(data.spider.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.spider.defenderKills).toEqualTypeOf<number>();
  expect(data.spider.walked).toBeDefined();
  expect(data.spider.walked).greaterThanOrEqual(0);
  expectTypeOf(data.spider.walked).toEqualTypeOf<number>();
  expect(data.spider.blocksPlaced).toBeDefined();
  expect(data.spider.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.spider.blocksPlaced).toEqualTypeOf<number>();
  expect(data.spider.blocksBroken).toBeDefined();
  expect(data.spider.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.spider.blocksBroken).toEqualTypeOf<number>();
  expect(data.spider.meleeKills).toBeDefined();
  expect(data.spider.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.spider.meleeKills).toEqualTypeOf<number>();
  expect(data.spider.damageDealt).toBeDefined();
  expect(data.spider.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.spider.damageDealt).toEqualTypeOf<number>();
  expect(data.spider.faceOff).toBeDefined();
  expectTypeOf(data.spider.faceOff).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.spider.faceOff.kills).toBeDefined();
  expect(data.spider.faceOff.kills).greaterThanOrEqual(0);
  expectTypeOf(data.spider.faceOff.kills).toEqualTypeOf<number>();
  expect(data.spider.faceOff.assists).toBeDefined();
  expect(data.spider.faceOff.assists).greaterThanOrEqual(0);
  expectTypeOf(data.spider.faceOff.assists).toEqualTypeOf<number>();
  expect(data.spider.faceOff.deaths).toBeDefined();
  expect(data.spider.faceOff.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.spider.faceOff.deaths).toEqualTypeOf<number>();
  expect(data.spider.faceOff.KDRatio).toBeDefined();
  expect(data.spider.faceOff.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.spider.faceOff.KDRatio).toEqualTypeOf<number>();
  expect(data.spider.faceOff.wins).toBeDefined();
  expect(data.spider.faceOff.wins).greaterThanOrEqual(0);
  expectTypeOf(data.spider.faceOff.wins).toEqualTypeOf<number>();
  expect(data.spider.faceOff.losses).toBeDefined();
  expect(data.spider.faceOff.losses).greaterThanOrEqual(0);
  expectTypeOf(data.spider.faceOff.losses).toEqualTypeOf<number>();
  expect(data.spider.faceOff.WLRatio).toBeDefined();
  expect(data.spider.faceOff.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.spider.faceOff.WLRatio).toEqualTypeOf<number>();
  expect(data.spider.faceOff.finalKills).toBeDefined();
  expect(data.spider.faceOff.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.spider.faceOff.finalKills).toEqualTypeOf<number>();
  expect(data.spider.faceOff.finalAssists).toBeDefined();
  expect(data.spider.faceOff.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.spider.faceOff.finalAssists).toEqualTypeOf<number>();
  expect(data.spider.faceOff.finalDeaths).toBeDefined();
  expect(data.spider.faceOff.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.spider.faceOff.finalDeaths).toEqualTypeOf<number>();
  expect(data.spider.faceOff.finalKDRatio).toBeDefined();
  expect(data.spider.faceOff.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.spider.faceOff.finalKDRatio).toEqualTypeOf<number>();
  expect(data.spider.faceOff.playedGames).toBeDefined();
  expect(data.spider.faceOff.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.spider.faceOff.playedGames).toEqualTypeOf<number>();
  expect(data.spider.faceOff.witherDamage).toBeDefined();
  expect(data.spider.faceOff.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.spider.faceOff.witherDamage).toEqualTypeOf<number>();
  expect(data.spider.faceOff.defenderKills).toBeDefined();
  expect(data.spider.faceOff.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.spider.faceOff.defenderKills).toEqualTypeOf<number>();
  expect(data.spider.faceOff.walked).toBeDefined();
  expect(data.spider.faceOff.walked).greaterThanOrEqual(0);
  expectTypeOf(data.spider.faceOff.walked).toEqualTypeOf<number>();
  expect(data.spider.faceOff.blocksPlaced).toBeDefined();
  expect(data.spider.faceOff.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.spider.faceOff.blocksPlaced).toEqualTypeOf<number>();
  expect(data.spider.faceOff.blocksBroken).toBeDefined();
  expect(data.spider.faceOff.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.spider.faceOff.blocksBroken).toEqualTypeOf<number>();
  expect(data.spider.faceOff.meleeKills).toBeDefined();
  expect(data.spider.faceOff.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.spider.faceOff.meleeKills).toEqualTypeOf<number>();
  expect(data.spider.faceOff.damageDealt).toBeDefined();
  expect(data.spider.faceOff.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.spider.faceOff.damageDealt).toEqualTypeOf<number>();
  expect(data.spider.casualBrawl).toBeDefined();
  expectTypeOf(data.spider.casualBrawl).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.spider.casualBrawl.kills).toBeDefined();
  expect(data.spider.casualBrawl.kills).greaterThanOrEqual(0);
  expectTypeOf(data.spider.casualBrawl.kills).toEqualTypeOf<number>();
  expect(data.spider.casualBrawl.assists).toBeDefined();
  expect(data.spider.casualBrawl.assists).greaterThanOrEqual(0);
  expectTypeOf(data.spider.casualBrawl.assists).toEqualTypeOf<number>();
  expect(data.spider.casualBrawl.deaths).toBeDefined();
  expect(data.spider.casualBrawl.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.spider.casualBrawl.deaths).toEqualTypeOf<number>();
  expect(data.spider.casualBrawl.KDRatio).toBeDefined();
  expect(data.spider.casualBrawl.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.spider.casualBrawl.KDRatio).toEqualTypeOf<number>();
  expect(data.spider.casualBrawl.wins).toBeDefined();
  expect(data.spider.casualBrawl.wins).greaterThanOrEqual(0);
  expectTypeOf(data.spider.casualBrawl.wins).toEqualTypeOf<number>();
  expect(data.spider.casualBrawl.losses).toBeDefined();
  expect(data.spider.casualBrawl.losses).greaterThanOrEqual(0);
  expectTypeOf(data.spider.casualBrawl.losses).toEqualTypeOf<number>();
  expect(data.spider.casualBrawl.WLRatio).toBeDefined();
  expect(data.spider.casualBrawl.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.spider.casualBrawl.WLRatio).toEqualTypeOf<number>();
  expect(data.spider.casualBrawl.finalKills).toBeDefined();
  expect(data.spider.casualBrawl.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.spider.casualBrawl.finalKills).toEqualTypeOf<number>();
  expect(data.spider.casualBrawl.finalAssists).toBeDefined();
  expect(data.spider.casualBrawl.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.spider.casualBrawl.finalAssists).toEqualTypeOf<number>();
  expect(data.spider.casualBrawl.finalDeaths).toBeDefined();
  expect(data.spider.casualBrawl.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.spider.casualBrawl.finalDeaths).toEqualTypeOf<number>();
  expect(data.spider.casualBrawl.finalKDRatio).toBeDefined();
  expect(data.spider.casualBrawl.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.spider.casualBrawl.finalKDRatio).toEqualTypeOf<number>();
  expect(data.spider.casualBrawl.playedGames).toBeDefined();
  expect(data.spider.casualBrawl.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.spider.casualBrawl.playedGames).toEqualTypeOf<number>();
  expect(data.spider.casualBrawl.witherDamage).toBeDefined();
  expect(data.spider.casualBrawl.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.spider.casualBrawl.witherDamage).toEqualTypeOf<number>();
  expect(data.spider.casualBrawl.defenderKills).toBeDefined();
  expect(data.spider.casualBrawl.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.spider.casualBrawl.defenderKills).toEqualTypeOf<number>();
  expect(data.spider.casualBrawl.walked).toBeDefined();
  expect(data.spider.casualBrawl.walked).greaterThanOrEqual(0);
  expectTypeOf(data.spider.casualBrawl.walked).toEqualTypeOf<number>();
  expect(data.spider.casualBrawl.blocksPlaced).toBeDefined();
  expect(data.spider.casualBrawl.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.spider.casualBrawl.blocksPlaced).toEqualTypeOf<number>();
  expect(data.spider.casualBrawl.blocksBroken).toBeDefined();
  expect(data.spider.casualBrawl.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.spider.casualBrawl.blocksBroken).toEqualTypeOf<number>();
  expect(data.spider.casualBrawl.meleeKills).toBeDefined();
  expect(data.spider.casualBrawl.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.spider.casualBrawl.meleeKills).toEqualTypeOf<number>();
  expect(data.spider.casualBrawl.damageDealt).toBeDefined();
  expect(data.spider.casualBrawl.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.spider.casualBrawl.damageDealt).toEqualTypeOf<number>();
  expect(data.werewolf).toBeDefined();
  expectTypeOf(data.werewolf).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.werewolf.kills).toBeDefined();
  expect(data.werewolf.kills).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.kills).toEqualTypeOf<number>();
  expect(data.werewolf.assists).toBeDefined();
  expect(data.werewolf.assists).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.assists).toEqualTypeOf<number>();
  expect(data.werewolf.deaths).toBeDefined();
  expect(data.werewolf.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.deaths).toEqualTypeOf<number>();
  expect(data.werewolf.KDRatio).toBeDefined();
  expect(data.werewolf.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.KDRatio).toEqualTypeOf<number>();
  expect(data.werewolf.wins).toBeDefined();
  expect(data.werewolf.wins).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.wins).toEqualTypeOf<number>();
  expect(data.werewolf.losses).toBeDefined();
  expect(data.werewolf.losses).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.losses).toEqualTypeOf<number>();
  expect(data.werewolf.WLRatio).toBeDefined();
  expect(data.werewolf.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.WLRatio).toEqualTypeOf<number>();
  expect(data.werewolf.finalKills).toBeDefined();
  expect(data.werewolf.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.finalKills).toEqualTypeOf<number>();
  expect(data.werewolf.finalAssists).toBeDefined();
  expect(data.werewolf.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.finalAssists).toEqualTypeOf<number>();
  expect(data.werewolf.finalDeaths).toBeDefined();
  expect(data.werewolf.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.finalDeaths).toEqualTypeOf<number>();
  expect(data.werewolf.finalKDRatio).toBeDefined();
  expect(data.werewolf.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.finalKDRatio).toEqualTypeOf<number>();
  expect(data.werewolf.playedGames).toBeDefined();
  expect(data.werewolf.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.playedGames).toEqualTypeOf<number>();
  expect(data.werewolf.witherDamage).toBeDefined();
  expect(data.werewolf.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.witherDamage).toEqualTypeOf<number>();
  expect(data.werewolf.defenderKills).toBeDefined();
  expect(data.werewolf.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.defenderKills).toEqualTypeOf<number>();
  expect(data.werewolf.walked).toBeDefined();
  expect(data.werewolf.walked).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.walked).toEqualTypeOf<number>();
  expect(data.werewolf.blocksPlaced).toBeDefined();
  expect(data.werewolf.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.blocksPlaced).toEqualTypeOf<number>();
  expect(data.werewolf.blocksBroken).toBeDefined();
  expect(data.werewolf.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.blocksBroken).toEqualTypeOf<number>();
  expect(data.werewolf.meleeKills).toBeDefined();
  expect(data.werewolf.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.meleeKills).toEqualTypeOf<number>();
  expect(data.werewolf.damageDealt).toBeDefined();
  expect(data.werewolf.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.damageDealt).toEqualTypeOf<number>();
  expect(data.werewolf.faceOff).toBeDefined();
  expectTypeOf(data.werewolf.faceOff).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.werewolf.faceOff.kills).toBeDefined();
  expect(data.werewolf.faceOff.kills).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.faceOff.kills).toEqualTypeOf<number>();
  expect(data.werewolf.faceOff.assists).toBeDefined();
  expect(data.werewolf.faceOff.assists).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.faceOff.assists).toEqualTypeOf<number>();
  expect(data.werewolf.faceOff.deaths).toBeDefined();
  expect(data.werewolf.faceOff.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.faceOff.deaths).toEqualTypeOf<number>();
  expect(data.werewolf.faceOff.KDRatio).toBeDefined();
  expect(data.werewolf.faceOff.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.faceOff.KDRatio).toEqualTypeOf<number>();
  expect(data.werewolf.faceOff.wins).toBeDefined();
  expect(data.werewolf.faceOff.wins).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.faceOff.wins).toEqualTypeOf<number>();
  expect(data.werewolf.faceOff.losses).toBeDefined();
  expect(data.werewolf.faceOff.losses).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.faceOff.losses).toEqualTypeOf<number>();
  expect(data.werewolf.faceOff.WLRatio).toBeDefined();
  expect(data.werewolf.faceOff.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.faceOff.WLRatio).toEqualTypeOf<number>();
  expect(data.werewolf.faceOff.finalKills).toBeDefined();
  expect(data.werewolf.faceOff.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.faceOff.finalKills).toEqualTypeOf<number>();
  expect(data.werewolf.faceOff.finalAssists).toBeDefined();
  expect(data.werewolf.faceOff.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.faceOff.finalAssists).toEqualTypeOf<number>();
  expect(data.werewolf.faceOff.finalDeaths).toBeDefined();
  expect(data.werewolf.faceOff.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.faceOff.finalDeaths).toEqualTypeOf<number>();
  expect(data.werewolf.faceOff.finalKDRatio).toBeDefined();
  expect(data.werewolf.faceOff.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.faceOff.finalKDRatio).toEqualTypeOf<number>();
  expect(data.werewolf.faceOff.playedGames).toBeDefined();
  expect(data.werewolf.faceOff.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.faceOff.playedGames).toEqualTypeOf<number>();
  expect(data.werewolf.faceOff.witherDamage).toBeDefined();
  expect(data.werewolf.faceOff.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.faceOff.witherDamage).toEqualTypeOf<number>();
  expect(data.werewolf.faceOff.defenderKills).toBeDefined();
  expect(data.werewolf.faceOff.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.faceOff.defenderKills).toEqualTypeOf<number>();
  expect(data.werewolf.faceOff.walked).toBeDefined();
  expect(data.werewolf.faceOff.walked).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.faceOff.walked).toEqualTypeOf<number>();
  expect(data.werewolf.faceOff.blocksPlaced).toBeDefined();
  expect(data.werewolf.faceOff.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.faceOff.blocksPlaced).toEqualTypeOf<number>();
  expect(data.werewolf.faceOff.blocksBroken).toBeDefined();
  expect(data.werewolf.faceOff.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.faceOff.blocksBroken).toEqualTypeOf<number>();
  expect(data.werewolf.faceOff.meleeKills).toBeDefined();
  expect(data.werewolf.faceOff.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.faceOff.meleeKills).toEqualTypeOf<number>();
  expect(data.werewolf.faceOff.damageDealt).toBeDefined();
  expect(data.werewolf.faceOff.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.faceOff.damageDealt).toEqualTypeOf<number>();
  expect(data.werewolf.casualBrawl).toBeDefined();
  expectTypeOf(data.werewolf.casualBrawl).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.werewolf.casualBrawl.kills).toBeDefined();
  expect(data.werewolf.casualBrawl.kills).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.casualBrawl.kills).toEqualTypeOf<number>();
  expect(data.werewolf.casualBrawl.assists).toBeDefined();
  expect(data.werewolf.casualBrawl.assists).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.casualBrawl.assists).toEqualTypeOf<number>();
  expect(data.werewolf.casualBrawl.deaths).toBeDefined();
  expect(data.werewolf.casualBrawl.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.casualBrawl.deaths).toEqualTypeOf<number>();
  expect(data.werewolf.casualBrawl.KDRatio).toBeDefined();
  expect(data.werewolf.casualBrawl.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.casualBrawl.KDRatio).toEqualTypeOf<number>();
  expect(data.werewolf.casualBrawl.wins).toBeDefined();
  expect(data.werewolf.casualBrawl.wins).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.casualBrawl.wins).toEqualTypeOf<number>();
  expect(data.werewolf.casualBrawl.losses).toBeDefined();
  expect(data.werewolf.casualBrawl.losses).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.casualBrawl.losses).toEqualTypeOf<number>();
  expect(data.werewolf.casualBrawl.WLRatio).toBeDefined();
  expect(data.werewolf.casualBrawl.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.casualBrawl.WLRatio).toEqualTypeOf<number>();
  expect(data.werewolf.casualBrawl.finalKills).toBeDefined();
  expect(data.werewolf.casualBrawl.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.casualBrawl.finalKills).toEqualTypeOf<number>();
  expect(data.werewolf.casualBrawl.finalAssists).toBeDefined();
  expect(data.werewolf.casualBrawl.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.casualBrawl.finalAssists).toEqualTypeOf<number>();
  expect(data.werewolf.casualBrawl.finalDeaths).toBeDefined();
  expect(data.werewolf.casualBrawl.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.casualBrawl.finalDeaths).toEqualTypeOf<number>();
  expect(data.werewolf.casualBrawl.finalKDRatio).toBeDefined();
  expect(data.werewolf.casualBrawl.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.casualBrawl.finalKDRatio).toEqualTypeOf<number>();
  expect(data.werewolf.casualBrawl.playedGames).toBeDefined();
  expect(data.werewolf.casualBrawl.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.casualBrawl.playedGames).toEqualTypeOf<number>();
  expect(data.werewolf.casualBrawl.witherDamage).toBeDefined();
  expect(data.werewolf.casualBrawl.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.casualBrawl.witherDamage).toEqualTypeOf<number>();
  expect(data.werewolf.casualBrawl.defenderKills).toBeDefined();
  expect(data.werewolf.casualBrawl.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.casualBrawl.defenderKills).toEqualTypeOf<number>();
  expect(data.werewolf.casualBrawl.walked).toBeDefined();
  expect(data.werewolf.casualBrawl.walked).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.casualBrawl.walked).toEqualTypeOf<number>();
  expect(data.werewolf.casualBrawl.blocksPlaced).toBeDefined();
  expect(data.werewolf.casualBrawl.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.casualBrawl.blocksPlaced).toEqualTypeOf<number>();
  expect(data.werewolf.casualBrawl.blocksBroken).toBeDefined();
  expect(data.werewolf.casualBrawl.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.casualBrawl.blocksBroken).toEqualTypeOf<number>();
  expect(data.werewolf.casualBrawl.meleeKills).toBeDefined();
  expect(data.werewolf.casualBrawl.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.casualBrawl.meleeKills).toEqualTypeOf<number>();
  expect(data.werewolf.casualBrawl.damageDealt).toBeDefined();
  expect(data.werewolf.casualBrawl.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.werewolf.casualBrawl.damageDealt).toEqualTypeOf<number>();
  expect(data.angel).toBeDefined();
  expectTypeOf(data.angel).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.angel.kills).toBeDefined();
  expect(data.angel.kills).greaterThanOrEqual(0);
  expectTypeOf(data.angel.kills).toEqualTypeOf<number>();
  expect(data.angel.assists).toBeDefined();
  expect(data.angel.assists).greaterThanOrEqual(0);
  expectTypeOf(data.angel.assists).toEqualTypeOf<number>();
  expect(data.angel.deaths).toBeDefined();
  expect(data.angel.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.angel.deaths).toEqualTypeOf<number>();
  expect(data.angel.KDRatio).toBeDefined();
  expect(data.angel.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.angel.KDRatio).toEqualTypeOf<number>();
  expect(data.angel.wins).toBeDefined();
  expect(data.angel.wins).greaterThanOrEqual(0);
  expectTypeOf(data.angel.wins).toEqualTypeOf<number>();
  expect(data.angel.losses).toBeDefined();
  expect(data.angel.losses).greaterThanOrEqual(0);
  expectTypeOf(data.angel.losses).toEqualTypeOf<number>();
  expect(data.angel.WLRatio).toBeDefined();
  expect(data.angel.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.angel.WLRatio).toEqualTypeOf<number>();
  expect(data.angel.finalKills).toBeDefined();
  expect(data.angel.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.angel.finalKills).toEqualTypeOf<number>();
  expect(data.angel.finalAssists).toBeDefined();
  expect(data.angel.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.angel.finalAssists).toEqualTypeOf<number>();
  expect(data.angel.finalDeaths).toBeDefined();
  expect(data.angel.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.angel.finalDeaths).toEqualTypeOf<number>();
  expect(data.angel.finalKDRatio).toBeDefined();
  expect(data.angel.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.angel.finalKDRatio).toEqualTypeOf<number>();
  expect(data.angel.playedGames).toBeDefined();
  expect(data.angel.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.angel.playedGames).toEqualTypeOf<number>();
  expect(data.angel.witherDamage).toBeDefined();
  expect(data.angel.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.angel.witherDamage).toEqualTypeOf<number>();
  expect(data.angel.defenderKills).toBeDefined();
  expect(data.angel.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.angel.defenderKills).toEqualTypeOf<number>();
  expect(data.angel.walked).toBeDefined();
  expect(data.angel.walked).greaterThanOrEqual(0);
  expectTypeOf(data.angel.walked).toEqualTypeOf<number>();
  expect(data.angel.blocksPlaced).toBeDefined();
  expect(data.angel.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.angel.blocksPlaced).toEqualTypeOf<number>();
  expect(data.angel.blocksBroken).toBeDefined();
  expect(data.angel.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.angel.blocksBroken).toEqualTypeOf<number>();
  expect(data.angel.meleeKills).toBeDefined();
  expect(data.angel.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.angel.meleeKills).toEqualTypeOf<number>();
  expect(data.angel.damageDealt).toBeDefined();
  expect(data.angel.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.angel.damageDealt).toEqualTypeOf<number>();
  expect(data.angel.faceOff).toBeDefined();
  expectTypeOf(data.angel.faceOff).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.angel.faceOff.kills).toBeDefined();
  expect(data.angel.faceOff.kills).greaterThanOrEqual(0);
  expectTypeOf(data.angel.faceOff.kills).toEqualTypeOf<number>();
  expect(data.angel.faceOff.assists).toBeDefined();
  expect(data.angel.faceOff.assists).greaterThanOrEqual(0);
  expectTypeOf(data.angel.faceOff.assists).toEqualTypeOf<number>();
  expect(data.angel.faceOff.deaths).toBeDefined();
  expect(data.angel.faceOff.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.angel.faceOff.deaths).toEqualTypeOf<number>();
  expect(data.angel.faceOff.KDRatio).toBeDefined();
  expect(data.angel.faceOff.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.angel.faceOff.KDRatio).toEqualTypeOf<number>();
  expect(data.angel.faceOff.wins).toBeDefined();
  expect(data.angel.faceOff.wins).greaterThanOrEqual(0);
  expectTypeOf(data.angel.faceOff.wins).toEqualTypeOf<number>();
  expect(data.angel.faceOff.losses).toBeDefined();
  expect(data.angel.faceOff.losses).greaterThanOrEqual(0);
  expectTypeOf(data.angel.faceOff.losses).toEqualTypeOf<number>();
  expect(data.angel.faceOff.WLRatio).toBeDefined();
  expect(data.angel.faceOff.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.angel.faceOff.WLRatio).toEqualTypeOf<number>();
  expect(data.angel.faceOff.finalKills).toBeDefined();
  expect(data.angel.faceOff.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.angel.faceOff.finalKills).toEqualTypeOf<number>();
  expect(data.angel.faceOff.finalAssists).toBeDefined();
  expect(data.angel.faceOff.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.angel.faceOff.finalAssists).toEqualTypeOf<number>();
  expect(data.angel.faceOff.finalDeaths).toBeDefined();
  expect(data.angel.faceOff.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.angel.faceOff.finalDeaths).toEqualTypeOf<number>();
  expect(data.angel.faceOff.finalKDRatio).toBeDefined();
  expect(data.angel.faceOff.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.angel.faceOff.finalKDRatio).toEqualTypeOf<number>();
  expect(data.angel.faceOff.playedGames).toBeDefined();
  expect(data.angel.faceOff.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.angel.faceOff.playedGames).toEqualTypeOf<number>();
  expect(data.angel.faceOff.witherDamage).toBeDefined();
  expect(data.angel.faceOff.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.angel.faceOff.witherDamage).toEqualTypeOf<number>();
  expect(data.angel.faceOff.defenderKills).toBeDefined();
  expect(data.angel.faceOff.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.angel.faceOff.defenderKills).toEqualTypeOf<number>();
  expect(data.angel.faceOff.walked).toBeDefined();
  expect(data.angel.faceOff.walked).greaterThanOrEqual(0);
  expectTypeOf(data.angel.faceOff.walked).toEqualTypeOf<number>();
  expect(data.angel.faceOff.blocksPlaced).toBeDefined();
  expect(data.angel.faceOff.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.angel.faceOff.blocksPlaced).toEqualTypeOf<number>();
  expect(data.angel.faceOff.blocksBroken).toBeDefined();
  expect(data.angel.faceOff.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.angel.faceOff.blocksBroken).toEqualTypeOf<number>();
  expect(data.angel.faceOff.meleeKills).toBeDefined();
  expect(data.angel.faceOff.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.angel.faceOff.meleeKills).toEqualTypeOf<number>();
  expect(data.angel.faceOff.damageDealt).toBeDefined();
  expect(data.angel.faceOff.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.angel.faceOff.damageDealt).toEqualTypeOf<number>();
  expect(data.angel.casualBrawl).toBeDefined();
  expectTypeOf(data.angel.casualBrawl).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.angel.casualBrawl.kills).toBeDefined();
  expect(data.angel.casualBrawl.kills).greaterThanOrEqual(0);
  expectTypeOf(data.angel.casualBrawl.kills).toEqualTypeOf<number>();
  expect(data.angel.casualBrawl.assists).toBeDefined();
  expect(data.angel.casualBrawl.assists).greaterThanOrEqual(0);
  expectTypeOf(data.angel.casualBrawl.assists).toEqualTypeOf<number>();
  expect(data.angel.casualBrawl.deaths).toBeDefined();
  expect(data.angel.casualBrawl.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.angel.casualBrawl.deaths).toEqualTypeOf<number>();
  expect(data.angel.casualBrawl.KDRatio).toBeDefined();
  expect(data.angel.casualBrawl.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.angel.casualBrawl.KDRatio).toEqualTypeOf<number>();
  expect(data.angel.casualBrawl.wins).toBeDefined();
  expect(data.angel.casualBrawl.wins).greaterThanOrEqual(0);
  expectTypeOf(data.angel.casualBrawl.wins).toEqualTypeOf<number>();
  expect(data.angel.casualBrawl.losses).toBeDefined();
  expect(data.angel.casualBrawl.losses).greaterThanOrEqual(0);
  expectTypeOf(data.angel.casualBrawl.losses).toEqualTypeOf<number>();
  expect(data.angel.casualBrawl.WLRatio).toBeDefined();
  expect(data.angel.casualBrawl.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.angel.casualBrawl.WLRatio).toEqualTypeOf<number>();
  expect(data.angel.casualBrawl.finalKills).toBeDefined();
  expect(data.angel.casualBrawl.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.angel.casualBrawl.finalKills).toEqualTypeOf<number>();
  expect(data.angel.casualBrawl.finalAssists).toBeDefined();
  expect(data.angel.casualBrawl.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.angel.casualBrawl.finalAssists).toEqualTypeOf<number>();
  expect(data.angel.casualBrawl.finalDeaths).toBeDefined();
  expect(data.angel.casualBrawl.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.angel.casualBrawl.finalDeaths).toEqualTypeOf<number>();
  expect(data.angel.casualBrawl.finalKDRatio).toBeDefined();
  expect(data.angel.casualBrawl.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.angel.casualBrawl.finalKDRatio).toEqualTypeOf<number>();
  expect(data.angel.casualBrawl.playedGames).toBeDefined();
  expect(data.angel.casualBrawl.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.angel.casualBrawl.playedGames).toEqualTypeOf<number>();
  expect(data.angel.casualBrawl.witherDamage).toBeDefined();
  expect(data.angel.casualBrawl.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.angel.casualBrawl.witherDamage).toEqualTypeOf<number>();
  expect(data.angel.casualBrawl.defenderKills).toBeDefined();
  expect(data.angel.casualBrawl.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.angel.casualBrawl.defenderKills).toEqualTypeOf<number>();
  expect(data.angel.casualBrawl.walked).toBeDefined();
  expect(data.angel.casualBrawl.walked).greaterThanOrEqual(0);
  expectTypeOf(data.angel.casualBrawl.walked).toEqualTypeOf<number>();
  expect(data.angel.casualBrawl.blocksPlaced).toBeDefined();
  expect(data.angel.casualBrawl.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.angel.casualBrawl.blocksPlaced).toEqualTypeOf<number>();
  expect(data.angel.casualBrawl.blocksBroken).toBeDefined();
  expect(data.angel.casualBrawl.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.angel.casualBrawl.blocksBroken).toEqualTypeOf<number>();
  expect(data.angel.casualBrawl.meleeKills).toBeDefined();
  expect(data.angel.casualBrawl.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.angel.casualBrawl.meleeKills).toEqualTypeOf<number>();
  expect(data.angel.casualBrawl.damageDealt).toBeDefined();
  expect(data.angel.casualBrawl.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.angel.casualBrawl.damageDealt).toEqualTypeOf<number>();
  expect(data.assassin).toBeDefined();
  expectTypeOf(data.assassin).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.assassin.kills).toBeDefined();
  expect(data.assassin.kills).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.kills).toEqualTypeOf<number>();
  expect(data.assassin.assists).toBeDefined();
  expect(data.assassin.assists).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.assists).toEqualTypeOf<number>();
  expect(data.assassin.deaths).toBeDefined();
  expect(data.assassin.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.deaths).toEqualTypeOf<number>();
  expect(data.assassin.KDRatio).toBeDefined();
  expect(data.assassin.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.KDRatio).toEqualTypeOf<number>();
  expect(data.assassin.wins).toBeDefined();
  expect(data.assassin.wins).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.wins).toEqualTypeOf<number>();
  expect(data.assassin.losses).toBeDefined();
  expect(data.assassin.losses).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.losses).toEqualTypeOf<number>();
  expect(data.assassin.WLRatio).toBeDefined();
  expect(data.assassin.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.WLRatio).toEqualTypeOf<number>();
  expect(data.assassin.finalKills).toBeDefined();
  expect(data.assassin.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.finalKills).toEqualTypeOf<number>();
  expect(data.assassin.finalAssists).toBeDefined();
  expect(data.assassin.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.finalAssists).toEqualTypeOf<number>();
  expect(data.assassin.finalDeaths).toBeDefined();
  expect(data.assassin.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.finalDeaths).toEqualTypeOf<number>();
  expect(data.assassin.finalKDRatio).toBeDefined();
  expect(data.assassin.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.finalKDRatio).toEqualTypeOf<number>();
  expect(data.assassin.playedGames).toBeDefined();
  expect(data.assassin.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.playedGames).toEqualTypeOf<number>();
  expect(data.assassin.witherDamage).toBeDefined();
  expect(data.assassin.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.witherDamage).toEqualTypeOf<number>();
  expect(data.assassin.defenderKills).toBeDefined();
  expect(data.assassin.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.defenderKills).toEqualTypeOf<number>();
  expect(data.assassin.walked).toBeDefined();
  expect(data.assassin.walked).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.walked).toEqualTypeOf<number>();
  expect(data.assassin.blocksPlaced).toBeDefined();
  expect(data.assassin.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.blocksPlaced).toEqualTypeOf<number>();
  expect(data.assassin.blocksBroken).toBeDefined();
  expect(data.assassin.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.blocksBroken).toEqualTypeOf<number>();
  expect(data.assassin.meleeKills).toBeDefined();
  expect(data.assassin.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.meleeKills).toEqualTypeOf<number>();
  expect(data.assassin.damageDealt).toBeDefined();
  expect(data.assassin.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.damageDealt).toEqualTypeOf<number>();
  expect(data.assassin.faceOff).toBeDefined();
  expectTypeOf(data.assassin.faceOff).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.assassin.faceOff.kills).toBeDefined();
  expect(data.assassin.faceOff.kills).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.faceOff.kills).toEqualTypeOf<number>();
  expect(data.assassin.faceOff.assists).toBeDefined();
  expect(data.assassin.faceOff.assists).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.faceOff.assists).toEqualTypeOf<number>();
  expect(data.assassin.faceOff.deaths).toBeDefined();
  expect(data.assassin.faceOff.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.faceOff.deaths).toEqualTypeOf<number>();
  expect(data.assassin.faceOff.KDRatio).toBeDefined();
  expect(data.assassin.faceOff.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.faceOff.KDRatio).toEqualTypeOf<number>();
  expect(data.assassin.faceOff.wins).toBeDefined();
  expect(data.assassin.faceOff.wins).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.faceOff.wins).toEqualTypeOf<number>();
  expect(data.assassin.faceOff.losses).toBeDefined();
  expect(data.assassin.faceOff.losses).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.faceOff.losses).toEqualTypeOf<number>();
  expect(data.assassin.faceOff.WLRatio).toBeDefined();
  expect(data.assassin.faceOff.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.faceOff.WLRatio).toEqualTypeOf<number>();
  expect(data.assassin.faceOff.finalKills).toBeDefined();
  expect(data.assassin.faceOff.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.faceOff.finalKills).toEqualTypeOf<number>();
  expect(data.assassin.faceOff.finalAssists).toBeDefined();
  expect(data.assassin.faceOff.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.faceOff.finalAssists).toEqualTypeOf<number>();
  expect(data.assassin.faceOff.finalDeaths).toBeDefined();
  expect(data.assassin.faceOff.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.faceOff.finalDeaths).toEqualTypeOf<number>();
  expect(data.assassin.faceOff.finalKDRatio).toBeDefined();
  expect(data.assassin.faceOff.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.faceOff.finalKDRatio).toEqualTypeOf<number>();
  expect(data.assassin.faceOff.playedGames).toBeDefined();
  expect(data.assassin.faceOff.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.faceOff.playedGames).toEqualTypeOf<number>();
  expect(data.assassin.faceOff.witherDamage).toBeDefined();
  expect(data.assassin.faceOff.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.faceOff.witherDamage).toEqualTypeOf<number>();
  expect(data.assassin.faceOff.defenderKills).toBeDefined();
  expect(data.assassin.faceOff.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.faceOff.defenderKills).toEqualTypeOf<number>();
  expect(data.assassin.faceOff.walked).toBeDefined();
  expect(data.assassin.faceOff.walked).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.faceOff.walked).toEqualTypeOf<number>();
  expect(data.assassin.faceOff.blocksPlaced).toBeDefined();
  expect(data.assassin.faceOff.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.faceOff.blocksPlaced).toEqualTypeOf<number>();
  expect(data.assassin.faceOff.blocksBroken).toBeDefined();
  expect(data.assassin.faceOff.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.faceOff.blocksBroken).toEqualTypeOf<number>();
  expect(data.assassin.faceOff.meleeKills).toBeDefined();
  expect(data.assassin.faceOff.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.faceOff.meleeKills).toEqualTypeOf<number>();
  expect(data.assassin.faceOff.damageDealt).toBeDefined();
  expect(data.assassin.faceOff.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.faceOff.damageDealt).toEqualTypeOf<number>();
  expect(data.assassin.casualBrawl).toBeDefined();
  expectTypeOf(data.assassin.casualBrawl).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.assassin.casualBrawl.kills).toBeDefined();
  expect(data.assassin.casualBrawl.kills).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.casualBrawl.kills).toEqualTypeOf<number>();
  expect(data.assassin.casualBrawl.assists).toBeDefined();
  expect(data.assassin.casualBrawl.assists).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.casualBrawl.assists).toEqualTypeOf<number>();
  expect(data.assassin.casualBrawl.deaths).toBeDefined();
  expect(data.assassin.casualBrawl.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.casualBrawl.deaths).toEqualTypeOf<number>();
  expect(data.assassin.casualBrawl.KDRatio).toBeDefined();
  expect(data.assassin.casualBrawl.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.casualBrawl.KDRatio).toEqualTypeOf<number>();
  expect(data.assassin.casualBrawl.wins).toBeDefined();
  expect(data.assassin.casualBrawl.wins).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.casualBrawl.wins).toEqualTypeOf<number>();
  expect(data.assassin.casualBrawl.losses).toBeDefined();
  expect(data.assassin.casualBrawl.losses).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.casualBrawl.losses).toEqualTypeOf<number>();
  expect(data.assassin.casualBrawl.WLRatio).toBeDefined();
  expect(data.assassin.casualBrawl.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.casualBrawl.WLRatio).toEqualTypeOf<number>();
  expect(data.assassin.casualBrawl.finalKills).toBeDefined();
  expect(data.assassin.casualBrawl.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.casualBrawl.finalKills).toEqualTypeOf<number>();
  expect(data.assassin.casualBrawl.finalAssists).toBeDefined();
  expect(data.assassin.casualBrawl.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.casualBrawl.finalAssists).toEqualTypeOf<number>();
  expect(data.assassin.casualBrawl.finalDeaths).toBeDefined();
  expect(data.assassin.casualBrawl.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.casualBrawl.finalDeaths).toEqualTypeOf<number>();
  expect(data.assassin.casualBrawl.finalKDRatio).toBeDefined();
  expect(data.assassin.casualBrawl.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.casualBrawl.finalKDRatio).toEqualTypeOf<number>();
  expect(data.assassin.casualBrawl.playedGames).toBeDefined();
  expect(data.assassin.casualBrawl.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.casualBrawl.playedGames).toEqualTypeOf<number>();
  expect(data.assassin.casualBrawl.witherDamage).toBeDefined();
  expect(data.assassin.casualBrawl.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.casualBrawl.witherDamage).toEqualTypeOf<number>();
  expect(data.assassin.casualBrawl.defenderKills).toBeDefined();
  expect(data.assassin.casualBrawl.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.casualBrawl.defenderKills).toEqualTypeOf<number>();
  expect(data.assassin.casualBrawl.walked).toBeDefined();
  expect(data.assassin.casualBrawl.walked).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.casualBrawl.walked).toEqualTypeOf<number>();
  expect(data.assassin.casualBrawl.blocksPlaced).toBeDefined();
  expect(data.assassin.casualBrawl.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.casualBrawl.blocksPlaced).toEqualTypeOf<number>();
  expect(data.assassin.casualBrawl.blocksBroken).toBeDefined();
  expect(data.assassin.casualBrawl.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.casualBrawl.blocksBroken).toEqualTypeOf<number>();
  expect(data.assassin.casualBrawl.meleeKills).toBeDefined();
  expect(data.assassin.casualBrawl.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.casualBrawl.meleeKills).toEqualTypeOf<number>();
  expect(data.assassin.casualBrawl.damageDealt).toBeDefined();
  expect(data.assassin.casualBrawl.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.assassin.casualBrawl.damageDealt).toEqualTypeOf<number>();
  expect(data.automaton).toBeDefined();
  expectTypeOf(data.automaton).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.automaton.kills).toBeDefined();
  expect(data.automaton.kills).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.kills).toEqualTypeOf<number>();
  expect(data.automaton.assists).toBeDefined();
  expect(data.automaton.assists).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.assists).toEqualTypeOf<number>();
  expect(data.automaton.deaths).toBeDefined();
  expect(data.automaton.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.deaths).toEqualTypeOf<number>();
  expect(data.automaton.KDRatio).toBeDefined();
  expect(data.automaton.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.KDRatio).toEqualTypeOf<number>();
  expect(data.automaton.wins).toBeDefined();
  expect(data.automaton.wins).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.wins).toEqualTypeOf<number>();
  expect(data.automaton.losses).toBeDefined();
  expect(data.automaton.losses).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.losses).toEqualTypeOf<number>();
  expect(data.automaton.WLRatio).toBeDefined();
  expect(data.automaton.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.WLRatio).toEqualTypeOf<number>();
  expect(data.automaton.finalKills).toBeDefined();
  expect(data.automaton.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.finalKills).toEqualTypeOf<number>();
  expect(data.automaton.finalAssists).toBeDefined();
  expect(data.automaton.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.finalAssists).toEqualTypeOf<number>();
  expect(data.automaton.finalDeaths).toBeDefined();
  expect(data.automaton.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.finalDeaths).toEqualTypeOf<number>();
  expect(data.automaton.finalKDRatio).toBeDefined();
  expect(data.automaton.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.finalKDRatio).toEqualTypeOf<number>();
  expect(data.automaton.playedGames).toBeDefined();
  expect(data.automaton.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.playedGames).toEqualTypeOf<number>();
  expect(data.automaton.witherDamage).toBeDefined();
  expect(data.automaton.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.witherDamage).toEqualTypeOf<number>();
  expect(data.automaton.defenderKills).toBeDefined();
  expect(data.automaton.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.defenderKills).toEqualTypeOf<number>();
  expect(data.automaton.walked).toBeDefined();
  expect(data.automaton.walked).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.walked).toEqualTypeOf<number>();
  expect(data.automaton.blocksPlaced).toBeDefined();
  expect(data.automaton.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.blocksPlaced).toEqualTypeOf<number>();
  expect(data.automaton.blocksBroken).toBeDefined();
  expect(data.automaton.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.blocksBroken).toEqualTypeOf<number>();
  expect(data.automaton.meleeKills).toBeDefined();
  expect(data.automaton.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.meleeKills).toEqualTypeOf<number>();
  expect(data.automaton.damageDealt).toBeDefined();
  expect(data.automaton.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.damageDealt).toEqualTypeOf<number>();
  expect(data.automaton.faceOff).toBeDefined();
  expectTypeOf(data.automaton.faceOff).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.automaton.faceOff.kills).toBeDefined();
  expect(data.automaton.faceOff.kills).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.faceOff.kills).toEqualTypeOf<number>();
  expect(data.automaton.faceOff.assists).toBeDefined();
  expect(data.automaton.faceOff.assists).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.faceOff.assists).toEqualTypeOf<number>();
  expect(data.automaton.faceOff.deaths).toBeDefined();
  expect(data.automaton.faceOff.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.faceOff.deaths).toEqualTypeOf<number>();
  expect(data.automaton.faceOff.KDRatio).toBeDefined();
  expect(data.automaton.faceOff.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.faceOff.KDRatio).toEqualTypeOf<number>();
  expect(data.automaton.faceOff.wins).toBeDefined();
  expect(data.automaton.faceOff.wins).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.faceOff.wins).toEqualTypeOf<number>();
  expect(data.automaton.faceOff.losses).toBeDefined();
  expect(data.automaton.faceOff.losses).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.faceOff.losses).toEqualTypeOf<number>();
  expect(data.automaton.faceOff.WLRatio).toBeDefined();
  expect(data.automaton.faceOff.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.faceOff.WLRatio).toEqualTypeOf<number>();
  expect(data.automaton.faceOff.finalKills).toBeDefined();
  expect(data.automaton.faceOff.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.faceOff.finalKills).toEqualTypeOf<number>();
  expect(data.automaton.faceOff.finalAssists).toBeDefined();
  expect(data.automaton.faceOff.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.faceOff.finalAssists).toEqualTypeOf<number>();
  expect(data.automaton.faceOff.finalDeaths).toBeDefined();
  expect(data.automaton.faceOff.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.faceOff.finalDeaths).toEqualTypeOf<number>();
  expect(data.automaton.faceOff.finalKDRatio).toBeDefined();
  expect(data.automaton.faceOff.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.faceOff.finalKDRatio).toEqualTypeOf<number>();
  expect(data.automaton.faceOff.playedGames).toBeDefined();
  expect(data.automaton.faceOff.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.faceOff.playedGames).toEqualTypeOf<number>();
  expect(data.automaton.faceOff.witherDamage).toBeDefined();
  expect(data.automaton.faceOff.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.faceOff.witherDamage).toEqualTypeOf<number>();
  expect(data.automaton.faceOff.defenderKills).toBeDefined();
  expect(data.automaton.faceOff.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.faceOff.defenderKills).toEqualTypeOf<number>();
  expect(data.automaton.faceOff.walked).toBeDefined();
  expect(data.automaton.faceOff.walked).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.faceOff.walked).toEqualTypeOf<number>();
  expect(data.automaton.faceOff.blocksPlaced).toBeDefined();
  expect(data.automaton.faceOff.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.faceOff.blocksPlaced).toEqualTypeOf<number>();
  expect(data.automaton.faceOff.blocksBroken).toBeDefined();
  expect(data.automaton.faceOff.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.faceOff.blocksBroken).toEqualTypeOf<number>();
  expect(data.automaton.faceOff.meleeKills).toBeDefined();
  expect(data.automaton.faceOff.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.faceOff.meleeKills).toEqualTypeOf<number>();
  expect(data.automaton.faceOff.damageDealt).toBeDefined();
  expect(data.automaton.faceOff.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.faceOff.damageDealt).toEqualTypeOf<number>();
  expect(data.automaton.casualBrawl).toBeDefined();
  expectTypeOf(data.automaton.casualBrawl).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.automaton.casualBrawl.kills).toBeDefined();
  expect(data.automaton.casualBrawl.kills).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.casualBrawl.kills).toEqualTypeOf<number>();
  expect(data.automaton.casualBrawl.assists).toBeDefined();
  expect(data.automaton.casualBrawl.assists).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.casualBrawl.assists).toEqualTypeOf<number>();
  expect(data.automaton.casualBrawl.deaths).toBeDefined();
  expect(data.automaton.casualBrawl.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.casualBrawl.deaths).toEqualTypeOf<number>();
  expect(data.automaton.casualBrawl.KDRatio).toBeDefined();
  expect(data.automaton.casualBrawl.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.casualBrawl.KDRatio).toEqualTypeOf<number>();
  expect(data.automaton.casualBrawl.wins).toBeDefined();
  expect(data.automaton.casualBrawl.wins).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.casualBrawl.wins).toEqualTypeOf<number>();
  expect(data.automaton.casualBrawl.losses).toBeDefined();
  expect(data.automaton.casualBrawl.losses).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.casualBrawl.losses).toEqualTypeOf<number>();
  expect(data.automaton.casualBrawl.WLRatio).toBeDefined();
  expect(data.automaton.casualBrawl.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.casualBrawl.WLRatio).toEqualTypeOf<number>();
  expect(data.automaton.casualBrawl.finalKills).toBeDefined();
  expect(data.automaton.casualBrawl.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.casualBrawl.finalKills).toEqualTypeOf<number>();
  expect(data.automaton.casualBrawl.finalAssists).toBeDefined();
  expect(data.automaton.casualBrawl.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.casualBrawl.finalAssists).toEqualTypeOf<number>();
  expect(data.automaton.casualBrawl.finalDeaths).toBeDefined();
  expect(data.automaton.casualBrawl.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.casualBrawl.finalDeaths).toEqualTypeOf<number>();
  expect(data.automaton.casualBrawl.finalKDRatio).toBeDefined();
  expect(data.automaton.casualBrawl.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.casualBrawl.finalKDRatio).toEqualTypeOf<number>();
  expect(data.automaton.casualBrawl.playedGames).toBeDefined();
  expect(data.automaton.casualBrawl.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.casualBrawl.playedGames).toEqualTypeOf<number>();
  expect(data.automaton.casualBrawl.witherDamage).toBeDefined();
  expect(data.automaton.casualBrawl.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.casualBrawl.witherDamage).toEqualTypeOf<number>();
  expect(data.automaton.casualBrawl.defenderKills).toBeDefined();
  expect(data.automaton.casualBrawl.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.casualBrawl.defenderKills).toEqualTypeOf<number>();
  expect(data.automaton.casualBrawl.walked).toBeDefined();
  expect(data.automaton.casualBrawl.walked).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.casualBrawl.walked).toEqualTypeOf<number>();
  expect(data.automaton.casualBrawl.blocksPlaced).toBeDefined();
  expect(data.automaton.casualBrawl.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.casualBrawl.blocksPlaced).toEqualTypeOf<number>();
  expect(data.automaton.casualBrawl.blocksBroken).toBeDefined();
  expect(data.automaton.casualBrawl.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.casualBrawl.blocksBroken).toEqualTypeOf<number>();
  expect(data.automaton.casualBrawl.meleeKills).toBeDefined();
  expect(data.automaton.casualBrawl.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.casualBrawl.meleeKills).toEqualTypeOf<number>();
  expect(data.automaton.casualBrawl.damageDealt).toBeDefined();
  expect(data.automaton.casualBrawl.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.automaton.casualBrawl.damageDealt).toEqualTypeOf<number>();
  expect(data.moleman).toBeDefined();
  expectTypeOf(data.moleman).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.moleman.kills).toBeDefined();
  expect(data.moleman.kills).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.kills).toEqualTypeOf<number>();
  expect(data.moleman.assists).toBeDefined();
  expect(data.moleman.assists).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.assists).toEqualTypeOf<number>();
  expect(data.moleman.deaths).toBeDefined();
  expect(data.moleman.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.deaths).toEqualTypeOf<number>();
  expect(data.moleman.KDRatio).toBeDefined();
  expect(data.moleman.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.KDRatio).toEqualTypeOf<number>();
  expect(data.moleman.wins).toBeDefined();
  expect(data.moleman.wins).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.wins).toEqualTypeOf<number>();
  expect(data.moleman.losses).toBeDefined();
  expect(data.moleman.losses).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.losses).toEqualTypeOf<number>();
  expect(data.moleman.WLRatio).toBeDefined();
  expect(data.moleman.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.WLRatio).toEqualTypeOf<number>();
  expect(data.moleman.finalKills).toBeDefined();
  expect(data.moleman.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.finalKills).toEqualTypeOf<number>();
  expect(data.moleman.finalAssists).toBeDefined();
  expect(data.moleman.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.finalAssists).toEqualTypeOf<number>();
  expect(data.moleman.finalDeaths).toBeDefined();
  expect(data.moleman.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.finalDeaths).toEqualTypeOf<number>();
  expect(data.moleman.finalKDRatio).toBeDefined();
  expect(data.moleman.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.finalKDRatio).toEqualTypeOf<number>();
  expect(data.moleman.playedGames).toBeDefined();
  expect(data.moleman.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.playedGames).toEqualTypeOf<number>();
  expect(data.moleman.witherDamage).toBeDefined();
  expect(data.moleman.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.witherDamage).toEqualTypeOf<number>();
  expect(data.moleman.defenderKills).toBeDefined();
  expect(data.moleman.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.defenderKills).toEqualTypeOf<number>();
  expect(data.moleman.walked).toBeDefined();
  expect(data.moleman.walked).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.walked).toEqualTypeOf<number>();
  expect(data.moleman.blocksPlaced).toBeDefined();
  expect(data.moleman.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.blocksPlaced).toEqualTypeOf<number>();
  expect(data.moleman.blocksBroken).toBeDefined();
  expect(data.moleman.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.blocksBroken).toEqualTypeOf<number>();
  expect(data.moleman.meleeKills).toBeDefined();
  expect(data.moleman.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.meleeKills).toEqualTypeOf<number>();
  expect(data.moleman.damageDealt).toBeDefined();
  expect(data.moleman.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.damageDealt).toEqualTypeOf<number>();
  expect(data.moleman.faceOff).toBeDefined();
  expectTypeOf(data.moleman.faceOff).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.moleman.faceOff.kills).toBeDefined();
  expect(data.moleman.faceOff.kills).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.faceOff.kills).toEqualTypeOf<number>();
  expect(data.moleman.faceOff.assists).toBeDefined();
  expect(data.moleman.faceOff.assists).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.faceOff.assists).toEqualTypeOf<number>();
  expect(data.moleman.faceOff.deaths).toBeDefined();
  expect(data.moleman.faceOff.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.faceOff.deaths).toEqualTypeOf<number>();
  expect(data.moleman.faceOff.KDRatio).toBeDefined();
  expect(data.moleman.faceOff.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.faceOff.KDRatio).toEqualTypeOf<number>();
  expect(data.moleman.faceOff.wins).toBeDefined();
  expect(data.moleman.faceOff.wins).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.faceOff.wins).toEqualTypeOf<number>();
  expect(data.moleman.faceOff.losses).toBeDefined();
  expect(data.moleman.faceOff.losses).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.faceOff.losses).toEqualTypeOf<number>();
  expect(data.moleman.faceOff.WLRatio).toBeDefined();
  expect(data.moleman.faceOff.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.faceOff.WLRatio).toEqualTypeOf<number>();
  expect(data.moleman.faceOff.finalKills).toBeDefined();
  expect(data.moleman.faceOff.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.faceOff.finalKills).toEqualTypeOf<number>();
  expect(data.moleman.faceOff.finalAssists).toBeDefined();
  expect(data.moleman.faceOff.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.faceOff.finalAssists).toEqualTypeOf<number>();
  expect(data.moleman.faceOff.finalDeaths).toBeDefined();
  expect(data.moleman.faceOff.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.faceOff.finalDeaths).toEqualTypeOf<number>();
  expect(data.moleman.faceOff.finalKDRatio).toBeDefined();
  expect(data.moleman.faceOff.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.faceOff.finalKDRatio).toEqualTypeOf<number>();
  expect(data.moleman.faceOff.playedGames).toBeDefined();
  expect(data.moleman.faceOff.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.faceOff.playedGames).toEqualTypeOf<number>();
  expect(data.moleman.faceOff.witherDamage).toBeDefined();
  expect(data.moleman.faceOff.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.faceOff.witherDamage).toEqualTypeOf<number>();
  expect(data.moleman.faceOff.defenderKills).toBeDefined();
  expect(data.moleman.faceOff.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.faceOff.defenderKills).toEqualTypeOf<number>();
  expect(data.moleman.faceOff.walked).toBeDefined();
  expect(data.moleman.faceOff.walked).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.faceOff.walked).toEqualTypeOf<number>();
  expect(data.moleman.faceOff.blocksPlaced).toBeDefined();
  expect(data.moleman.faceOff.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.faceOff.blocksPlaced).toEqualTypeOf<number>();
  expect(data.moleman.faceOff.blocksBroken).toBeDefined();
  expect(data.moleman.faceOff.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.faceOff.blocksBroken).toEqualTypeOf<number>();
  expect(data.moleman.faceOff.meleeKills).toBeDefined();
  expect(data.moleman.faceOff.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.faceOff.meleeKills).toEqualTypeOf<number>();
  expect(data.moleman.faceOff.damageDealt).toBeDefined();
  expect(data.moleman.faceOff.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.faceOff.damageDealt).toEqualTypeOf<number>();
  expect(data.moleman.casualBrawl).toBeDefined();
  expectTypeOf(data.moleman.casualBrawl).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.moleman.casualBrawl.kills).toBeDefined();
  expect(data.moleman.casualBrawl.kills).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.casualBrawl.kills).toEqualTypeOf<number>();
  expect(data.moleman.casualBrawl.assists).toBeDefined();
  expect(data.moleman.casualBrawl.assists).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.casualBrawl.assists).toEqualTypeOf<number>();
  expect(data.moleman.casualBrawl.deaths).toBeDefined();
  expect(data.moleman.casualBrawl.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.casualBrawl.deaths).toEqualTypeOf<number>();
  expect(data.moleman.casualBrawl.KDRatio).toBeDefined();
  expect(data.moleman.casualBrawl.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.casualBrawl.KDRatio).toEqualTypeOf<number>();
  expect(data.moleman.casualBrawl.wins).toBeDefined();
  expect(data.moleman.casualBrawl.wins).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.casualBrawl.wins).toEqualTypeOf<number>();
  expect(data.moleman.casualBrawl.losses).toBeDefined();
  expect(data.moleman.casualBrawl.losses).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.casualBrawl.losses).toEqualTypeOf<number>();
  expect(data.moleman.casualBrawl.WLRatio).toBeDefined();
  expect(data.moleman.casualBrawl.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.casualBrawl.WLRatio).toEqualTypeOf<number>();
  expect(data.moleman.casualBrawl.finalKills).toBeDefined();
  expect(data.moleman.casualBrawl.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.casualBrawl.finalKills).toEqualTypeOf<number>();
  expect(data.moleman.casualBrawl.finalAssists).toBeDefined();
  expect(data.moleman.casualBrawl.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.casualBrawl.finalAssists).toEqualTypeOf<number>();
  expect(data.moleman.casualBrawl.finalDeaths).toBeDefined();
  expect(data.moleman.casualBrawl.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.casualBrawl.finalDeaths).toEqualTypeOf<number>();
  expect(data.moleman.casualBrawl.finalKDRatio).toBeDefined();
  expect(data.moleman.casualBrawl.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.casualBrawl.finalKDRatio).toEqualTypeOf<number>();
  expect(data.moleman.casualBrawl.playedGames).toBeDefined();
  expect(data.moleman.casualBrawl.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.casualBrawl.playedGames).toEqualTypeOf<number>();
  expect(data.moleman.casualBrawl.witherDamage).toBeDefined();
  expect(data.moleman.casualBrawl.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.casualBrawl.witherDamage).toEqualTypeOf<number>();
  expect(data.moleman.casualBrawl.defenderKills).toBeDefined();
  expect(data.moleman.casualBrawl.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.casualBrawl.defenderKills).toEqualTypeOf<number>();
  expect(data.moleman.casualBrawl.walked).toBeDefined();
  expect(data.moleman.casualBrawl.walked).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.casualBrawl.walked).toEqualTypeOf<number>();
  expect(data.moleman.casualBrawl.blocksPlaced).toBeDefined();
  expect(data.moleman.casualBrawl.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.casualBrawl.blocksPlaced).toEqualTypeOf<number>();
  expect(data.moleman.casualBrawl.blocksBroken).toBeDefined();
  expect(data.moleman.casualBrawl.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.casualBrawl.blocksBroken).toEqualTypeOf<number>();
  expect(data.moleman.casualBrawl.meleeKills).toBeDefined();
  expect(data.moleman.casualBrawl.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.casualBrawl.meleeKills).toEqualTypeOf<number>();
  expect(data.moleman.casualBrawl.damageDealt).toBeDefined();
  expect(data.moleman.casualBrawl.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.moleman.casualBrawl.damageDealt).toEqualTypeOf<number>();
  expect(data.phoenix).toBeDefined();
  expectTypeOf(data.phoenix).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.phoenix.kills).toBeDefined();
  expect(data.phoenix.kills).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.kills).toEqualTypeOf<number>();
  expect(data.phoenix.assists).toBeDefined();
  expect(data.phoenix.assists).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.assists).toEqualTypeOf<number>();
  expect(data.phoenix.deaths).toBeDefined();
  expect(data.phoenix.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.deaths).toEqualTypeOf<number>();
  expect(data.phoenix.KDRatio).toBeDefined();
  expect(data.phoenix.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.KDRatio).toEqualTypeOf<number>();
  expect(data.phoenix.wins).toBeDefined();
  expect(data.phoenix.wins).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.wins).toEqualTypeOf<number>();
  expect(data.phoenix.losses).toBeDefined();
  expect(data.phoenix.losses).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.losses).toEqualTypeOf<number>();
  expect(data.phoenix.WLRatio).toBeDefined();
  expect(data.phoenix.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.WLRatio).toEqualTypeOf<number>();
  expect(data.phoenix.finalKills).toBeDefined();
  expect(data.phoenix.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.finalKills).toEqualTypeOf<number>();
  expect(data.phoenix.finalAssists).toBeDefined();
  expect(data.phoenix.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.finalAssists).toEqualTypeOf<number>();
  expect(data.phoenix.finalDeaths).toBeDefined();
  expect(data.phoenix.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.finalDeaths).toEqualTypeOf<number>();
  expect(data.phoenix.finalKDRatio).toBeDefined();
  expect(data.phoenix.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.finalKDRatio).toEqualTypeOf<number>();
  expect(data.phoenix.playedGames).toBeDefined();
  expect(data.phoenix.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.playedGames).toEqualTypeOf<number>();
  expect(data.phoenix.witherDamage).toBeDefined();
  expect(data.phoenix.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.witherDamage).toEqualTypeOf<number>();
  expect(data.phoenix.defenderKills).toBeDefined();
  expect(data.phoenix.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.defenderKills).toEqualTypeOf<number>();
  expect(data.phoenix.walked).toBeDefined();
  expect(data.phoenix.walked).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.walked).toEqualTypeOf<number>();
  expect(data.phoenix.blocksPlaced).toBeDefined();
  expect(data.phoenix.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.blocksPlaced).toEqualTypeOf<number>();
  expect(data.phoenix.blocksBroken).toBeDefined();
  expect(data.phoenix.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.blocksBroken).toEqualTypeOf<number>();
  expect(data.phoenix.meleeKills).toBeDefined();
  expect(data.phoenix.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.meleeKills).toEqualTypeOf<number>();
  expect(data.phoenix.damageDealt).toBeDefined();
  expect(data.phoenix.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.damageDealt).toEqualTypeOf<number>();
  expect(data.phoenix.faceOff).toBeDefined();
  expectTypeOf(data.phoenix.faceOff).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.phoenix.faceOff.kills).toBeDefined();
  expect(data.phoenix.faceOff.kills).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.faceOff.kills).toEqualTypeOf<number>();
  expect(data.phoenix.faceOff.assists).toBeDefined();
  expect(data.phoenix.faceOff.assists).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.faceOff.assists).toEqualTypeOf<number>();
  expect(data.phoenix.faceOff.deaths).toBeDefined();
  expect(data.phoenix.faceOff.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.faceOff.deaths).toEqualTypeOf<number>();
  expect(data.phoenix.faceOff.KDRatio).toBeDefined();
  expect(data.phoenix.faceOff.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.faceOff.KDRatio).toEqualTypeOf<number>();
  expect(data.phoenix.faceOff.wins).toBeDefined();
  expect(data.phoenix.faceOff.wins).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.faceOff.wins).toEqualTypeOf<number>();
  expect(data.phoenix.faceOff.losses).toBeDefined();
  expect(data.phoenix.faceOff.losses).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.faceOff.losses).toEqualTypeOf<number>();
  expect(data.phoenix.faceOff.WLRatio).toBeDefined();
  expect(data.phoenix.faceOff.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.faceOff.WLRatio).toEqualTypeOf<number>();
  expect(data.phoenix.faceOff.finalKills).toBeDefined();
  expect(data.phoenix.faceOff.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.faceOff.finalKills).toEqualTypeOf<number>();
  expect(data.phoenix.faceOff.finalAssists).toBeDefined();
  expect(data.phoenix.faceOff.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.faceOff.finalAssists).toEqualTypeOf<number>();
  expect(data.phoenix.faceOff.finalDeaths).toBeDefined();
  expect(data.phoenix.faceOff.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.faceOff.finalDeaths).toEqualTypeOf<number>();
  expect(data.phoenix.faceOff.finalKDRatio).toBeDefined();
  expect(data.phoenix.faceOff.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.faceOff.finalKDRatio).toEqualTypeOf<number>();
  expect(data.phoenix.faceOff.playedGames).toBeDefined();
  expect(data.phoenix.faceOff.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.faceOff.playedGames).toEqualTypeOf<number>();
  expect(data.phoenix.faceOff.witherDamage).toBeDefined();
  expect(data.phoenix.faceOff.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.faceOff.witherDamage).toEqualTypeOf<number>();
  expect(data.phoenix.faceOff.defenderKills).toBeDefined();
  expect(data.phoenix.faceOff.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.faceOff.defenderKills).toEqualTypeOf<number>();
  expect(data.phoenix.faceOff.walked).toBeDefined();
  expect(data.phoenix.faceOff.walked).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.faceOff.walked).toEqualTypeOf<number>();
  expect(data.phoenix.faceOff.blocksPlaced).toBeDefined();
  expect(data.phoenix.faceOff.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.faceOff.blocksPlaced).toEqualTypeOf<number>();
  expect(data.phoenix.faceOff.blocksBroken).toBeDefined();
  expect(data.phoenix.faceOff.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.faceOff.blocksBroken).toEqualTypeOf<number>();
  expect(data.phoenix.faceOff.meleeKills).toBeDefined();
  expect(data.phoenix.faceOff.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.faceOff.meleeKills).toEqualTypeOf<number>();
  expect(data.phoenix.faceOff.damageDealt).toBeDefined();
  expect(data.phoenix.faceOff.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.faceOff.damageDealt).toEqualTypeOf<number>();
  expect(data.phoenix.casualBrawl).toBeDefined();
  expectTypeOf(data.phoenix.casualBrawl).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.phoenix.casualBrawl.kills).toBeDefined();
  expect(data.phoenix.casualBrawl.kills).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.casualBrawl.kills).toEqualTypeOf<number>();
  expect(data.phoenix.casualBrawl.assists).toBeDefined();
  expect(data.phoenix.casualBrawl.assists).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.casualBrawl.assists).toEqualTypeOf<number>();
  expect(data.phoenix.casualBrawl.deaths).toBeDefined();
  expect(data.phoenix.casualBrawl.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.casualBrawl.deaths).toEqualTypeOf<number>();
  expect(data.phoenix.casualBrawl.KDRatio).toBeDefined();
  expect(data.phoenix.casualBrawl.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.casualBrawl.KDRatio).toEqualTypeOf<number>();
  expect(data.phoenix.casualBrawl.wins).toBeDefined();
  expect(data.phoenix.casualBrawl.wins).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.casualBrawl.wins).toEqualTypeOf<number>();
  expect(data.phoenix.casualBrawl.losses).toBeDefined();
  expect(data.phoenix.casualBrawl.losses).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.casualBrawl.losses).toEqualTypeOf<number>();
  expect(data.phoenix.casualBrawl.WLRatio).toBeDefined();
  expect(data.phoenix.casualBrawl.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.casualBrawl.WLRatio).toEqualTypeOf<number>();
  expect(data.phoenix.casualBrawl.finalKills).toBeDefined();
  expect(data.phoenix.casualBrawl.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.casualBrawl.finalKills).toEqualTypeOf<number>();
  expect(data.phoenix.casualBrawl.finalAssists).toBeDefined();
  expect(data.phoenix.casualBrawl.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.casualBrawl.finalAssists).toEqualTypeOf<number>();
  expect(data.phoenix.casualBrawl.finalDeaths).toBeDefined();
  expect(data.phoenix.casualBrawl.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.casualBrawl.finalDeaths).toEqualTypeOf<number>();
  expect(data.phoenix.casualBrawl.finalKDRatio).toBeDefined();
  expect(data.phoenix.casualBrawl.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.casualBrawl.finalKDRatio).toEqualTypeOf<number>();
  expect(data.phoenix.casualBrawl.playedGames).toBeDefined();
  expect(data.phoenix.casualBrawl.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.casualBrawl.playedGames).toEqualTypeOf<number>();
  expect(data.phoenix.casualBrawl.witherDamage).toBeDefined();
  expect(data.phoenix.casualBrawl.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.casualBrawl.witherDamage).toEqualTypeOf<number>();
  expect(data.phoenix.casualBrawl.defenderKills).toBeDefined();
  expect(data.phoenix.casualBrawl.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.casualBrawl.defenderKills).toEqualTypeOf<number>();
  expect(data.phoenix.casualBrawl.walked).toBeDefined();
  expect(data.phoenix.casualBrawl.walked).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.casualBrawl.walked).toEqualTypeOf<number>();
  expect(data.phoenix.casualBrawl.blocksPlaced).toBeDefined();
  expect(data.phoenix.casualBrawl.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.casualBrawl.blocksPlaced).toEqualTypeOf<number>();
  expect(data.phoenix.casualBrawl.blocksBroken).toBeDefined();
  expect(data.phoenix.casualBrawl.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.casualBrawl.blocksBroken).toEqualTypeOf<number>();
  expect(data.phoenix.casualBrawl.meleeKills).toBeDefined();
  expect(data.phoenix.casualBrawl.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.casualBrawl.meleeKills).toEqualTypeOf<number>();
  expect(data.phoenix.casualBrawl.damageDealt).toBeDefined();
  expect(data.phoenix.casualBrawl.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.phoenix.casualBrawl.damageDealt).toEqualTypeOf<number>();
  expect(data.renegade).toBeDefined();
  expectTypeOf(data.renegade).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.renegade.kills).toBeDefined();
  expect(data.renegade.kills).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.kills).toEqualTypeOf<number>();
  expect(data.renegade.assists).toBeDefined();
  expect(data.renegade.assists).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.assists).toEqualTypeOf<number>();
  expect(data.renegade.deaths).toBeDefined();
  expect(data.renegade.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.deaths).toEqualTypeOf<number>();
  expect(data.renegade.KDRatio).toBeDefined();
  expect(data.renegade.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.KDRatio).toEqualTypeOf<number>();
  expect(data.renegade.wins).toBeDefined();
  expect(data.renegade.wins).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.wins).toEqualTypeOf<number>();
  expect(data.renegade.losses).toBeDefined();
  expect(data.renegade.losses).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.losses).toEqualTypeOf<number>();
  expect(data.renegade.WLRatio).toBeDefined();
  expect(data.renegade.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.WLRatio).toEqualTypeOf<number>();
  expect(data.renegade.finalKills).toBeDefined();
  expect(data.renegade.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.finalKills).toEqualTypeOf<number>();
  expect(data.renegade.finalAssists).toBeDefined();
  expect(data.renegade.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.finalAssists).toEqualTypeOf<number>();
  expect(data.renegade.finalDeaths).toBeDefined();
  expect(data.renegade.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.finalDeaths).toEqualTypeOf<number>();
  expect(data.renegade.finalKDRatio).toBeDefined();
  expect(data.renegade.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.finalKDRatio).toEqualTypeOf<number>();
  expect(data.renegade.playedGames).toBeDefined();
  expect(data.renegade.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.playedGames).toEqualTypeOf<number>();
  expect(data.renegade.witherDamage).toBeDefined();
  expect(data.renegade.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.witherDamage).toEqualTypeOf<number>();
  expect(data.renegade.defenderKills).toBeDefined();
  expect(data.renegade.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.defenderKills).toEqualTypeOf<number>();
  expect(data.renegade.walked).toBeDefined();
  expect(data.renegade.walked).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.walked).toEqualTypeOf<number>();
  expect(data.renegade.blocksPlaced).toBeDefined();
  expect(data.renegade.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.blocksPlaced).toEqualTypeOf<number>();
  expect(data.renegade.blocksBroken).toBeDefined();
  expect(data.renegade.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.blocksBroken).toEqualTypeOf<number>();
  expect(data.renegade.meleeKills).toBeDefined();
  expect(data.renegade.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.meleeKills).toEqualTypeOf<number>();
  expect(data.renegade.damageDealt).toBeDefined();
  expect(data.renegade.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.damageDealt).toEqualTypeOf<number>();
  expect(data.renegade.faceOff).toBeDefined();
  expectTypeOf(data.renegade.faceOff).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.renegade.faceOff.kills).toBeDefined();
  expect(data.renegade.faceOff.kills).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.faceOff.kills).toEqualTypeOf<number>();
  expect(data.renegade.faceOff.assists).toBeDefined();
  expect(data.renegade.faceOff.assists).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.faceOff.assists).toEqualTypeOf<number>();
  expect(data.renegade.faceOff.deaths).toBeDefined();
  expect(data.renegade.faceOff.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.faceOff.deaths).toEqualTypeOf<number>();
  expect(data.renegade.faceOff.KDRatio).toBeDefined();
  expect(data.renegade.faceOff.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.faceOff.KDRatio).toEqualTypeOf<number>();
  expect(data.renegade.faceOff.wins).toBeDefined();
  expect(data.renegade.faceOff.wins).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.faceOff.wins).toEqualTypeOf<number>();
  expect(data.renegade.faceOff.losses).toBeDefined();
  expect(data.renegade.faceOff.losses).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.faceOff.losses).toEqualTypeOf<number>();
  expect(data.renegade.faceOff.WLRatio).toBeDefined();
  expect(data.renegade.faceOff.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.faceOff.WLRatio).toEqualTypeOf<number>();
  expect(data.renegade.faceOff.finalKills).toBeDefined();
  expect(data.renegade.faceOff.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.faceOff.finalKills).toEqualTypeOf<number>();
  expect(data.renegade.faceOff.finalAssists).toBeDefined();
  expect(data.renegade.faceOff.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.faceOff.finalAssists).toEqualTypeOf<number>();
  expect(data.renegade.faceOff.finalDeaths).toBeDefined();
  expect(data.renegade.faceOff.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.faceOff.finalDeaths).toEqualTypeOf<number>();
  expect(data.renegade.faceOff.finalKDRatio).toBeDefined();
  expect(data.renegade.faceOff.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.faceOff.finalKDRatio).toEqualTypeOf<number>();
  expect(data.renegade.faceOff.playedGames).toBeDefined();
  expect(data.renegade.faceOff.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.faceOff.playedGames).toEqualTypeOf<number>();
  expect(data.renegade.faceOff.witherDamage).toBeDefined();
  expect(data.renegade.faceOff.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.faceOff.witherDamage).toEqualTypeOf<number>();
  expect(data.renegade.faceOff.defenderKills).toBeDefined();
  expect(data.renegade.faceOff.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.faceOff.defenderKills).toEqualTypeOf<number>();
  expect(data.renegade.faceOff.walked).toBeDefined();
  expect(data.renegade.faceOff.walked).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.faceOff.walked).toEqualTypeOf<number>();
  expect(data.renegade.faceOff.blocksPlaced).toBeDefined();
  expect(data.renegade.faceOff.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.faceOff.blocksPlaced).toEqualTypeOf<number>();
  expect(data.renegade.faceOff.blocksBroken).toBeDefined();
  expect(data.renegade.faceOff.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.faceOff.blocksBroken).toEqualTypeOf<number>();
  expect(data.renegade.faceOff.meleeKills).toBeDefined();
  expect(data.renegade.faceOff.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.faceOff.meleeKills).toEqualTypeOf<number>();
  expect(data.renegade.faceOff.damageDealt).toBeDefined();
  expect(data.renegade.faceOff.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.faceOff.damageDealt).toEqualTypeOf<number>();
  expect(data.renegade.casualBrawl).toBeDefined();
  expectTypeOf(data.renegade.casualBrawl).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.renegade.casualBrawl.kills).toBeDefined();
  expect(data.renegade.casualBrawl.kills).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.casualBrawl.kills).toEqualTypeOf<number>();
  expect(data.renegade.casualBrawl.assists).toBeDefined();
  expect(data.renegade.casualBrawl.assists).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.casualBrawl.assists).toEqualTypeOf<number>();
  expect(data.renegade.casualBrawl.deaths).toBeDefined();
  expect(data.renegade.casualBrawl.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.casualBrawl.deaths).toEqualTypeOf<number>();
  expect(data.renegade.casualBrawl.KDRatio).toBeDefined();
  expect(data.renegade.casualBrawl.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.casualBrawl.KDRatio).toEqualTypeOf<number>();
  expect(data.renegade.casualBrawl.wins).toBeDefined();
  expect(data.renegade.casualBrawl.wins).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.casualBrawl.wins).toEqualTypeOf<number>();
  expect(data.renegade.casualBrawl.losses).toBeDefined();
  expect(data.renegade.casualBrawl.losses).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.casualBrawl.losses).toEqualTypeOf<number>();
  expect(data.renegade.casualBrawl.WLRatio).toBeDefined();
  expect(data.renegade.casualBrawl.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.casualBrawl.WLRatio).toEqualTypeOf<number>();
  expect(data.renegade.casualBrawl.finalKills).toBeDefined();
  expect(data.renegade.casualBrawl.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.casualBrawl.finalKills).toEqualTypeOf<number>();
  expect(data.renegade.casualBrawl.finalAssists).toBeDefined();
  expect(data.renegade.casualBrawl.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.casualBrawl.finalAssists).toEqualTypeOf<number>();
  expect(data.renegade.casualBrawl.finalDeaths).toBeDefined();
  expect(data.renegade.casualBrawl.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.casualBrawl.finalDeaths).toEqualTypeOf<number>();
  expect(data.renegade.casualBrawl.finalKDRatio).toBeDefined();
  expect(data.renegade.casualBrawl.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.casualBrawl.finalKDRatio).toEqualTypeOf<number>();
  expect(data.renegade.casualBrawl.playedGames).toBeDefined();
  expect(data.renegade.casualBrawl.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.casualBrawl.playedGames).toEqualTypeOf<number>();
  expect(data.renegade.casualBrawl.witherDamage).toBeDefined();
  expect(data.renegade.casualBrawl.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.casualBrawl.witherDamage).toEqualTypeOf<number>();
  expect(data.renegade.casualBrawl.defenderKills).toBeDefined();
  expect(data.renegade.casualBrawl.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.casualBrawl.defenderKills).toEqualTypeOf<number>();
  expect(data.renegade.casualBrawl.walked).toBeDefined();
  expect(data.renegade.casualBrawl.walked).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.casualBrawl.walked).toEqualTypeOf<number>();
  expect(data.renegade.casualBrawl.blocksPlaced).toBeDefined();
  expect(data.renegade.casualBrawl.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.casualBrawl.blocksPlaced).toEqualTypeOf<number>();
  expect(data.renegade.casualBrawl.blocksBroken).toBeDefined();
  expect(data.renegade.casualBrawl.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.casualBrawl.blocksBroken).toEqualTypeOf<number>();
  expect(data.renegade.casualBrawl.meleeKills).toBeDefined();
  expect(data.renegade.casualBrawl.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.casualBrawl.meleeKills).toEqualTypeOf<number>();
  expect(data.renegade.casualBrawl.damageDealt).toBeDefined();
  expect(data.renegade.casualBrawl.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.renegade.casualBrawl.damageDealt).toEqualTypeOf<number>();
  expect(data.snowman).toBeDefined();
  expectTypeOf(data.snowman).toEqualTypeOf<MegaWallsKitStats>();
  expect(data.snowman.kills).toBeDefined();
  expect(data.snowman.kills).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.kills).toEqualTypeOf<number>();
  expect(data.snowman.assists).toBeDefined();
  expect(data.snowman.assists).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.assists).toEqualTypeOf<number>();
  expect(data.snowman.deaths).toBeDefined();
  expect(data.snowman.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.deaths).toEqualTypeOf<number>();
  expect(data.snowman.KDRatio).toBeDefined();
  expect(data.snowman.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.KDRatio).toEqualTypeOf<number>();
  expect(data.snowman.wins).toBeDefined();
  expect(data.snowman.wins).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.wins).toEqualTypeOf<number>();
  expect(data.snowman.losses).toBeDefined();
  expect(data.snowman.losses).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.losses).toEqualTypeOf<number>();
  expect(data.snowman.WLRatio).toBeDefined();
  expect(data.snowman.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.WLRatio).toEqualTypeOf<number>();
  expect(data.snowman.finalKills).toBeDefined();
  expect(data.snowman.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.finalKills).toEqualTypeOf<number>();
  expect(data.snowman.finalAssists).toBeDefined();
  expect(data.snowman.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.finalAssists).toEqualTypeOf<number>();
  expect(data.snowman.finalDeaths).toBeDefined();
  expect(data.snowman.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.finalDeaths).toEqualTypeOf<number>();
  expect(data.snowman.finalKDRatio).toBeDefined();
  expect(data.snowman.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.finalKDRatio).toEqualTypeOf<number>();
  expect(data.snowman.playedGames).toBeDefined();
  expect(data.snowman.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.playedGames).toEqualTypeOf<number>();
  expect(data.snowman.witherDamage).toBeDefined();
  expect(data.snowman.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.witherDamage).toEqualTypeOf<number>();
  expect(data.snowman.defenderKills).toBeDefined();
  expect(data.snowman.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.defenderKills).toEqualTypeOf<number>();
  expect(data.snowman.walked).toBeDefined();
  expect(data.snowman.walked).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.walked).toEqualTypeOf<number>();
  expect(data.snowman.blocksPlaced).toBeDefined();
  expect(data.snowman.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.blocksPlaced).toEqualTypeOf<number>();
  expect(data.snowman.blocksBroken).toBeDefined();
  expect(data.snowman.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.blocksBroken).toEqualTypeOf<number>();
  expect(data.snowman.meleeKills).toBeDefined();
  expect(data.snowman.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.meleeKills).toEqualTypeOf<number>();
  expect(data.snowman.damageDealt).toBeDefined();
  expect(data.snowman.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.damageDealt).toEqualTypeOf<number>();
  expect(data.snowman.faceOff).toBeDefined();
  expectTypeOf(data.snowman.faceOff).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.snowman.faceOff.kills).toBeDefined();
  expect(data.snowman.faceOff.kills).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.faceOff.kills).toEqualTypeOf<number>();
  expect(data.snowman.faceOff.assists).toBeDefined();
  expect(data.snowman.faceOff.assists).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.faceOff.assists).toEqualTypeOf<number>();
  expect(data.snowman.faceOff.deaths).toBeDefined();
  expect(data.snowman.faceOff.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.faceOff.deaths).toEqualTypeOf<number>();
  expect(data.snowman.faceOff.KDRatio).toBeDefined();
  expect(data.snowman.faceOff.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.faceOff.KDRatio).toEqualTypeOf<number>();
  expect(data.snowman.faceOff.wins).toBeDefined();
  expect(data.snowman.faceOff.wins).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.faceOff.wins).toEqualTypeOf<number>();
  expect(data.snowman.faceOff.losses).toBeDefined();
  expect(data.snowman.faceOff.losses).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.faceOff.losses).toEqualTypeOf<number>();
  expect(data.snowman.faceOff.WLRatio).toBeDefined();
  expect(data.snowman.faceOff.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.faceOff.WLRatio).toEqualTypeOf<number>();
  expect(data.snowman.faceOff.finalKills).toBeDefined();
  expect(data.snowman.faceOff.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.faceOff.finalKills).toEqualTypeOf<number>();
  expect(data.snowman.faceOff.finalAssists).toBeDefined();
  expect(data.snowman.faceOff.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.faceOff.finalAssists).toEqualTypeOf<number>();
  expect(data.snowman.faceOff.finalDeaths).toBeDefined();
  expect(data.snowman.faceOff.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.faceOff.finalDeaths).toEqualTypeOf<number>();
  expect(data.snowman.faceOff.finalKDRatio).toBeDefined();
  expect(data.snowman.faceOff.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.faceOff.finalKDRatio).toEqualTypeOf<number>();
  expect(data.snowman.faceOff.playedGames).toBeDefined();
  expect(data.snowman.faceOff.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.faceOff.playedGames).toEqualTypeOf<number>();
  expect(data.snowman.faceOff.witherDamage).toBeDefined();
  expect(data.snowman.faceOff.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.faceOff.witherDamage).toEqualTypeOf<number>();
  expect(data.snowman.faceOff.defenderKills).toBeDefined();
  expect(data.snowman.faceOff.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.faceOff.defenderKills).toEqualTypeOf<number>();
  expect(data.snowman.faceOff.walked).toBeDefined();
  expect(data.snowman.faceOff.walked).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.faceOff.walked).toEqualTypeOf<number>();
  expect(data.snowman.faceOff.blocksPlaced).toBeDefined();
  expect(data.snowman.faceOff.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.faceOff.blocksPlaced).toEqualTypeOf<number>();
  expect(data.snowman.faceOff.blocksBroken).toBeDefined();
  expect(data.snowman.faceOff.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.faceOff.blocksBroken).toEqualTypeOf<number>();
  expect(data.snowman.faceOff.meleeKills).toBeDefined();
  expect(data.snowman.faceOff.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.faceOff.meleeKills).toEqualTypeOf<number>();
  expect(data.snowman.faceOff.damageDealt).toBeDefined();
  expect(data.snowman.faceOff.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.faceOff.damageDealt).toEqualTypeOf<number>();
  expect(data.snowman.casualBrawl).toBeDefined();
  expectTypeOf(data.snowman.casualBrawl).toEqualTypeOf<MegaWallsModeStats>();
  expect(data.snowman.casualBrawl.kills).toBeDefined();
  expect(data.snowman.casualBrawl.kills).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.casualBrawl.kills).toEqualTypeOf<number>();
  expect(data.snowman.casualBrawl.assists).toBeDefined();
  expect(data.snowman.casualBrawl.assists).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.casualBrawl.assists).toEqualTypeOf<number>();
  expect(data.snowman.casualBrawl.deaths).toBeDefined();
  expect(data.snowman.casualBrawl.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.casualBrawl.deaths).toEqualTypeOf<number>();
  expect(data.snowman.casualBrawl.KDRatio).toBeDefined();
  expect(data.snowman.casualBrawl.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.casualBrawl.KDRatio).toEqualTypeOf<number>();
  expect(data.snowman.casualBrawl.wins).toBeDefined();
  expect(data.snowman.casualBrawl.wins).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.casualBrawl.wins).toEqualTypeOf<number>();
  expect(data.snowman.casualBrawl.losses).toBeDefined();
  expect(data.snowman.casualBrawl.losses).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.casualBrawl.losses).toEqualTypeOf<number>();
  expect(data.snowman.casualBrawl.WLRatio).toBeDefined();
  expect(data.snowman.casualBrawl.WLRatio).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.casualBrawl.WLRatio).toEqualTypeOf<number>();
  expect(data.snowman.casualBrawl.finalKills).toBeDefined();
  expect(data.snowman.casualBrawl.finalKills).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.casualBrawl.finalKills).toEqualTypeOf<number>();
  expect(data.snowman.casualBrawl.finalAssists).toBeDefined();
  expect(data.snowman.casualBrawl.finalAssists).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.casualBrawl.finalAssists).toEqualTypeOf<number>();
  expect(data.snowman.casualBrawl.finalDeaths).toBeDefined();
  expect(data.snowman.casualBrawl.finalDeaths).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.casualBrawl.finalDeaths).toEqualTypeOf<number>();
  expect(data.snowman.casualBrawl.finalKDRatio).toBeDefined();
  expect(data.snowman.casualBrawl.finalKDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.casualBrawl.finalKDRatio).toEqualTypeOf<number>();
  expect(data.snowman.casualBrawl.playedGames).toBeDefined();
  expect(data.snowman.casualBrawl.playedGames).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.casualBrawl.playedGames).toEqualTypeOf<number>();
  expect(data.snowman.casualBrawl.witherDamage).toBeDefined();
  expect(data.snowman.casualBrawl.witherDamage).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.casualBrawl.witherDamage).toEqualTypeOf<number>();
  expect(data.snowman.casualBrawl.defenderKills).toBeDefined();
  expect(data.snowman.casualBrawl.defenderKills).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.casualBrawl.defenderKills).toEqualTypeOf<number>();
  expect(data.snowman.casualBrawl.walked).toBeDefined();
  expect(data.snowman.casualBrawl.walked).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.casualBrawl.walked).toEqualTypeOf<number>();
  expect(data.snowman.casualBrawl.blocksPlaced).toBeDefined();
  expect(data.snowman.casualBrawl.blocksPlaced).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.casualBrawl.blocksPlaced).toEqualTypeOf<number>();
  expect(data.snowman.casualBrawl.blocksBroken).toBeDefined();
  expect(data.snowman.casualBrawl.blocksBroken).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.casualBrawl.blocksBroken).toEqualTypeOf<number>();
  expect(data.snowman.casualBrawl.meleeKills).toBeDefined();
  expect(data.snowman.casualBrawl.meleeKills).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.casualBrawl.meleeKills).toEqualTypeOf<number>();
  expect(data.snowman.casualBrawl.damageDealt).toBeDefined();
  expect(data.snowman.casualBrawl.damageDealt).greaterThanOrEqual(0);
  expectTypeOf(data.snowman.casualBrawl.damageDealt).toEqualTypeOf<number>();
});
