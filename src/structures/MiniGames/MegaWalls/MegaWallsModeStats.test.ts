import MegaWallsModeStats from './MegaWallsModeStats.js';
import { expect, expectTypeOf, test } from 'vitest';

test('MegaWallsModeStats', () => {
  const data = new MegaWallsModeStats({ stats: 'meow' }, 'face_off');
  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(MegaWallsModeStats);
  expectTypeOf(data).toMatchTypeOf<MegaWallsModeStats>();
  expect(data.kills).toBeDefined();
  expect(data.kills).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.kills).toEqualTypeOf<number>();
  expect(data.assists).toBeDefined();
  expect(data.assists).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.assists).toEqualTypeOf<number>();
  expect(data.deaths).toBeDefined();
  expect(data.deaths).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.deaths).toEqualTypeOf<number>();
  expect(data.KDR).toBeDefined();
  expect(data.KDR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.KDR).toEqualTypeOf<number>();
  expect(data.wins).toBeDefined();
  expect(data.wins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.wins).toEqualTypeOf<number>();
  expect(data.losses).toBeDefined();
  expect(data.losses).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.losses).toEqualTypeOf<number>();
  expect(data.WLR).toBeDefined();
  expect(data.WLR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.WLR).toEqualTypeOf<number>();
  expect(data.finalKills).toBeDefined();
  expect(data.finalKills).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.finalKills).toEqualTypeOf<number>();
  expect(data.finalAssists).toBeDefined();
  expect(data.finalAssists).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.finalAssists).toEqualTypeOf<number>();
  expect(data.finalDeaths).toBeDefined();
  expect(data.finalDeaths).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.finalDeaths).toEqualTypeOf<number>();
  expect(data.FKDR).toBeDefined();
  expect(data.FKDR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.FKDR).toEqualTypeOf<number>();
  expect(data.playedGames).toBeDefined();
  expect(data.playedGames).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.playedGames).toEqualTypeOf<number>();
  expect(data.witherDamage).toBeDefined();
  expect(data.witherDamage).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.witherDamage).toEqualTypeOf<number>();
  expect(data.defenderKills).toBeDefined();
  expect(data.defenderKills).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.defenderKills).toEqualTypeOf<number>();
  expect(data.walked).toBeDefined();
  expect(data.walked).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.walked).toEqualTypeOf<number>();
  expect(data.blocksPlaced).toBeDefined();
  expect(data.blocksPlaced).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.blocksPlaced).toEqualTypeOf<number>();
  expect(data.blocksBroken).toBeDefined();
  expect(data.blocksBroken).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.blocksBroken).toEqualTypeOf<number>();
  expect(data.meleeKills).toBeDefined();
  expect(data.meleeKills).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.meleeKills).toEqualTypeOf<number>();
  expect(data.damageDealt).toBeDefined();
  expect(data.damageDealt).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.damageDealt).toEqualTypeOf<number>();
});
