import { expect, expectTypeOf, test } from 'vitest';
import TNTGames, { BowSpleef, PVPRun, TNTRun, TNTTag, TNTWizards } from './TNTGames';

test('TNTGames', () => {
  const data = new TNTGames({ stats: 'meow' });
  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(TNTGames);
  expectTypeOf(data).toEqualTypeOf<TNTGames>();
  expect(data.coins).toBeDefined();
  expect(data.coins).greaterThanOrEqual(0);
  expectTypeOf(data.coins).toEqualTypeOf<number>();
  expect(data.winstreak).toBeDefined();
  expect(data.winstreak).greaterThanOrEqual(0);
  expectTypeOf(data.winstreak).toEqualTypeOf<number>();
  expect(data.wins).toBeDefined();
  expect(data.wins).greaterThanOrEqual(0);
  expectTypeOf(data.wins).toEqualTypeOf<number>();
  expect(data.tntrun).toBeDefined();
  expectTypeOf(data.tntrun).toEqualTypeOf<TNTRun>();
  expect(data.tntrun.wins).toBeDefined();
  expect(data.tntrun.wins).greaterThanOrEqual(0);
  expectTypeOf(data.tntrun.wins).toEqualTypeOf<number>();
  expect(data.tntrun.bestTime).toBeDefined();
  expect(data.tntrun.bestTime).greaterThanOrEqual(0);
  expectTypeOf(data.tntrun.bestTime).toEqualTypeOf<number>();
  expect(data.tntrun.deaths).toBeDefined();
  expect(data.tntrun.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.tntrun.deaths).toEqualTypeOf<number>();
  expect(data.tntrun.slownessPotions).toBeDefined();
  expect(data.tntrun.slownessPotions).greaterThanOrEqual(0);
  expectTypeOf(data.tntrun.slownessPotions).toEqualTypeOf<number>();
  expect(data.tntrun.speedPotions).toBeDefined();
  expect(data.tntrun.speedPotions).greaterThanOrEqual(0);
  expectTypeOf(data.tntrun.speedPotions).toEqualTypeOf<number>();
  expect(data.tntrun.doubleJumps).toBeDefined();
  expect(data.tntrun.doubleJumps).greaterThanOrEqual(0);
  expectTypeOf(data.tntrun.doubleJumps).toEqualTypeOf<number>();
  expect(data.tntrun.prefix).toBeDefined();
  expectTypeOf(data.tntrun.prefix).toEqualTypeOf<string>();
  expect(data.pvpRun).toBeDefined();
  expectTypeOf(data.pvpRun).toEqualTypeOf<PVPRun>();
  expect(data.pvpRun.wins).toBeDefined();
  expect(data.pvpRun.wins).greaterThanOrEqual(0);
  expectTypeOf(data.pvpRun.wins).toEqualTypeOf<number>();
  expect(data.pvpRun.bestTime).toBeDefined();
  expect(data.pvpRun.bestTime).greaterThanOrEqual(0);
  expectTypeOf(data.pvpRun.bestTime).toEqualTypeOf<number>();
  expect(data.pvpRun.kills).toBeDefined();
  expect(data.pvpRun.kills).greaterThanOrEqual(0);
  expectTypeOf(data.pvpRun.kills).toEqualTypeOf<number>();
  expect(data.pvpRun.deaths).toBeDefined();
  expect(data.pvpRun.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.pvpRun.deaths).toEqualTypeOf<number>();
  expect(data.pvpRun.KDRatio).toBeDefined();
  expect(data.pvpRun.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.pvpRun.KDRatio).toEqualTypeOf<number>();
  expect(data.pvpRun.regeneration).toBeDefined();
  expect(data.pvpRun.regeneration).greaterThanOrEqual(0);
  expectTypeOf(data.pvpRun.regeneration).toEqualTypeOf<number>();
  expect(data.pvpRun.notoriety).toBeDefined();
  expect(data.pvpRun.notoriety).greaterThanOrEqual(0);
  expectTypeOf(data.pvpRun.notoriety).toEqualTypeOf<number>();
  expect(data.pvpRun.fortitude).toBeDefined();
  expect(data.pvpRun.fortitude).greaterThanOrEqual(0);
  expectTypeOf(data.pvpRun.fortitude).toEqualTypeOf<number>();
  expect(data.pvpRun.doubleJumps).toBeDefined();
  expect(data.pvpRun.doubleJumps).greaterThanOrEqual(0);
  expectTypeOf(data.pvpRun.doubleJumps).toEqualTypeOf<number>();
  expect(data.pvpRun.prefix).toBeDefined();
  expectTypeOf(data.pvpRun.prefix).toEqualTypeOf<string>();
  expect(data.bowSpleef).toBeDefined();
  expectTypeOf(data.bowSpleef).toEqualTypeOf<BowSpleef>();
  expect(data.bowSpleef.wins).toBeDefined();
  expect(data.bowSpleef.wins).greaterThanOrEqual(0);
  expectTypeOf(data.bowSpleef.wins).toEqualTypeOf<number>();
  expect(data.bowSpleef.tags).toBeDefined();
  expect(data.bowSpleef.tags).greaterThanOrEqual(0);
  expectTypeOf(data.bowSpleef.tags).toEqualTypeOf<number>();
  expect(data.bowSpleef.deaths).toBeDefined();
  expect(data.bowSpleef.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.bowSpleef.deaths).toEqualTypeOf<number>();
  expect(data.bowSpleef.prefix).toBeDefined();
  expectTypeOf(data.bowSpleef.prefix).toEqualTypeOf<string>();
  expect(data.tnttag).toBeDefined();
  expectTypeOf(data.tnttag).toEqualTypeOf<TNTTag>();
  expect(data.tnttag.wins).toBeDefined();
  expect(data.tnttag.wins).greaterThanOrEqual(0);
  expectTypeOf(data.tnttag.wins).toEqualTypeOf<number>();
  expect(data.tnttag.kills).toBeDefined();
  expect(data.tnttag.kills).greaterThanOrEqual(0);
  expectTypeOf(data.tnttag.kills).toEqualTypeOf<number>();
  expect(data.tnttag.deaths).toBeDefined();
  expect(data.tnttag.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.tnttag.deaths).toEqualTypeOf<number>();
  expect(data.tnttag.KDRatio).toBeDefined();
  expect(data.tnttag.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.tnttag.KDRatio).toEqualTypeOf<number>();
  expect(data.tnttag.speed).toBeDefined();
  expect(data.tnttag.speed).greaterThanOrEqual(0);
  expectTypeOf(data.tnttag.speed).toEqualTypeOf<number>();
  expect(data.tnttag.blastProtection).toBeDefined();
  expect(data.tnttag.blastProtection).greaterThanOrEqual(0);
  expectTypeOf(data.tnttag.blastProtection).toEqualTypeOf<number>();
  expect(data.tnttag.speedItUp).toBeDefined();
  expect(data.tnttag.speedItUp).greaterThanOrEqual(0);
  expectTypeOf(data.tnttag.speedItUp).toEqualTypeOf<number>();
  expect(data.tnttag.slowItDown).toBeDefined();
  expect(data.tnttag.slowItDown).greaterThanOrEqual(0);
  expectTypeOf(data.tnttag.slowItDown).toEqualTypeOf<number>();
  expect(data.tnttag.prefix).toBeDefined();
  expectTypeOf(data.tnttag.prefix).toEqualTypeOf<string>();
  expect(data.wizards).toBeDefined();
  expectTypeOf(data.wizards).toEqualTypeOf<TNTWizards>();
  expect(data.wizards.wins).toBeDefined();
  expect(data.wizards.wins).greaterThanOrEqual(0);
  expectTypeOf(data.wizards.wins).toEqualTypeOf<number>();
  expect(data.wizards.kills).toBeDefined();
  expect(data.wizards.kills).greaterThanOrEqual(0);
  expectTypeOf(data.wizards.kills).toEqualTypeOf<number>();
  expect(data.wizards.assists).toBeDefined();
  expect(data.wizards.assists).greaterThanOrEqual(0);
  expectTypeOf(data.wizards.assists).toEqualTypeOf<number>();
  expect(data.wizards.deaths).toBeDefined();
  expect(data.wizards.deaths).greaterThanOrEqual(0);
  expectTypeOf(data.wizards.deaths).toEqualTypeOf<number>();
  expect(data.wizards.KDRatio).toBeDefined();
  expect(data.wizards.KDRatio).greaterThanOrEqual(0);
  expectTypeOf(data.wizards.KDRatio).toEqualTypeOf<number>();
  expect(data.wizards.points).toBeDefined();
  expect(data.wizards.points).greaterThanOrEqual(0);
  expectTypeOf(data.wizards.points).toEqualTypeOf<number>();
  expect(data.wizards.kineticHealing).toBeDefined();
  expect(data.wizards.kineticHealing).greaterThanOrEqual(0);
  expectTypeOf(data.wizards.kineticHealing).toEqualTypeOf<number>();
  expect(data.wizards.airTime).toBeDefined();
  expect(data.wizards.airTime).greaterThanOrEqual(0);
  expectTypeOf(data.wizards.airTime).toEqualTypeOf<number>();
  expect(data.wizards.prefix).toBeDefined();
  expectTypeOf(data.wizards.prefix).toEqualTypeOf<string>();
});
