import TurboKartRacers, { TurboKartRacersMap } from './TurboKartRacers';
import { expect, expectTypeOf, test } from 'vitest';

test('TurboKartRacers', () => {
  const data = new TurboKartRacers({ stats: 'meow' });
  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(TurboKartRacers);
  expectTypeOf(data).toEqualTypeOf<TurboKartRacers>();
  expect(data.coins).toBeDefined();
  expect(data.coins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.coins).toEqualTypeOf<number>();
  expect(data.wins).toBeDefined();
  expect(data.wins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.wins).toEqualTypeOf<number>();
  expect(data.completedLaps).toBeDefined();
  expect(data.completedLaps).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.completedLaps).toEqualTypeOf<number>();
  expect(data.bronzeTrophies).toBeDefined();
  expect(data.bronzeTrophies).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.bronzeTrophies).toEqualTypeOf<number>();
  expect(data.silverTrophies).toBeDefined();
  expect(data.silverTrophies).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.silverTrophies).toEqualTypeOf<number>();
  expect(data.goldTrophies).toBeDefined();
  expect(data.goldTrophies).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.goldTrophies).toEqualTypeOf<number>();
  expect(data.boxPickups).toBeDefined();
  expect(data.boxPickups).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.boxPickups).toEqualTypeOf<number>();
  expect(data.horn).toBeDefined();
  expectTypeOf(data.horn).toEqualTypeOf<
    'DEFAULT' | 'SHY' | 'ALIEN' | 'TAXI' | 'KLAXON' | 'TRICYCLE' | 'ALARM' | 'KLOON' | 'TEDDY' | 'TRUCK' | 'JERRY'
  >();
  expect(data.retro).toBeDefined();
  expectTypeOf(data.retro).toEqualTypeOf<TurboKartRacersMap>();
  expect(data.retro.map).toBeDefined();
  expectTypeOf(data.retro.map).toEqualTypeOf<string>();
  expect(data.retro.plays).toBeDefined();
  expect(data.retro.plays).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.retro.plays).toEqualTypeOf<number>();
  expect(data.retro.boxPickups).toBeDefined();
  expect(data.retro.boxPickups).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.retro.boxPickups).toEqualTypeOf<number>();
  expect(data.retro.bronzeTrophies).toBeDefined();
  expect(data.retro.bronzeTrophies).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.retro.bronzeTrophies).toEqualTypeOf<number>();
  expect(data.retro.silverTrophies).toBeDefined();
  expect(data.retro.silverTrophies).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.retro.silverTrophies).toEqualTypeOf<number>();
  expect(data.retro.goldTrophies).toBeDefined();
  expect(data.retro.goldTrophies).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.retro.goldTrophies).toEqualTypeOf<number>();
  expect(data.hypixelgp).toBeDefined();
  expectTypeOf(data.hypixelgp).toEqualTypeOf<TurboKartRacersMap>();
  expect(data.hypixelgp.map).toBeDefined();
  expectTypeOf(data.hypixelgp.map).toEqualTypeOf<string>();
  expect(data.hypixelgp.plays).toBeDefined();
  expect(data.hypixelgp.plays).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.hypixelgp.plays).toEqualTypeOf<number>();
  expect(data.hypixelgp.boxPickups).toBeDefined();
  expect(data.hypixelgp.boxPickups).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.hypixelgp.boxPickups).toEqualTypeOf<number>();
  expect(data.hypixelgp.bronzeTrophies).toBeDefined();
  expect(data.hypixelgp.bronzeTrophies).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.hypixelgp.bronzeTrophies).toEqualTypeOf<number>();
  expect(data.hypixelgp.silverTrophies).toBeDefined();
  expect(data.hypixelgp.silverTrophies).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.hypixelgp.silverTrophies).toEqualTypeOf<number>();
  expect(data.hypixelgp.goldTrophies).toBeDefined();
  expect(data.hypixelgp.goldTrophies).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.hypixelgp.goldTrophies).toEqualTypeOf<number>();
  expect(data.olympus).toBeDefined();
  expectTypeOf(data.olympus).toEqualTypeOf<TurboKartRacersMap>();
  expect(data.olympus.map).toBeDefined();
  expectTypeOf(data.olympus.map).toEqualTypeOf<string>();
  expect(data.olympus.plays).toBeDefined();
  expect(data.olympus.plays).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.olympus.plays).toEqualTypeOf<number>();
  expect(data.olympus.boxPickups).toBeDefined();
  expect(data.olympus.boxPickups).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.olympus.boxPickups).toEqualTypeOf<number>();
  expect(data.olympus.bronzeTrophies).toBeDefined();
  expect(data.olympus.bronzeTrophies).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.olympus.bronzeTrophies).toEqualTypeOf<number>();
  expect(data.olympus.silverTrophies).toBeDefined();
  expect(data.olympus.silverTrophies).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.olympus.silverTrophies).toEqualTypeOf<number>();
  expect(data.olympus.goldTrophies).toBeDefined();
  expect(data.olympus.goldTrophies).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.olympus.goldTrophies).toEqualTypeOf<number>();
  expect(data.junglerush).toBeDefined();
  expectTypeOf(data.junglerush).toEqualTypeOf<TurboKartRacersMap>();
  expect(data.junglerush.map).toBeDefined();
  expectTypeOf(data.junglerush.map).toEqualTypeOf<string>();
  expect(data.junglerush.plays).toBeDefined();
  expect(data.junglerush.plays).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.junglerush.plays).toEqualTypeOf<number>();
  expect(data.junglerush.boxPickups).toBeDefined();
  expect(data.junglerush.boxPickups).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.junglerush.boxPickups).toEqualTypeOf<number>();
  expect(data.junglerush.bronzeTrophies).toBeDefined();
  expect(data.junglerush.bronzeTrophies).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.junglerush.bronzeTrophies).toEqualTypeOf<number>();
  expect(data.junglerush.silverTrophies).toBeDefined();
  expect(data.junglerush.silverTrophies).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.junglerush.silverTrophies).toEqualTypeOf<number>();
  expect(data.junglerush.goldTrophies).toBeDefined();
  expect(data.junglerush.goldTrophies).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.junglerush.goldTrophies).toEqualTypeOf<number>();
  expect(data.canyon).toBeDefined();
  expectTypeOf(data.canyon).toEqualTypeOf<TurboKartRacersMap>();
  expect(data.canyon.map).toBeDefined();
  expectTypeOf(data.canyon.map).toEqualTypeOf<string>();
  expect(data.canyon.plays).toBeDefined();
  expect(data.canyon.plays).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.canyon.plays).toEqualTypeOf<number>();
  expect(data.canyon.boxPickups).toBeDefined();
  expect(data.canyon.boxPickups).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.canyon.boxPickups).toEqualTypeOf<number>();
  expect(data.canyon.bronzeTrophies).toBeDefined();
  expect(data.canyon.bronzeTrophies).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.canyon.bronzeTrophies).toEqualTypeOf<number>();
  expect(data.canyon.silverTrophies).toBeDefined();
  expect(data.canyon.silverTrophies).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.canyon.silverTrophies).toEqualTypeOf<number>();
  expect(data.canyon.goldTrophies).toBeDefined();
  expect(data.canyon.goldTrophies).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.canyon.goldTrophies).toEqualTypeOf<number>();
  expect(data.bananaHitsReceived).toBeDefined();
  expect(data.bananaHitsReceived).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.bananaHitsReceived).toEqualTypeOf<number>();
  expect(data.bananaHitsSent).toBeDefined();
  expect(data.bananaHitsSent).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.bananaHitsSent).toEqualTypeOf<number>();
  expect(data.blueTorpedoHit).toBeDefined();
  expect(data.blueTorpedoHit).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.blueTorpedoHit).toEqualTypeOf<number>();
  expect(data.grandPrix).toBeDefined();
  expectTypeOf(data.grandPrix).toEqualTypeOf<boolean>();
  expect(data.grandPrixTokens).toBeDefined();
  expect(data.grandPrixTokens).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.grandPrixTokens).toEqualTypeOf<number>();
});
