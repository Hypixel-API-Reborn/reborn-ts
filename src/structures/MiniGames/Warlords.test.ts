import Warlords, { WarlordsClass } from './Warlords';
import { expect, expectTypeOf, test } from 'vitest';

test('Warlords', () => {
  const data = new Warlords({ stats: 'meow' });
  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(Warlords);
  expectTypeOf(data).toEqualTypeOf<Warlords>();

  expect(data.coins).toBeDefined();
  expect(data.coins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.coins).toEqualTypeOf<number>();
  expect(data.kills).toBeDefined();
  expect(data.kills).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.kills).toEqualTypeOf<number>();
  expect(data.deaths).toBeDefined();
  expect(data.deaths).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.deaths).toEqualTypeOf<number>();
  expect(data.KDR).toBeDefined();
  expect(data.KDR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.KDR).toEqualTypeOf<number>();
  expect(data.wins).toBeDefined();
  expect(data.wins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.wins).toEqualTypeOf<number>();
  expect(data.losses).toBeDefined();
  expect(data.losses).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.losses).toEqualTypeOf<number>();
  expect(data.WLR).toBeDefined();
  expect(data.WLR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.WLR).toEqualTypeOf<number>();
  expect(data.winstreak).toBeDefined();
  expect(data.winstreak).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.winstreak).toEqualTypeOf<number>();
  expect(data.assists).toBeDefined();
  expect(data.assists).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.assists).toEqualTypeOf<number>();
  expect(data.class).toBeDefined();
  expectTypeOf(data.class).toEqualTypeOf<string>();
  expect(data.pyromancer).toBeDefined();
  expectTypeOf(data.pyromancer).toEqualTypeOf<WarlordsClass>();
  expect(data.pyromancer.wins).toBeDefined();
  expect(data.pyromancer.wins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.pyromancer.wins).toEqualTypeOf<number>();
  expect(data.pyromancer.losses).toBeDefined();
  expect(data.pyromancer.losses).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.pyromancer.losses).toEqualTypeOf<number>();
  expect(data.pyromancer.WLR).toBeDefined();
  expect(data.pyromancer.WLR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.pyromancer.WLR).toEqualTypeOf<number>();
  expect(data.pyromancer.gamesPlayed).toBeDefined();
  expect(data.pyromancer.gamesPlayed).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.pyromancer.gamesPlayed).toEqualTypeOf<number>();
  expect(data.pyromancer.damage).toBeDefined();
  expect(data.pyromancer.damage).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.pyromancer.damage).toEqualTypeOf<number>();
  expect(data.pyromancer.heal).toBeDefined();
  expect(data.pyromancer.heal).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.pyromancer.heal).toEqualTypeOf<number>();
  expect(data.pyromancer.damagePrevented).toBeDefined();
  expect(data.pyromancer.damagePrevented).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.pyromancer.damagePrevented).toEqualTypeOf<number>();
  expect(data.mage).toBeDefined();
  expectTypeOf(data.mage).toEqualTypeOf<WarlordsClass>();
  expect(data.mage.wins).toBeDefined();
  expect(data.mage.wins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.mage.wins).toEqualTypeOf<number>();
  expect(data.mage.losses).toBeDefined();
  expect(data.mage.losses).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.mage.losses).toEqualTypeOf<number>();
  expect(data.mage.WLR).toBeDefined();
  expect(data.mage.WLR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.mage.WLR).toEqualTypeOf<number>();
  expect(data.mage.gamesPlayed).toBeDefined();
  expect(data.mage.gamesPlayed).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.mage.gamesPlayed).toEqualTypeOf<number>();
  expect(data.mage.damage).toBeDefined();
  expect(data.mage.damage).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.mage.damage).toEqualTypeOf<number>();
  expect(data.mage.heal).toBeDefined();
  expect(data.mage.heal).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.mage.heal).toEqualTypeOf<number>();
  expect(data.mage.damagePrevented).toBeDefined();
  expect(data.mage.damagePrevented).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.mage.damagePrevented).toEqualTypeOf<number>();
  expect(data.thunderlord).toBeDefined();
  expectTypeOf(data.thunderlord).toEqualTypeOf<WarlordsClass>();
  expect(data.thunderlord.wins).toBeDefined();
  expect(data.thunderlord.wins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.thunderlord.wins).toEqualTypeOf<number>();
  expect(data.thunderlord.losses).toBeDefined();
  expect(data.thunderlord.losses).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.thunderlord.losses).toEqualTypeOf<number>();
  expect(data.thunderlord.WLR).toBeDefined();
  expect(data.thunderlord.WLR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.thunderlord.WLR).toEqualTypeOf<number>();
  expect(data.thunderlord.gamesPlayed).toBeDefined();
  expect(data.thunderlord.gamesPlayed).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.thunderlord.gamesPlayed).toEqualTypeOf<number>();
  expect(data.thunderlord.damage).toBeDefined();
  expect(data.thunderlord.damage).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.thunderlord.damage).toEqualTypeOf<number>();
  expect(data.thunderlord.heal).toBeDefined();
  expect(data.thunderlord.heal).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.thunderlord.heal).toEqualTypeOf<number>();
  expect(data.thunderlord.damagePrevented).toBeDefined();
  expect(data.thunderlord.damagePrevented).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.thunderlord.damagePrevented).toEqualTypeOf<number>();
  expect(data.shaman).toBeDefined();
  expectTypeOf(data.shaman).toEqualTypeOf<WarlordsClass>();
  expect(data.shaman.wins).toBeDefined();
  expect(data.shaman.wins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.shaman.wins).toEqualTypeOf<number>();
  expect(data.shaman.losses).toBeDefined();
  expect(data.shaman.losses).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.shaman.losses).toEqualTypeOf<number>();
  expect(data.shaman.WLR).toBeDefined();
  expect(data.shaman.WLR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.shaman.WLR).toEqualTypeOf<number>();
  expect(data.shaman.gamesPlayed).toBeDefined();
  expect(data.shaman.gamesPlayed).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.shaman.gamesPlayed).toEqualTypeOf<number>();
  expect(data.shaman.damage).toBeDefined();
  expect(data.shaman.damage).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.shaman.damage).toEqualTypeOf<number>();
  expect(data.shaman.heal).toBeDefined();
  expect(data.shaman.heal).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.shaman.heal).toEqualTypeOf<number>();
  expect(data.shaman.damagePrevented).toBeDefined();
  expect(data.shaman.damagePrevented).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.shaman.damagePrevented).toEqualTypeOf<number>();
  expect(data.earthwarden).toBeDefined();
  expectTypeOf(data.earthwarden).toEqualTypeOf<WarlordsClass>();
  expect(data.earthwarden.wins).toBeDefined();
  expect(data.earthwarden.wins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.earthwarden.wins).toEqualTypeOf<number>();
  expect(data.earthwarden.losses).toBeDefined();
  expect(data.earthwarden.losses).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.earthwarden.losses).toEqualTypeOf<number>();
  expect(data.earthwarden.WLR).toBeDefined();
  expect(data.earthwarden.WLR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.earthwarden.WLR).toEqualTypeOf<number>();
  expect(data.earthwarden.gamesPlayed).toBeDefined();
  expect(data.earthwarden.gamesPlayed).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.earthwarden.gamesPlayed).toEqualTypeOf<number>();
  expect(data.earthwarden.damage).toBeDefined();
  expect(data.earthwarden.damage).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.earthwarden.damage).toEqualTypeOf<number>();
  expect(data.earthwarden.heal).toBeDefined();
  expect(data.earthwarden.heal).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.earthwarden.heal).toEqualTypeOf<number>();
  expect(data.earthwarden.damagePrevented).toBeDefined();
  expect(data.earthwarden.damagePrevented).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.earthwarden.damagePrevented).toEqualTypeOf<number>();
  expect(data.aquamancer).toBeDefined();
  expectTypeOf(data.aquamancer).toEqualTypeOf<WarlordsClass>();
  expect(data.aquamancer.wins).toBeDefined();
  expect(data.aquamancer.wins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.aquamancer.wins).toEqualTypeOf<number>();
  expect(data.aquamancer.losses).toBeDefined();
  expect(data.aquamancer.losses).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.aquamancer.losses).toEqualTypeOf<number>();
  expect(data.aquamancer.WLR).toBeDefined();
  expect(data.aquamancer.WLR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.aquamancer.WLR).toEqualTypeOf<number>();
  expect(data.aquamancer.gamesPlayed).toBeDefined();
  expect(data.aquamancer.gamesPlayed).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.aquamancer.gamesPlayed).toEqualTypeOf<number>();
  expect(data.aquamancer.damage).toBeDefined();
  expect(data.aquamancer.damage).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.aquamancer.damage).toEqualTypeOf<number>();
  expect(data.aquamancer.heal).toBeDefined();
  expect(data.aquamancer.heal).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.aquamancer.heal).toEqualTypeOf<number>();
  expect(data.aquamancer.damagePrevented).toBeDefined();
  expect(data.aquamancer.damagePrevented).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.aquamancer.damagePrevented).toEqualTypeOf<number>();
  expect(data.paladin).toBeDefined();
  expectTypeOf(data.paladin).toEqualTypeOf<WarlordsClass>();
  expect(data.paladin.wins).toBeDefined();
  expect(data.paladin.wins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.paladin.wins).toEqualTypeOf<number>();
  expect(data.paladin.losses).toBeDefined();
  expect(data.paladin.losses).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.paladin.losses).toEqualTypeOf<number>();
  expect(data.paladin.WLR).toBeDefined();
  expect(data.paladin.WLR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.paladin.WLR).toEqualTypeOf<number>();
  expect(data.paladin.gamesPlayed).toBeDefined();
  expect(data.paladin.gamesPlayed).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.paladin.gamesPlayed).toEqualTypeOf<number>();
  expect(data.paladin.damage).toBeDefined();
  expect(data.paladin.damage).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.paladin.damage).toEqualTypeOf<number>();
  expect(data.paladin.heal).toBeDefined();
  expect(data.paladin.heal).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.paladin.heal).toEqualTypeOf<number>();
  expect(data.paladin.damagePrevented).toBeDefined();
  expect(data.paladin.damagePrevented).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.paladin.damagePrevented).toEqualTypeOf<number>();
  expect(data.avenger).toBeDefined();
  expectTypeOf(data.avenger).toEqualTypeOf<WarlordsClass>();
  expect(data.avenger.wins).toBeDefined();
  expect(data.avenger.wins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.avenger.wins).toEqualTypeOf<number>();
  expect(data.avenger.losses).toBeDefined();
  expect(data.avenger.losses).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.avenger.losses).toEqualTypeOf<number>();
  expect(data.avenger.WLR).toBeDefined();
  expect(data.avenger.WLR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.avenger.WLR).toEqualTypeOf<number>();
  expect(data.avenger.gamesPlayed).toBeDefined();
  expect(data.avenger.gamesPlayed).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.avenger.gamesPlayed).toEqualTypeOf<number>();
  expect(data.avenger.damage).toBeDefined();
  expect(data.avenger.damage).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.avenger.damage).toEqualTypeOf<number>();
  expect(data.avenger.heal).toBeDefined();
  expect(data.avenger.heal).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.avenger.heal).toEqualTypeOf<number>();
  expect(data.avenger.damagePrevented).toBeDefined();
  expect(data.avenger.damagePrevented).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.avenger.damagePrevented).toEqualTypeOf<number>();
  expect(data.warrior).toBeDefined();
  expectTypeOf(data.warrior).toEqualTypeOf<WarlordsClass>();
  expect(data.warrior.wins).toBeDefined();
  expect(data.warrior.wins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.warrior.wins).toEqualTypeOf<number>();
  expect(data.warrior.losses).toBeDefined();
  expect(data.warrior.losses).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.warrior.losses).toEqualTypeOf<number>();
  expect(data.warrior.WLR).toBeDefined();
  expect(data.warrior.WLR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.warrior.WLR).toEqualTypeOf<number>();
  expect(data.warrior.gamesPlayed).toBeDefined();
  expect(data.warrior.gamesPlayed).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.warrior.gamesPlayed).toEqualTypeOf<number>();
  expect(data.warrior.damage).toBeDefined();
  expect(data.warrior.damage).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.warrior.damage).toEqualTypeOf<number>();
  expect(data.warrior.heal).toBeDefined();
  expect(data.warrior.heal).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.warrior.heal).toEqualTypeOf<number>();
  expect(data.warrior.damagePrevented).toBeDefined();
  expect(data.warrior.damagePrevented).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.warrior.damagePrevented).toEqualTypeOf<number>();
  expect(data.defender).toBeDefined();
  expectTypeOf(data.defender).toEqualTypeOf<WarlordsClass>();
  expect(data.defender.wins).toBeDefined();
  expect(data.defender.wins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.defender.wins).toEqualTypeOf<number>();
  expect(data.defender.losses).toBeDefined();
  expect(data.defender.losses).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.defender.losses).toEqualTypeOf<number>();
  expect(data.defender.WLR).toBeDefined();
  expect(data.defender.WLR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.defender.WLR).toEqualTypeOf<number>();
  expect(data.defender.gamesPlayed).toBeDefined();
  expect(data.defender.gamesPlayed).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.defender.gamesPlayed).toEqualTypeOf<number>();
  expect(data.defender.damage).toBeDefined();
  expect(data.defender.damage).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.defender.damage).toEqualTypeOf<number>();
  expect(data.defender.heal).toBeDefined();
  expect(data.defender.heal).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.defender.heal).toEqualTypeOf<number>();
  expect(data.defender.damagePrevented).toBeDefined();
  expect(data.defender.damagePrevented).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.defender.damagePrevented).toEqualTypeOf<number>();
  expect(data.cryomancer).toBeDefined();
  expectTypeOf(data.cryomancer).toEqualTypeOf<WarlordsClass>();
  expect(data.cryomancer.wins).toBeDefined();
  expect(data.cryomancer.wins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.cryomancer.wins).toEqualTypeOf<number>();
  expect(data.cryomancer.losses).toBeDefined();
  expect(data.cryomancer.losses).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.cryomancer.losses).toEqualTypeOf<number>();
  expect(data.cryomancer.WLR).toBeDefined();
  expect(data.cryomancer.WLR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.cryomancer.WLR).toEqualTypeOf<number>();
  expect(data.cryomancer.gamesPlayed).toBeDefined();
  expect(data.cryomancer.gamesPlayed).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.cryomancer.gamesPlayed).toEqualTypeOf<number>();
  expect(data.cryomancer.damage).toBeDefined();
  expect(data.cryomancer.damage).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.cryomancer.damage).toEqualTypeOf<number>();
  expect(data.cryomancer.heal).toBeDefined();
  expect(data.cryomancer.heal).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.cryomancer.heal).toEqualTypeOf<number>();
  expect(data.cryomancer.damagePrevented).toBeDefined();
  expect(data.cryomancer.damagePrevented).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.cryomancer.damagePrevented).toEqualTypeOf<number>();
  expect(data.crusader).toBeDefined();
  expectTypeOf(data.crusader).toEqualTypeOf<WarlordsClass>();
  expect(data.crusader.wins).toBeDefined();
  expect(data.crusader.wins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.crusader.wins).toEqualTypeOf<number>();
  expect(data.crusader.losses).toBeDefined();
  expect(data.crusader.losses).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.crusader.losses).toEqualTypeOf<number>();
  expect(data.crusader.WLR).toBeDefined();
  expect(data.crusader.WLR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.crusader.WLR).toEqualTypeOf<number>();
  expect(data.crusader.gamesPlayed).toBeDefined();
  expect(data.crusader.gamesPlayed).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.crusader.gamesPlayed).toEqualTypeOf<number>();
  expect(data.crusader.damage).toBeDefined();
  expect(data.crusader.damage).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.crusader.damage).toEqualTypeOf<number>();
  expect(data.crusader.heal).toBeDefined();
  expect(data.crusader.heal).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.crusader.heal).toEqualTypeOf<number>();
  expect(data.crusader.damagePrevented).toBeDefined();
  expect(data.crusader.damagePrevented).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.crusader.damagePrevented).toEqualTypeOf<number>();
  expect(data.berserker).toBeDefined();
  expectTypeOf(data.berserker).toEqualTypeOf<WarlordsClass>();
  expect(data.berserker.wins).toBeDefined();
  expect(data.berserker.wins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.berserker.wins).toEqualTypeOf<number>();
  expect(data.berserker.losses).toBeDefined();
  expect(data.berserker.losses).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.berserker.losses).toEqualTypeOf<number>();
  expect(data.berserker.WLR).toBeDefined();
  expect(data.berserker.WLR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.berserker.WLR).toEqualTypeOf<number>();
  expect(data.berserker.gamesPlayed).toBeDefined();
  expect(data.berserker.gamesPlayed).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.berserker.gamesPlayed).toEqualTypeOf<number>();
  expect(data.berserker.damage).toBeDefined();
  expect(data.berserker.damage).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.berserker.damage).toEqualTypeOf<number>();
  expect(data.berserker.heal).toBeDefined();
  expect(data.berserker.heal).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.berserker.heal).toEqualTypeOf<number>();
  expect(data.berserker.damagePrevented).toBeDefined();
  expect(data.berserker.damagePrevented).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.berserker.damagePrevented).toEqualTypeOf<number>();
  expect(data.protector).toBeDefined();
  expectTypeOf(data.protector).toEqualTypeOf<WarlordsClass>();
  expect(data.protector.wins).toBeDefined();
  expect(data.protector.wins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.protector.wins).toEqualTypeOf<number>();
  expect(data.protector.losses).toBeDefined();
  expect(data.protector.losses).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.protector.losses).toEqualTypeOf<number>();
  expect(data.protector.WLR).toBeDefined();
  expect(data.protector.WLR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.protector.WLR).toEqualTypeOf<number>();
  expect(data.protector.gamesPlayed).toBeDefined();
  expect(data.protector.gamesPlayed).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.protector.gamesPlayed).toEqualTypeOf<number>();
  expect(data.protector.damage).toBeDefined();
  expect(data.protector.damage).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.protector.damage).toEqualTypeOf<number>();
  expect(data.protector.heal).toBeDefined();
  expect(data.protector.heal).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.protector.heal).toEqualTypeOf<number>();
  expect(data.protector.damagePrevented).toBeDefined();
  expect(data.protector.damagePrevented).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.protector.damagePrevented).toEqualTypeOf<number>();
  expect(data.revenant).toBeDefined();
  expectTypeOf(data.revenant).toEqualTypeOf<WarlordsClass>();
  expect(data.revenant.wins).toBeDefined();
  expect(data.revenant.wins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.revenant.wins).toEqualTypeOf<number>();
  expect(data.revenant.losses).toBeDefined();
  expect(data.revenant.losses).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.revenant.losses).toEqualTypeOf<number>();
  expect(data.revenant.WLR).toBeDefined();
  expect(data.revenant.WLR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.revenant.WLR).toEqualTypeOf<number>();
  expect(data.revenant.gamesPlayed).toBeDefined();
  expect(data.revenant.gamesPlayed).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.revenant.gamesPlayed).toEqualTypeOf<number>();
  expect(data.revenant.damage).toBeDefined();
  expect(data.revenant.damage).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.revenant.damage).toEqualTypeOf<number>();
  expect(data.revenant.heal).toBeDefined();
  expect(data.revenant.heal).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.revenant.heal).toEqualTypeOf<number>();
  expect(data.revenant.damagePrevented).toBeDefined();
  expect(data.revenant.damagePrevented).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.revenant.damagePrevented).toEqualTypeOf<number>();
  expect(data.spiritguard).toBeDefined();
  expectTypeOf(data.spiritguard).toEqualTypeOf<WarlordsClass>();
  expect(data.spiritguard.wins).toBeDefined();
  expect(data.spiritguard.wins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.spiritguard.wins).toEqualTypeOf<number>();
  expect(data.spiritguard.losses).toBeDefined();
  expect(data.spiritguard.losses).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.spiritguard.losses).toEqualTypeOf<number>();
  expect(data.spiritguard.WLR).toBeDefined();
  expect(data.spiritguard.WLR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.spiritguard.WLR).toEqualTypeOf<number>();
  expect(data.spiritguard.gamesPlayed).toBeDefined();
  expect(data.spiritguard.gamesPlayed).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.spiritguard.gamesPlayed).toEqualTypeOf<number>();
  expect(data.spiritguard.damage).toBeDefined();
  expect(data.spiritguard.damage).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.spiritguard.damage).toEqualTypeOf<number>();
  expect(data.spiritguard.heal).toBeDefined();
  expect(data.spiritguard.heal).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.spiritguard.heal).toEqualTypeOf<number>();
  expect(data.spiritguard.damagePrevented).toBeDefined();
  expect(data.spiritguard.damagePrevented).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.spiritguard.damagePrevented).toEqualTypeOf<number>();
});
