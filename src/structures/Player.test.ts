import Color from './Color';
import Guild from './Guild/Guild';
import House from './House';
import Player, { LevelProgress, PlayerRank, PlayerSocialMedia, PlayerStats, RanksPurchaseTime } from './Player';
import PlayerCosmetics from './PlayerCosmetics';
import RecentGame from './RecentGame';
import { expect, expectTypeOf, test } from 'vitest';

test('Player', () => {
  const data = new Player({ stats: 'meow' }, { guild: null, houses: null, recentGames: null });
  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(Player);
  expectTypeOf(data).toEqualTypeOf<Player>();
  expect(data.nickname).toBeDefined();
  expectTypeOf(data.nickname).toEqualTypeOf<string>();
  expect(data.uuid).toBeDefined();
  expectTypeOf(data.uuid).toEqualTypeOf<string>();
  expect(data.rank).toBeDefined();
  expectTypeOf(data.rank).toEqualTypeOf<PlayerRank>();
  expect(data.guild).toBeDefined();
  expectTypeOf(data.guild).toEqualTypeOf<Guild | null>();
  expect(data.houses).toBeDefined();
  expectTypeOf(data.houses).toEqualTypeOf<House[] | null>();
  expect(data.recentGames).toBeDefined();
  expectTypeOf(data.recentGames).toEqualTypeOf<RecentGame[] | null>();
  expect(data.channel).toBeDefined();
  expectTypeOf(data.channel).toEqualTypeOf<string>();
  expect(data.firstLoginTimestamp).toBeDefined();
  expectTypeOf(data.firstLoginTimestamp).toEqualTypeOf<number | null>();
  expect(data.firstLogin).toBeDefined();
  expectTypeOf(data.firstLogin).toEqualTypeOf<Date | null>();
  expect(data.lastLoginTimestamp).toBeDefined();
  expectTypeOf(data.lastLoginTimestamp).toEqualTypeOf<number | null>();
  expect(data.lastLogin).toBeDefined();
  expectTypeOf(data.lastLogin).toEqualTypeOf<Date | null>();
  expect(data.lastLogoutTimestamp).toBeDefined();
  expectTypeOf(data.lastLogoutTimestamp).toEqualTypeOf<number | null>();
  expect(data.lastLogout).toBeDefined();
  expectTypeOf(data.lastLogout).toEqualTypeOf<Date | null>();
  expect(data.plusColor).toBeDefined();
  expectTypeOf(data.plusColor).toEqualTypeOf<Color | null>();
  expect(data.prefixColor).toBeDefined();
  expectTypeOf(data.prefixColor).toEqualTypeOf<Color | null>();
  expect(data.karma).toBeDefined();
  expect(data.karma).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.karma).toEqualTypeOf<number>();
  expect(data.achievements).toBeDefined();
  expectTypeOf(data.achievements).toEqualTypeOf<object>();
  expect(data.achievementPoints).toBeDefined();
  expect(data.achievementPoints).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.achievementPoints).toEqualTypeOf<number>();
  expect(data.totalExperience).toBeDefined();
  expect(data.totalExperience).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.totalExperience).toEqualTypeOf<number>();
  expect(data.level).toBeDefined();
  expect(data.level).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.level).toEqualTypeOf<number>();
  expect(data.socialMedia).toBeDefined();
  expectTypeOf(data.socialMedia).toEqualTypeOf<PlayerSocialMedia[]>();
  expect(data.giftBundlesSent).toBeDefined();
  expect(data.giftBundlesSent).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.giftBundlesSent).toEqualTypeOf<number>();
  expect(data.giftBundlesReceived).toBeDefined();
  expect(data.giftBundlesReceived).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.giftBundlesReceived).toEqualTypeOf<number>();
  expect(data.giftsSent).toBeDefined();
  expect(data.giftsSent).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.giftsSent).toEqualTypeOf<number>();
  expect(data.isOnline).toBeDefined();
  expectTypeOf(data.isOnline).toEqualTypeOf<boolean>();
  expect(data.lastDailyReward).toBeDefined();
  expectTypeOf(data.lastDailyReward).toEqualTypeOf<Date | null>();
  expect(data.lastDailyRewardTimestamp).toBeDefined();
  expect(data.lastDailyRewardTimestamp).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.lastDailyRewardTimestamp).toEqualTypeOf<number | null>();
  expect(data.totalRewards).toBeDefined();
  expect(data.totalRewards).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.totalRewards).toEqualTypeOf<number>();
  expect(data.totalDailyRewards).toBeDefined();
  expect(data.totalDailyRewards).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.totalDailyRewards).toEqualTypeOf<number>();
  expect(data.rewardStreak).toBeDefined();
  expect(data.rewardStreak).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.rewardStreak).toEqualTypeOf<number>();
  expect(data.rewardScore).toBeDefined();
  expect(data.rewardScore).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.rewardScore).toEqualTypeOf<number>();
  expect(data.rewardHighScore).toBeDefined();
  expect(data.rewardHighScore).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.rewardHighScore).toEqualTypeOf<number>();
  expect(data.levelProgress).toBeDefined();
  expectTypeOf(data.levelProgress).toEqualTypeOf<LevelProgress>();
  expect(data.stats).toBeDefined();
  expectTypeOf(data.stats).toEqualTypeOf<PlayerStats>();
  expect(data.userLanguage).toBeDefined();
  expectTypeOf(data.userLanguage).toEqualTypeOf<string>();
  expect(data.claimedLevelingRewards).toBeDefined();
  expectTypeOf(data.claimedLevelingRewards).toEqualTypeOf<number[]>();
  expect(data.globalCosmetics).toBeDefined();
  expectTypeOf(data.globalCosmetics).toEqualTypeOf<PlayerCosmetics | null>();
  expect(data.ranksPurchaseTime).toBeDefined();
  expectTypeOf(data.ranksPurchaseTime).toEqualTypeOf<RanksPurchaseTime>();
});
