import Pet from './Pet';
import Pets, { PetConsumables } from './Pets';
import { expect, expectTypeOf, test } from 'vitest';

test('Pet Consumables', () => {
  const data = new PetConsumables({ stats: 0 });
  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(PetConsumables);
  expectTypeOf(data).toEqualTypeOf<PetConsumables>();
  expect(data.bakedPotato).toBeDefined();
  expect(data.bakedPotato).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.bakedPotato).toEqualTypeOf<number>();
  expect(data.cookie).toBeDefined();
  expect(data.cookie).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.cookie).toEqualTypeOf<number>();
  expect(data.feather).toBeDefined();
  expect(data.feather).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.feather).toEqualTypeOf<number>();
  expect(data.hayBlock).toBeDefined();
  expect(data.hayBlock).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.hayBlock).toEqualTypeOf<number>();
  expect(data.slimeBall).toBeDefined();
  expect(data.slimeBall).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.slimeBall).toEqualTypeOf<number>();
  expect(data.cookedBeef).toBeDefined();
  expect(data.cookedBeef).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.cookedBeef).toEqualTypeOf<number>();
  expect(data.redRose).toBeDefined();
  expect(data.redRose).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.redRose).toEqualTypeOf<number>();
  expect(data.waterBucket).toBeDefined();
  expect(data.waterBucket).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.waterBucket).toEqualTypeOf<number>();
  expect(data.melon).toBeDefined();
  expect(data.melon).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.melon).toEqualTypeOf<number>();
  expect(data.stick).toBeDefined();
  expect(data.stick).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.stick).toEqualTypeOf<number>();
  expect(data.woodSword).toBeDefined();
  expect(data.woodSword).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.woodSword).toEqualTypeOf<number>();
  expect(data.milkBucket).toBeDefined();
  expect(data.milkBucket).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.milkBucket).toEqualTypeOf<number>();
  expect(data.goldRecord).toBeDefined();
  expect(data.goldRecord).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.goldRecord).toEqualTypeOf<number>();
  expect(data.leash).toBeDefined();
  expect(data.leash).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.leash).toEqualTypeOf<number>();
  expect(data.lavaBucket).toBeDefined();
  expect(data.lavaBucket).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.lavaBucket).toEqualTypeOf<number>();
  expect(data.bone).toBeDefined();
  expect(data.bone).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.bone).toEqualTypeOf<number>();
  expect(data.magmaCream).toBeDefined();
  expect(data.magmaCream).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.magmaCream).toEqualTypeOf<number>();
  expect(data.wheat).toBeDefined();
  expect(data.wheat).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.wheat).toEqualTypeOf<number>();
  expect(data.mushroomSoup).toBeDefined();
  expect(data.mushroomSoup).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.mushroomSoup).toEqualTypeOf<number>();
  expect(data.bread).toBeDefined();
  expect(data.bread).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.bread).toEqualTypeOf<number>();
  expect(data.pumpkinPie).toBeDefined();
  expect(data.pumpkinPie).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.pumpkinPie).toEqualTypeOf<number>();
  expect(data.apple).toBeDefined();
  expect(data.apple).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.apple).toEqualTypeOf<number>();
  expect(data.carrot).toBeDefined();
  expect(data.carrot).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.carrot).toEqualTypeOf<number>();
  expect(data.rawFish).toBeDefined();
  expect(data.rawFish).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.rawFish).toEqualTypeOf<number>();
  expect(data.pork).toBeDefined();
  expect(data.pork).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.pork).toEqualTypeOf<number>();
  expect(data.cake).toBeDefined();
  expect(data.cake).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.cake).toEqualTypeOf<number>();
  expect(data.rottenFlesh).toBeDefined();
  expect(data.rottenFlesh).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.rottenFlesh).toEqualTypeOf<number>();
});

test('Pets', () => {
  const data = new Pets({ stats: 'meow' }, ['meow']);
  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(Pets);
  expectTypeOf(data).toEqualTypeOf<Pets>();
  expect(data.pets).toBeDefined();
  expectTypeOf(data.pets).toEqualTypeOf<Pet[]>();
  expect(data.lastJourneyTimestamp).toBeDefined();
  expectTypeOf(data.lastJourneyTimestamp).toEqualTypeOf<number | null>();
  expect(data.lastJourneyAt).toBeDefined();
  expectTypeOf(data.lastJourneyAt).toEqualTypeOf<Date | null>();
  expect(data.petConsumables).toBeDefined();
  expectTypeOf(data.petConsumables).toEqualTypeOf<PetConsumables>();
});
