import Dungeons, { DungeonsClasses, DungeonsEssence, DungeonsFloors } from './Dungeons';
import { DungeonClass, DungeonsFloorStats, RawDungeonRun, SkillLevel } from './Types';
import { expect, expectTypeOf, test } from 'vitest';

test('Dungeons (Floors)', () => {
  const data = new DungeonsFloors({ stats: 'meow' });
  expect(data.entrance).toBeDefined();
  expectTypeOf(data.entrance).toEqualTypeOf<DungeonsFloorStats>();
  expect(data.entrance.fastestRun).toBeDefined();
  expectTypeOf(data.entrance.fastestRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.entrance.fastestSRun).toBeDefined();
  expectTypeOf(data.entrance.fastestSRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.entrance.fastestSPlusRun).toBeDefined();
  expectTypeOf(data.entrance.fastestSPlusRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.entrance.completions).toBeDefined();
  expect(data.entrance.completions).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.entrance.completions).toEqualTypeOf<number>();
  expect(data.floor1).toBeDefined();
  expectTypeOf(data.floor1).toEqualTypeOf<DungeonsFloorStats>();
  expect(data.floor1.fastestRun).toBeDefined();
  expectTypeOf(data.floor1.fastestRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.floor1.fastestSRun).toBeDefined();
  expectTypeOf(data.floor1.fastestSRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.floor1.fastestSPlusRun).toBeDefined();
  expectTypeOf(data.floor1.fastestSPlusRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.floor1.completions).toBeDefined();
  expect(data.floor1.completions).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.floor1.completions).toEqualTypeOf<number>();
  expect(data.floor2).toBeDefined();
  expectTypeOf(data.floor2).toEqualTypeOf<DungeonsFloorStats>();
  expect(data.floor2.fastestRun).toBeDefined();
  expectTypeOf(data.floor2.fastestRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.floor2.fastestSRun).toBeDefined();
  expectTypeOf(data.floor2.fastestSRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.floor2.fastestSPlusRun).toBeDefined();
  expectTypeOf(data.floor2.fastestSPlusRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.floor2.completions).toBeDefined();
  expect(data.floor2.completions).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.floor2.completions).toEqualTypeOf<number>();
  expect(data.floor3).toBeDefined();
  expectTypeOf(data.floor3).toEqualTypeOf<DungeonsFloorStats>();
  expect(data.floor3.fastestRun).toBeDefined();
  expectTypeOf(data.floor3.fastestRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.floor3.fastestSRun).toBeDefined();
  expectTypeOf(data.floor3.fastestSRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.floor3.fastestSPlusRun).toBeDefined();
  expectTypeOf(data.floor3.fastestSPlusRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.floor3.completions).toBeDefined();
  expect(data.floor3.completions).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.floor3.completions).toEqualTypeOf<number>();
  expect(data.floor4).toBeDefined();
  expectTypeOf(data.floor4).toEqualTypeOf<DungeonsFloorStats>();
  expect(data.floor4.fastestRun).toBeDefined();
  expectTypeOf(data.floor4.fastestRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.floor4.fastestSRun).toBeDefined();
  expectTypeOf(data.floor4.fastestSRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.floor4.fastestSPlusRun).toBeDefined();
  expectTypeOf(data.floor4.fastestSPlusRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.floor4.completions).toBeDefined();
  expect(data.floor4.completions).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.floor4.completions).toEqualTypeOf<number>();
  expect(data.floor5).toBeDefined();
  expectTypeOf(data.floor5).toEqualTypeOf<DungeonsFloorStats>();
  expect(data.floor5.fastestRun).toBeDefined();
  expectTypeOf(data.floor5.fastestRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.floor5.fastestSRun).toBeDefined();
  expectTypeOf(data.floor5.fastestSRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.floor5.fastestSPlusRun).toBeDefined();
  expectTypeOf(data.floor5.fastestSPlusRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.floor5.completions).toBeDefined();
  expect(data.floor5.completions).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.floor5.completions).toEqualTypeOf<number>();
  expect(data.floor6).toBeDefined();
  expectTypeOf(data.floor6).toEqualTypeOf<DungeonsFloorStats>();
  expect(data.floor6.fastestRun).toBeDefined();
  expectTypeOf(data.floor6.fastestRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.floor6.fastestSRun).toBeDefined();
  expectTypeOf(data.floor6.fastestSRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.floor6.fastestSPlusRun).toBeDefined();
  expectTypeOf(data.floor6.fastestSPlusRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.floor6.completions).toBeDefined();
  expect(data.floor6.completions).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.floor6.completions).toEqualTypeOf<number>();
  expect(data.floor7).toBeDefined();
  expectTypeOf(data.floor7).toEqualTypeOf<DungeonsFloorStats>();
  expect(data.floor7.fastestRun).toBeDefined();
  expectTypeOf(data.floor7.fastestRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.floor7.fastestSRun).toBeDefined();
  expectTypeOf(data.floor7.fastestSRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.floor7.fastestSPlusRun).toBeDefined();
  expectTypeOf(data.floor7.fastestSPlusRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.floor7.completions).toBeDefined();
  expect(data.floor7.completions).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.floor7.completions).toEqualTypeOf<number>();
  expect(data.masterMode1).toBeDefined();
  expectTypeOf(data.masterMode1).toEqualTypeOf<DungeonsFloorStats>();
  expect(data.masterMode1.fastestRun).toBeDefined();
  expectTypeOf(data.masterMode1.fastestRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.masterMode1.fastestSRun).toBeDefined();
  expectTypeOf(data.masterMode1.fastestSRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.masterMode1.fastestSPlusRun).toBeDefined();
  expectTypeOf(data.masterMode1.fastestSPlusRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.masterMode1.completions).toBeDefined();
  expect(data.masterMode1.completions).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.masterMode1.completions).toEqualTypeOf<number>();
  expect(data.masterMode2).toBeDefined();
  expectTypeOf(data.masterMode2).toEqualTypeOf<DungeonsFloorStats>();
  expect(data.masterMode2.fastestRun).toBeDefined();
  expectTypeOf(data.masterMode2.fastestRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.masterMode2.fastestSRun).toBeDefined();
  expectTypeOf(data.masterMode2.fastestSRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.masterMode2.fastestSPlusRun).toBeDefined();
  expectTypeOf(data.masterMode2.fastestSPlusRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.masterMode2.completions).toBeDefined();
  expect(data.masterMode2.completions).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.masterMode2.completions).toEqualTypeOf<number>();
  expect(data.masterMode3).toBeDefined();
  expectTypeOf(data.masterMode3).toEqualTypeOf<DungeonsFloorStats>();
  expect(data.masterMode3.fastestRun).toBeDefined();
  expectTypeOf(data.masterMode3.fastestRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.masterMode3.fastestSRun).toBeDefined();
  expectTypeOf(data.masterMode3.fastestSRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.masterMode3.fastestSPlusRun).toBeDefined();
  expectTypeOf(data.masterMode3.fastestSPlusRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.masterMode3.completions).toBeDefined();
  expect(data.masterMode3.completions).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.masterMode3.completions).toEqualTypeOf<number>();
  expect(data.masterMode4).toBeDefined();
  expectTypeOf(data.masterMode4).toEqualTypeOf<DungeonsFloorStats>();
  expect(data.masterMode4.fastestRun).toBeDefined();
  expectTypeOf(data.masterMode4.fastestRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.masterMode4.fastestSRun).toBeDefined();
  expectTypeOf(data.masterMode4.fastestSRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.masterMode4.fastestSPlusRun).toBeDefined();
  expectTypeOf(data.masterMode4.fastestSPlusRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.masterMode4.completions).toBeDefined();
  expect(data.masterMode4.completions).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.masterMode4.completions).toEqualTypeOf<number>();
  expect(data.masterMode5).toBeDefined();
  expectTypeOf(data.masterMode5).toEqualTypeOf<DungeonsFloorStats>();
  expect(data.masterMode5.fastestRun).toBeDefined();
  expectTypeOf(data.masterMode5.fastestRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.masterMode5.fastestSRun).toBeDefined();
  expectTypeOf(data.masterMode5.fastestSRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.masterMode5.fastestSPlusRun).toBeDefined();
  expectTypeOf(data.masterMode5.fastestSPlusRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.masterMode5.completions).toBeDefined();
  expect(data.masterMode5.completions).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.masterMode5.completions).toEqualTypeOf<number>();
  expect(data.masterMode6).toBeDefined();
  expectTypeOf(data.masterMode6).toEqualTypeOf<DungeonsFloorStats>();
  expect(data.masterMode6.fastestRun).toBeDefined();
  expectTypeOf(data.masterMode6.fastestRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.masterMode6.fastestSRun).toBeDefined();
  expectTypeOf(data.masterMode6.fastestSRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.masterMode6.fastestSPlusRun).toBeDefined();
  expectTypeOf(data.masterMode6.fastestSPlusRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.masterMode6.completions).toBeDefined();
  expect(data.masterMode6.completions).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.masterMode6.completions).toEqualTypeOf<number>();
  expect(data.masterMode7).toBeDefined();
  expectTypeOf(data.masterMode7).toEqualTypeOf<DungeonsFloorStats>();
  expect(data.masterMode7.fastestRun).toBeDefined();
  expectTypeOf(data.masterMode7.fastestRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.masterMode7.fastestSRun).toBeDefined();
  expectTypeOf(data.masterMode7.fastestSRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.masterMode7.fastestSPlusRun).toBeDefined();
  expectTypeOf(data.masterMode7.fastestSPlusRun).toEqualTypeOf<RawDungeonRun>();
  expect(data.masterMode7.completions).toBeDefined();
  expect(data.masterMode7.completions).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.masterMode7.completions).toEqualTypeOf<number>();
});

test('Dungeons (Classes)', () => {
  const data = new DungeonsClasses({ stats: 'meow' });
  expect(data.healer).toBeDefined();
  expectTypeOf(data.healer).toEqualTypeOf<SkillLevel>();
  expect(data.mage).toBeDefined();
  expectTypeOf(data.mage).toEqualTypeOf<SkillLevel>();
  expect(data.berserk).toBeDefined();
  expectTypeOf(data.berserk).toEqualTypeOf<SkillLevel>();
  expect(data.archer).toBeDefined();
  expectTypeOf(data.archer).toEqualTypeOf<SkillLevel>();
  expect(data.tank).toBeDefined();
  expectTypeOf(data.tank).toEqualTypeOf<SkillLevel>();
  expect(data.selected).toBeDefined();
  expectTypeOf(data.selected).toEqualTypeOf<DungeonClass>();
});

test('Dungeons (Essence)', () => {
  const data = new DungeonsEssence({ stats: 'meow' });
  expect(data.diamond).toBeDefined();
  expect(data.diamond).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.diamond).toEqualTypeOf<number>();
  expect(data.dragon).toBeDefined();
  expect(data.dragon).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.dragon).toEqualTypeOf<number>();
  expect(data.spider).toBeDefined();
  expect(data.spider).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.spider).toEqualTypeOf<number>();
  expect(data.wither).toBeDefined();
  expect(data.wither).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.wither).toEqualTypeOf<number>();
  expect(data.undead).toBeDefined();
  expect(data.undead).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.undead).toEqualTypeOf<number>();
  expect(data.gold).toBeDefined();
  expect(data.gold).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.gold).toEqualTypeOf<number>();
  expect(data.ice).toBeDefined();
  expect(data.ice).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.ice).toEqualTypeOf<number>();
  expect(data.crimson).toBeDefined();
  expect(data.crimson).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.crimson).toEqualTypeOf<number>();
});

test('Dungeons', () => {
  const data = new Dungeons({ stats: 'meow' });
  expect(data.experience).toBeDefined();
  expectTypeOf(data.experience).toEqualTypeOf<SkillLevel>();
  expect(data.secrets).toBeDefined();
  expect(data.secrets).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.secrets).toEqualTypeOf<number>();
  expect(data.catacombsCompletions).toBeDefined();
  expectTypeOf(data.catacombsCompletions).toEqualTypeOf<Record<string, number>>();
  expect(data.masterModeCompletions).toBeDefined();
  expectTypeOf(data.masterModeCompletions).toEqualTypeOf<Record<string, number>>();
  expect(data.floors).toBeDefined();
  expectTypeOf(data.floors).toEqualTypeOf<DungeonsFloors>();
  expect(data.classes).toBeDefined();
  expectTypeOf(data.classes).toEqualTypeOf<DungeonsClasses>();
  expect(data.essence).toBeDefined();
  expectTypeOf(data.essence).toEqualTypeOf<DungeonsEssence>();
});
